//////////////////////////////////////////////////////////////////////
// C++ source file generated by SpecC V2.2.1
// Design: vocoderPam
// File:   vocoderPam.cc
// Time:   Tue Nov  5 02:17:54 2019
//////////////////////////////////////////////////////////////////////

// Note: User-defined include files are inlined in this file.

// Note: System-defined include files are inlined in this file.

#include "vocoderPam.h"


unsigned int _IDcnt = 0;
// variable definitions //////////////////////////////////////////////

#line 8 "src/common/F_gamma.sc"
short int F_gamma1[10] = { 

  ((short int)29491),((short int)26542),((short int)23888),((short int)21499),((short int)19349),
  ((short int)17414),((short int)15672),((short int)14105),((short int)12694),((short int)11425) };

short int F_gamma2[10] = { 

  ((short int)19661),((short int)11797),((short int)7078),((short int)4247),((short int)2548),
  ((short int)1529),((short int)917),((short int)550),((short int)330),((short int)198) };



short int F_gamma3[10] = { 

  ((short int)22938),((short int)16057),((short int)11240),((short int)7868),((short int)5508),
  ((short int)3856),((short int)2699),((short int)1889),((short int)1322),((short int)925) };


short int F_gamma4[10] = { 

  ((short int)24576),((short int)18432),((short int)13824),((short int)10368),((short int)7776),
  ((short int)5832),((short int)4374),((short int)3281),((short int)2461),((short int)1846) };

#line 74 "src/common/basic_func.sc"
static const short int log_table[33] = { 

  ((short int)0),((short int)1455),((short int)2866),((short int)4236),((short int)5568),((short int)6863),((short int)8124),((short int)9352),((short int)10549),((short int)11716),
  ((short int)12855),((short int)13967),((short int)15054),((short int)16117),((short int)17156),((short int)18172),((short int)19167),((short int)20142),((short int)21097),((short int)22033),
  ((short int)22951),((short int)23852),((short int)24735),((short int)25603),((short int)26455),((short int)27291),((short int)28113),((short int)28922),((short int)29716),((short int)30497),
  ((short int)31266),((short int)32023),((short int)32767) };

#line 150 "src/common/basic_func.sc"
static const short int pow_table[33] = { 

  ((short int)16384),((short int)16743),((short int)17109),((short int)17484),((short int)17867),((short int)18258),((short int)18658),((short int)19066),((short int)19484),((short int)19911),
  ((short int)20347),((short int)20792),((short int)21247),((short int)21713),((short int)22188),((short int)22674),((short int)23170),((short int)23678),((short int)24196),((short int)24726),
  ((short int)25268),((short int)25821),((short int)26386),((short int)26964),((short int)27554),((short int)28158),((short int)28774),((short int)29405),((short int)30048),((short int)30706),
  ((short int)31379),((short int)32066),((short int)32767) };

#line 219 "src/common/basic_func.sc"
static const short int sqrt_table[49] = { 


  ((short int)32767),((short int)31790),((short int)30894),((short int)30070),((short int)29309),((short int)28602),((short int)27945),((short int)27330),((short int)26755),((short int)26214),
  ((short int)25705),((short int)25225),((short int)24770),((short int)24339),((short int)23930),((short int)23541),((short int)23170),((short int)22817),((short int)22479),((short int)22155),
  ((short int)21845),((short int)21548),((short int)21263),((short int)20988),((short int)20724),((short int)20470),((short int)20225),((short int)19988),((short int)19760),((short int)19539),
  ((short int)19326),((short int)19119),((short int)18919),((short int)18725),((short int)18536),((short int)18354),((short int)18176),((short int)18004),((short int)17837),((short int)17674),
  ((short int)17515),((short int)17361),((short int)17211),((short int)17064),((short int)16921),((short int)16782),((short int)16646),((short int)16514),((short int)16384) };

#line 47 "src/common/basic_op.sc"
bool Overflow = false;
bool Carry = false;

#line 3 "src/lp_analysis/lp_analysis.tab"
static short int window_232_8[240] = { 

  ((short int)2621),((short int)2623),((short int)2627),((short int)2634),((short int)2644),((short int)2656),((short int)2671),((short int)2689),((short int)2710),((short int)2734),
  ((short int)2760),((short int)2789),((short int)2821),((short int)2855),((short int)2893),((short int)2933),((short int)2975),((short int)3021),((short int)3069),((short int)3120),
  ((short int)3173),((short int)3229),((short int)3288),((short int)3350),((short int)3414),((short int)3481),((short int)3550),((short int)3622),((short int)3697),((short int)3774),
  ((short int)3853),((short int)3936),((short int)4021),((short int)4108),((short int)4198),((short int)4290),((short int)4385),((short int)4482),((short int)4582),((short int)4684),
  ((short int)4788),((short int)4895),((short int)5004),((short int)5116),((short int)5230),((short int)5346),((short int)5464),((short int)5585),((short int)5708),((short int)5833),
  ((short int)5960),((short int)6090),((short int)6221),((short int)6355),((short int)6491),((short int)6629),((short int)6769),((short int)6910),((short int)7054),((short int)7200),
  ((short int)7348),((short int)7498),((short int)7649),((short int)7803),((short int)7958),((short int)8115),((short int)8274),((short int)8434),((short int)8597),((short int)8761),
  ((short int)8926),((short int)9093),((short int)9262),((short int)9432),((short int)9604),((short int)9778),((short int)9952),((short int)10129),((short int)10306),((short int)10485),
  ((short int)10665),((short int)10847),((short int)11030),((short int)11214),((short int)11399),((short int)11586),((short int)11773),((short int)11962),((short int)12152),((short int)12342),
  ((short int)12534),((short int)12727),((short int)12920),((short int)13115),((short int)13310),((short int)13506),((short int)13703),((short int)13901),((short int)14099),((short int)14298),
  ((short int)14497),((short int)14698),((short int)14898),((short int)15100),((short int)15301),((short int)15504),((short int)15706),((short int)15909),((short int)16112),((short int)16316),
  ((short int)16520),((short int)16724),((short int)16928),((short int)17132),((short int)17337),((short int)17541),((short int)17746),((short int)17950),((short int)18155),((short int)18359),
  ((short int)18564),((short int)18768),((short int)18972),((short int)19175),((short int)19379),((short int)19582),((short int)19785),((short int)19987),((short int)20189),((short int)20390),
  ((short int)20591),((short int)20792),((short int)20992),((short int)21191),((short int)21390),((short int)21588),((short int)21785),((short int)21981),((short int)22177),((short int)22372),
  ((short int)22566),((short int)22759),((short int)22951),((short int)23143),((short int)23333),((short int)23522),((short int)23710),((short int)23897),((short int)24083),((short int)24268),
  ((short int)24451),((short int)24633),((short int)24814),((short int)24994),((short int)25172),((short int)25349),((short int)25525),((short int)25699),((short int)25871),((short int)26042),
  ((short int)26212),((short int)26380),((short int)26546),((short int)26711),((short int)26874),((short int)27035),((short int)27195),((short int)27353),((short int)27509),((short int)27664),
  ((short int)27816),((short int)27967),((short int)28115),((short int)28262),((short int)28407),((short int)28550),((short int)28691),((short int)28830),((short int)28967),((short int)29102),
  ((short int)29234),((short int)29365),((short int)29493),((short int)29619),((short int)29743),((short int)29865),((short int)29985),((short int)30102),((short int)30217),((short int)30330),
  ((short int)30440),((short int)30548),((short int)30654),((short int)30757),((short int)30858),((short int)30956),((short int)31052),((short int)31146),((short int)31237),((short int)31326),
  ((short int)31412),((short int)31495),((short int)31576),((short int)31655),((short int)31730),((short int)31804),((short int)31874),((short int)31942),((short int)32008),((short int)32071),
  ((short int)32131),((short int)32188),((short int)32243),((short int)32295),((short int)32345),((short int)32392),((short int)32436),((short int)32477),((short int)32516),((short int)32552),
  ((short int)32585),((short int)32615),((short int)32643),((short int)32668),((short int)32690),((short int)32709),((short int)32726),((short int)32740),((short int)32751),((short int)32759),
  ((short int)32765),((short int)32767),((short int)32767),((short int)32097),((short int)30112),((short int)26895),((short int)22576),((short int)17333),((short int)11380),((short int)4962) };




static short int window_160_80[240] = { 

  ((short int)2621),((short int)2624),((short int)2633),((short int)2648),((short int)2668),((short int)2695),((short int)2727),((short int)2765),((short int)2809),((short int)2859),
  ((short int)2915),((short int)2976),((short int)3043),((short int)3116),((short int)3194),((short int)3279),((short int)3368),((short int)3464),((short int)3565),((short int)3671),
  ((short int)3783),((short int)3900),((short int)4023),((short int)4151),((short int)4285),((short int)4423),((short int)4567),((short int)4716),((short int)4870),((short int)5029),
  ((short int)5193),((short int)5362),((short int)5535),((short int)5714),((short int)5897),((short int)6084),((short int)6277),((short int)6473),((short int)6674),((short int)6880),
  ((short int)7089),((short int)7303),((short int)7521),((short int)7742),((short int)7968),((short int)8197),((short int)8430),((short int)8667),((short int)8907),((short int)9151),
  ((short int)9398),((short int)9648),((short int)9902),((short int)10158),((short int)10417),((short int)10680),((short int)10945),((short int)11212),((short int)11482),((short int)11755),
  ((short int)12030),((short int)12307),((short int)12586),((short int)12867),((short int)13150),((short int)13435),((short int)13722),((short int)14010),((short int)14299),((short int)14590),
  ((short int)14882),((short int)15175),((short int)15469),((short int)15764),((short int)16060),((short int)16356),((short int)16653),((short int)16950),((short int)17248),((short int)17546),
  ((short int)17844),((short int)18141),((short int)18439),((short int)18736),((short int)19033),((short int)19330),((short int)19625),((short int)19920),((short int)20214),((short int)20507),
  ((short int)20799),((short int)21090),((short int)21380),((short int)21668),((short int)21954),((short int)22239),((short int)22522),((short int)22803),((short int)23083),((short int)23360),
  ((short int)23635),((short int)23907),((short int)24177),((short int)24445),((short int)24710),((short int)24972),((short int)25231),((short int)25488),((short int)25741),((short int)25991),
  ((short int)26238),((short int)26482),((short int)26722),((short int)26959),((short int)27192),((short int)27422),((short int)27647),((short int)27869),((short int)28087),((short int)28300),
  ((short int)28510),((short int)28715),((short int)28916),((short int)29113),((short int)29305),((short int)29493),((short int)29676),((short int)29854),((short int)30028),((short int)30197),
  ((short int)30361),((short int)30519),((short int)30673),((short int)30822),((short int)30966),((short int)31105),((short int)31238),((short int)31366),((short int)31489),((short int)31606),
  ((short int)31718),((short int)31825),((short int)31926),((short int)32021),((short int)32111),((short int)32195),((short int)32273),((short int)32346),((short int)32413),((short int)32475),
  ((short int)32530),((short int)32580),((short int)32624),((short int)32662),((short int)32695),((short int)32721),((short int)32742),((short int)32756),((short int)32765),((short int)32767),
  ((short int)32767),((short int)32756),((short int)32720),((short int)32661),((short int)32578),((short int)32471),((short int)32341),((short int)32188),((short int)32012),((short int)31813),
  ((short int)31592),((short int)31349),((short int)31084),((short int)30798),((short int)30492),((short int)30165),((short int)29818),((short int)29453),((short int)29068),((short int)28666),
  ((short int)28247),((short int)27810),((short int)27358),((short int)26891),((short int)26408),((short int)25913),((short int)25404),((short int)24883),((short int)24350),((short int)23807),
  ((short int)23255),((short int)22693),((short int)22124),((short int)21548),((short int)20965),((short int)20378),((short int)19786),((short int)19191),((short int)18593),((short int)17994),
  ((short int)17395),((short int)16796),((short int)16199),((short int)15604),((short int)15012),((short int)14424),((short int)13842),((short int)13265),((short int)12696),((short int)12135),
  ((short int)11582),((short int)11039),((short int)10507),((short int)9986),((short int)9477),((short int)8981),((short int)8499),((short int)8031),((short int)7579),((short int)7143),
  ((short int)6723),((short int)6321),((short int)5937),((short int)5571),((short int)5225),((short int)4898),((short int)4591),((short int)4305),((short int)4041),((short int)3798),
  ((short int)3577),((short int)3378),((short int)3202),((short int)3048),((short int)2918),((short int)2812),((short int)2729),((short int)2669),((short int)2633),((short int)2621) };

#line 8 "src/lp_analysis/q_plsf_5.tab"
static const short int table[65] = { 

  ((short int)32767),((short int)32729),((short int)32610),((short int)32413),((short int)32138),((short int)31786),((short int)31357),((short int)30853),
  ((short int)30274),((short int)29622),((short int)28899),((short int)28106),((short int)27246),((short int)26320),((short int)25330),((short int)24279),
  ((short int)23170),((short int)22006),((short int)20788),((short int)19520),((short int)18205),((short int)16846),((short int)15447),((short int)14010),
  ((short int)12540),((short int)11039),((short int)9512),((short int)7962),((short int)6393),((short int)4808),((short int)3212),((short int)1608),
  ((short int)0),((short int)-1608),((short int)-3212),((short int)-4808),((short int)-6393),((short int)-7962),((short int)-9512),((short int)-11039),
  ((short int)-12540),((short int)-14010),((short int)-15447),((short int)-16846),((short int)-18205),((short int)-19520),((short int)-20788),((short int)-22006),
  ((short int)-23170),((short int)-24279),((short int)-25330),((short int)-26320),((short int)-27246),((short int)-28106),((short int)-28899),((short int)-29622),
  ((short int)-30274),((short int)-30853),((short int)-31357),((short int)-31786),((short int)-32138),((short int)-32413),((short int)-32610),((short int)-32729),
  ((short int)-32768) };

#line 25 "src/lp_analysis/q_plsf_5.tab"
static const short int slope[64] = { 

  ((short int)-26887),((short int)-8812),((short int)-5323),((short int)-3813),((short int)-2979),((short int)-2444),((short int)-2081),((short int)-1811),
  ((short int)-1608),((short int)-1450),((short int)-1322),((short int)-1219),((short int)-1132),((short int)-1059),((short int)-998),((short int)-946),
  ((short int)-901),((short int)-861),((short int)-827),((short int)-797),((short int)-772),((short int)-750),((short int)-730),((short int)-713),
  ((short int)-699),((short int)-687),((short int)-677),((short int)-668),((short int)-662),((short int)-657),((short int)-654),((short int)-652),
  ((short int)-652),((short int)-654),((short int)-657),((short int)-662),((short int)-668),((short int)-677),((short int)-687),((short int)-699),
  ((short int)-713),((short int)-730),((short int)-750),((short int)-772),((short int)-797),((short int)-827),((short int)-861),((short int)-901),
  ((short int)-946),((short int)-998),((short int)-1059),((short int)-1132),((short int)-1219),((short int)-1322),((short int)-1450),((short int)-1608),
  ((short int)-1811),((short int)-2081),((short int)-2444),((short int)-2979),((short int)-3813),((short int)-5323),((short int)-8812),((short int)-26887) };

#line 47 "src/lp_analysis/q_plsf_5.tab"
static short int mean_lsf[10] = { 

  ((short int)1384),
  ((short int)2077),
  ((short int)3420),
  ((short int)5108),
  ((short int)6742),
  ((short int)8122),
  ((short int)9863),
  ((short int)11092),
  ((short int)12714),
  ((short int)13701) };

#line 69 "src/lp_analysis/q_plsf_5.tab"
static short int dico1_lsf[512] = { 

  ((short int)-451),((short int)-1065),((short int)-529),((short int)-1305),
  ((short int)-450),((short int)-756),((short int)-497),((short int)-863),
  ((short int)-384),((short int)-619),((short int)-413),((short int)-669),
  ((short int)-317),((short int)-538),((short int)-331),((short int)-556),
  ((short int)-414),((short int)-508),((short int)-424),((short int)-378),
  ((short int)-274),((short int)-324),((short int)-434),((short int)-614),
  ((short int)-226),((short int)-500),((short int)-232),((short int)-514),
  ((short int)-263),((short int)-377),((short int)-298),((short int)-410),
  ((short int)-151),((short int)-710),((short int)-174),((short int)-818),
  ((short int)-149),((short int)-412),((short int)-156),((short int)-429),
  ((short int)-288),((short int)-462),((short int)-186),((short int)-203),
  ((short int)-170),((short int)-302),((short int)-191),((short int)-321),
  ((short int)-131),((short int)-147),((short int)-297),((short int)-395),
  ((short int)-228),((short int)-214),((short int)-245),((short int)-192),
  ((short int)-67),((short int)-316),((short int)-71),((short int)-327),
  ((short int)-104),((short int)-205),((short int)-94),((short int)-183),
  ((short int)-143),((short int)-38),((short int)-193),((short int)-95),
  ((short int)16),((short int)-76),((short int)-124),((short int)-248),
  ((short int)23),((short int)-237),((short int)24),((short int)-244),
  ((short int)18),((short int)-136),((short int)44),((short int)-111),
  ((short int)-33),((short int)-24),((short int)-25),((short int)0),
  ((short int)149),((short int)19),((short int)23),((short int)-143),
  ((short int)158),((short int)-169),((short int)174),((short int)-181),
  ((short int)133),((short int)-55),((short int)165),((short int)-26),
  ((short int)111),((short int)84),((short int)98),((short int)75),
  ((short int)87),((short int)183),((short int)-115),((short int)-11),
  ((short int)-8),((short int)130),((short int)11),((short int)170),
  ((short int)254),((short int)77),((short int)205),((short int)17),
  ((short int)183),((short int)112),((short int)262),((short int)194),
  ((short int)202),((short int)287),((short int)95),((short int)189),
  ((short int)-42),((short int)-105),((short int)234),((short int)179),
  ((short int)39),((short int)186),((short int)163),((short int)345),
  ((short int)332),((short int)199),((short int)299),((short int)161),
  ((short int)-54),((short int)285),((short int)-78),((short int)281),
  ((short int)-133),((short int)141),((short int)-182),((short int)111),
  ((short int)249),((short int)341),((short int)271),((short int)364),
  ((short int)93),((short int)403),((short int)75),((short int)391),
  ((short int)92),((short int)510),((short int)-138),((short int)220),
  ((short int)-185),((short int)-29),((short int)-34),((short int)361),
  ((short int)-115),((short int)320),((short int)3),((short int)554),
  ((short int)99),((short int)286),((short int)218),((short int)591),
  ((short int)-245),((short int)406),((short int)-268),((short int)453),
  ((short int)0),((short int)580),((short int)25),((short int)606),
  ((short int)275),((short int)532),((short int)148),((short int)450),
  ((short int)-73),((short int)739),((short int)-285),((short int)518),
  ((short int)-288),((short int)94),((short int)-203),((short int)674),
  ((short int)-140),((short int)-74),((short int)205),((short int)714),
  ((short int)-114),((short int)299),((short int)176),((short int)923),
  ((short int)182),((short int)557),((short int)240),((short int)705),
  ((short int)-16),((short int)513),((short int)485),((short int)593),
  ((short int)293),((short int)384),((short int)451),((short int)617),
  ((short int)-38),((short int)50),((short int)563),((short int)529),
  ((short int)303),((short int)209),((short int)459),((short int)363),
  ((short int)433),((short int)452),((short int)450),((short int)454),
  ((short int)367),((short int)606),((short int)477),((short int)741),
  ((short int)432),((short int)353),((short int)368),((short int)267),
  ((short int)361),((short int)716),((short int)273),((short int)583),
  ((short int)453),((short int)166),((short int)510),((short int)172),
  ((short int)201),((short int)629),((short int)274),((short int)191),
  ((short int)568),((short int)639),((short int)302),((short int)298),
  ((short int)634),((short int)387),((short int)643),((short int)350),
  ((short int)587),((short int)560),((short int)612),((short int)565),
  ((short int)600),((short int)788),((short int)487),((short int)672),
  ((short int)512),((short int)1015),((short int)321),((short int)333),
  ((short int)357),((short int)854),((short int)-125),((short int)413),
  ((short int)474),((short int)712),((short int)17),((short int)-151),
  ((short int)564),((short int)285),((short int)270),((short int)-241),
  ((short int)971),((short int)889),((short int)489),((short int)220),
  ((short int)510),((short int)896),((short int)549),((short int)924),
  ((short int)327),((short int)825),((short int)290),((short int)911),
  ((short int)540),((short int)1108),((short int)158),((short int)805),
  ((short int)199),((short int)957),((short int)511),((short int)730),
  ((short int)100),((short int)874),((short int)13),((short int)791),
  ((short int)435),((short int)632),((short int)676),((short int)972),
  ((short int)249),((short int)900),((short int)467),((short int)1218),
  ((short int)781),((short int)1074),((short int)585),((short int)785),
  ((short int)-23),((short int)669),((short int)267),((short int)1043),
  ((short int)619),((short int)1084),((short int)615),((short int)1145),
  ((short int)622),((short int)905),((short int)916),((short int)1049),
  ((short int)80),((short int)331),((short int)584),((short int)1075),
  ((short int)89),((short int)639),((short int)988),((short int)961),
  ((short int)770),((short int)720),((short int)798),((short int)699),
  ((short int)492),((short int)447),((short int)899),((short int)627),
  ((short int)271),((short int)1188),((short int)725),((short int)1333),
  ((short int)87),((short int)603),((short int)832),((short int)1603),
  ((short int)616),((short int)1127),((short int)890),((short int)1505),
  ((short int)1000),((short int)1156),((short int)866),((short int)1009),
  ((short int)995),((short int)827),((short int)1149),((short int)858),
  ((short int)817),((short int)1450),((short int)773),((short int)1320),
  ((short int)500),((short int)1389),((short int)312),((short int)1153),
  ((short int)-20),((short int)1084),((short int)64),((short int)1283),
  ((short int)2),((short int)1172),((short int)399),((short int)1869),
  ((short int)514),((short int)1706),((short int)502),((short int)1636),
  ((short int)886),((short int)1522),((short int)416),((short int)600),
  ((short int)1131),((short int)1350),((short int)1275),((short int)1390),
  ((short int)889),((short int)1795),((short int)914),((short int)1766),
  ((short int)227),((short int)1183),((short int)1250),((short int)1826),
  ((short int)505),((short int)1854),((short int)919),((short int)2353),
  ((short int)-199),((short int)431),((short int)152),((short int)1735),
  ((short int)-213),((short int)-28),((short int)392),((short int)1334),
  ((short int)-153),((short int)-52),((short int)978),((short int)1151),
  ((short int)-323),((short int)-400),((short int)813),((short int)1703),
  ((short int)-136),((short int)84),((short int)1449),((short int)2015),
  ((short int)-331),((short int)-143),((short int)-137),((short int)1192),
  ((short int)-256),((short int)534),((short int)-157),((short int)1031),
  ((short int)-307),((short int)-439),((short int)542),((short int)731),
  ((short int)-329),((short int)-420),((short int)-97),((short int)616),
  ((short int)-362),((short int)-168),((short int)-322),((short int)366),
  ((short int)-247),((short int)-110),((short int)-211),((short int)89),
  ((short int)-196),((short int)-309),((short int)20),((short int)59),
  ((short int)-364),((short int)-463),((short int)-286),((short int)89),
  ((short int)-336),((short int)175),((short int)-432),((short int)141),
  ((short int)-379),((short int)-190),((short int)-434),((short int)-196),
  ((short int)-79),((short int)150),((short int)-278),((short int)-227),
  ((short int)-280),((short int)166),((short int)-555),((short int)-422),
  ((short int)-155),((short int)541),((short int)-366),((short int)54),
  ((short int)-29),((short int)-83),((short int)-301),((short int)-774),
  ((short int)186),((short int)628),((short int)-397),((short int)-264),
  ((short int)242),((short int)293),((short int)-197),((short int)-585),
  ((short int)124),((short int)410),((short int)53),((short int)-133),
  ((short int)10),((short int)340),((short int)-570),((short int)-1065),
  ((short int)65),((short int)-446),((short int)68),((short int)-493),
  ((short int)383),((short int)937),((short int)-357),((short int)-711),
  ((short int)-359),((short int)-250),((short int)-677),((short int)-1068),
  ((short int)292),((short int)-26),((short int)363),((short int)6),
  ((short int)607),((short int)1313),((short int)-127),((short int)-10),
  ((short int)1513),((short int)1886),((short int)713),((short int)972),
  ((short int)1469),((short int)2181),((short int)1443),((short int)2016) };


static short int dico2_lsf[1024] = { 

  ((short int)-1631),((short int)-1600),((short int)-1796),((short int)-2290),
  ((short int)-1027),((short int)-1770),((short int)-1100),((short int)-2025),
  ((short int)-1277),((short int)-1388),((short int)-1367),((short int)-1534),
  ((short int)-947),((short int)-1461),((short int)-972),((short int)-1524),
  ((short int)-999),((short int)-1222),((short int)-1020),((short int)-1172),
  ((short int)-815),((short int)-987),((short int)-992),((short int)-1371),
  ((short int)-1216),((short int)-1006),((short int)-1289),((short int)-1094),
  ((short int)-744),((short int)-1268),((short int)-755),((short int)-1293),
  ((short int)-862),((short int)-923),((short int)-905),((short int)-984),
  ((short int)-678),((short int)-1051),((short int)-685),((short int)-1050),
  ((short int)-1087),((short int)-985),((short int)-1062),((short int)-679),
  ((short int)-989),((short int)-641),((short int)-1127),((short int)-976),
  ((short int)-762),((short int)-654),((short int)-890),((short int)-806),
  ((short int)-833),((short int)-1091),((short int)-706),((short int)-629),
  ((short int)-621),((short int)-806),((short int)-640),((short int)-812),
  ((short int)-775),((short int)-634),((short int)-779),((short int)-543),
  ((short int)-996),((short int)-565),((short int)-1075),((short int)-580),
  ((short int)-546),((short int)-611),((short int)-572),((short int)-619),
  ((short int)-760),((short int)-290),((short int)-879),((short int)-526),
  ((short int)-823),((short int)-462),((short int)-795),((short int)-253),
  ((short int)-553),((short int)-415),((short int)-589),((short int)-439),
  ((short int)-533),((short int)-340),((short int)-692),((short int)-935),
  ((short int)-505),((short int)-772),((short int)-702),((short int)-1131),
  ((short int)-263),((short int)-306),((short int)-971),((short int)-483),
  ((short int)-445),((short int)-74),((short int)-555),((short int)-548),
  ((short int)-614),((short int)-129),((short int)-693),((short int)-234),
  ((short int)-396),((short int)-246),((short int)-475),((short int)-250),
  ((short int)-265),((short int)-404),((short int)-376),((short int)-514),
  ((short int)-417),((short int)-510),((short int)-300),((short int)-313),
  ((short int)-334),((short int)-664),((short int)-463),((short int)-814),
  ((short int)-386),((short int)-704),((short int)-337),((short int)-615),
  ((short int)-234),((short int)-201),((short int)-233),((short int)-239),
  ((short int)-167),((short int)-567),((short int)-203),((short int)-619),
  ((short int)-147),((short int)-415),((short int)-115),((short int)-352),
  ((short int)-166),((short int)-750),((short int)-171),((short int)-761),
  ((short int)-270),((short int)-879),((short int)-264),((short int)-903),
  ((short int)-367),((short int)-744),((short int)43),((short int)-475),
  ((short int)14),((short int)-653),((short int)43),((short int)-670),
  ((short int)11),((short int)-448),((short int)-59),((short int)-521),
  ((short int)-126),((short int)-119),((short int)-155),((short int)-613),
  ((short int)-42),((short int)-863),((short int)-27),((short int)-931),
  ((short int)136),((short int)-483),((short int)183),((short int)-468),
  ((short int)55),((short int)-298),((short int)55),((short int)-304),
  ((short int)313),((short int)-609),((short int)313),((short int)-720),
  ((short int)322),((short int)-167),((short int)100),((short int)-541),
  ((short int)-3),((short int)-119),((short int)-111),((short int)-187),
  ((short int)233),((short int)-236),((short int)260),((short int)-234),
  ((short int)26),((short int)-165),((short int)134),((short int)-45),
  ((short int)-40),((short int)-549),((short int)360),((short int)-203),
  ((short int)378),((short int)-388),((short int)450),((short int)-383),
  ((short int)275),((short int)20),((short int)182),((short int)-103),
  ((short int)246),((short int)-111),((short int)431),((short int)37),
  ((short int)462),((short int)-146),((short int)487),((short int)-157),
  ((short int)-284),((short int)-59),((short int)503),((short int)-184),
  ((short int)24),((short int)53),((short int)-3),((short int)54),
  ((short int)122),((short int)259),((short int)333),((short int)66),
  ((short int)484),((short int)104),((short int)436),((short int)68),
  ((short int)195),((short int)116),((short int)190),((short int)206),
  ((short int)269),((short int)-9),((short int)482),((short int)352),
  ((short int)382),((short int)285),((short int)399),((short int)277),
  ((short int)452),((short int)256),((short int)69),((short int)186),
  ((short int)13),((short int)297),((short int)-13),((short int)259),
  ((short int)-95),((short int)30),((short int)56),((short int)394),
  ((short int)196),((short int)425),((short int)205),((short int)456),
  ((short int)281),((short int)577),((short int)15),((short int)191),
  ((short int)375),((short int)290),((short int)407),((short int)576),
  ((short int)-56),((short int)227),((short int)544),((short int)405),
  ((short int)0),((short int)549),((short int)-92),((short int)528),
  ((short int)-229),((short int)351),((short int)-245),((short int)338),
  ((short int)-362),((short int)435),((short int)167),((short int)527),
  ((short int)-75),((short int)302),((short int)91),((short int)824),
  ((short int)129),((short int)599),((short int)496),((short int)679),
  ((short int)186),((short int)749),((short int)153),((short int)737),
  ((short int)-281),((short int)600),((short int)-348),((short int)615),
  ((short int)-236),((short int)769),((short int)41),((short int)881),
  ((short int)38),((short int)890),((short int)-220),((short int)841),
  ((short int)-357),((short int)883),((short int)-393),((short int)903),
  ((short int)-634),((short int)474),((short int)-444),((short int)850),
  ((short int)-175),((short int)678),((short int)-493),((short int)242),
  ((short int)-519),((short int)785),((short int)-714),((short int)582),
  ((short int)-541),((short int)366),((short int)-543),((short int)434),
  ((short int)-597),((short int)500),((short int)-765),((short int)222),
  ((short int)-702),((short int)917),((short int)-743),((short int)962),
  ((short int)-869),((short int)501),((short int)-899),((short int)548),
  ((short int)-379),((short int)200),((short int)-435),((short int)157),
  ((short int)-819),((short int)214),((short int)-861),((short int)157),
  ((short int)-614),((short int)40),((short int)-632),((short int)94),
  ((short int)-883),((short int)-54),((short int)-741),((short int)516),
  ((short int)-501),((short int)298),((short int)-614),((short int)-171),
  ((short int)-870),((short int)-161),((short int)-865),((short int)-23),
  ((short int)-818),((short int)93),((short int)-1015),((short int)-267),
  ((short int)-662),((short int)-359),((short int)-549),((short int)2),
  ((short int)-442),((short int)-121),((short int)-377),((short int)0),
  ((short int)-227),((short int)33),((short int)-414),((short int)-126),
  ((short int)-129),((short int)212),((short int)-934),((short int)34),
  ((short int)-1082),((short int)-282),((short int)-1119),((short int)-268),
  ((short int)-710),((short int)-825),((short int)-420),((short int)-191),
  ((short int)-1076),((short int)-928),((short int)-917),((short int)-93),
  ((short int)-628),((short int)-358),((short int)97),((short int)7),
  ((short int)-206),((short int)-393),((short int)-101),((short int)24),
  ((short int)-203),((short int)38),((short int)-168),((short int)83),
  ((short int)-599),((short int)-423),((short int)-279),((short int)426),
  ((short int)-700),((short int)118),((short int)-75),((short int)206),
  ((short int)-981),((short int)-673),((short int)-680),((short int)417),
  ((short int)-367),((short int)37),((short int)-279),((short int)474),
  ((short int)-129),((short int)-318),((short int)319),((short int)296),
  ((short int)-626),((short int)-39),((short int)343),((short int)602),
  ((short int)-696),((short int)-39),((short int)-303),((short int)940),
  ((short int)104),((short int)233),((short int)-380),((short int)137),
  ((short int)-36),((short int)269),((short int)-75),((short int)-214),
  ((short int)120),((short int)43),((short int)-529),((short int)-477),
  ((short int)459),((short int)164),((short int)-202),((short int)-229),
  ((short int)-49),((short int)-167),((short int)609),((short int)792),
  ((short int)98),((short int)-220),((short int)915),((short int)148),
  ((short int)293),((short int)283),((short int)869),((short int)91),
  ((short int)575),((short int)394),((short int)326),((short int)-78),
  ((short int)717),((short int)67),((short int)365),((short int)-323),
  ((short int)616),((short int)-36),((short int)731),((short int)27),
  ((short int)619),((short int)238),((short int)632),((short int)273),
  ((short int)448),((short int)99),((short int)801),((short int)476),
  ((short int)869),((short int)273),((short int)685),((short int)64),
  ((short int)789),((short int)72),((short int)1021),((short int)217),
  ((short int)793),((short int)459),((short int)734),((short int)360),
  ((short int)646),((short int)480),((short int)360),((short int)322),
  ((short int)429),((short int)464),((short int)638),((short int)430),
  ((short int)756),((short int)363),((short int)1000),((short int)404),
  ((short int)683),((short int)528),((short int)602),((short int)615),
  ((short int)655),((short int)413),((short int)946),((short int)687),
  ((short int)937),((short int)602),((short int)904),((short int)604),
  ((short int)555),((short int)737),((short int)786),((short int)662),
  ((short int)467),((short int)654),((short int)362),((short int)589),
  ((short int)929),((short int)710),((short int)498),((short int)478),
  ((short int)415),((short int)420),((short int)693),((short int)883),
  ((short int)813),((short int)683),((short int)781),((short int)925),
  ((short int)913),((short int)939),((short int)726),((short int)732),
  ((short int)491),((short int)853),((short int)531),((short int)948),
  ((short int)734),((short int)963),((short int)315),((short int)808),
  ((short int)761),((short int)755),((short int)1144),((short int)760),
  ((short int)655),((short int)1076),((short int)826),((short int)1057),
  ((short int)1091),((short int)838),((short int)1003),((short int)808),
  ((short int)1047),((short int)1133),((short int)659),((short int)1101),
  ((short int)992),((short int)1050),((short int)1074),((short int)1075),
  ((short int)971),((short int)694),((short int)1226),((short int)1054),
  ((short int)571),((short int)841),((short int)884),((short int)1404),
  ((short int)1379),((short int)1096),((short int)1080),((short int)861),
  ((short int)1231),((short int)735),((short int)1284),((short int)760),
  ((short int)1272),((short int)991),((short int)1367),((short int)1053),
  ((short int)1257),((short int)700),((short int)1050),((short int)534),
  ((short int)988),((short int)453),((short int)1264),((short int)599),
  ((short int)1140),((short int)679),((short int)1621),((short int)815),
  ((short int)1384),((short int)521),((short int)1317),((short int)393),
  ((short int)1564),((short int)805),((short int)1448),((short int)686),
  ((short int)1068),((short int)648),((short int)875),((short int)307),
  ((short int)1083),((short int)361),((short int)1047),((short int)317),
  ((short int)1417),((short int)964),((short int)675),((short int)571),
  ((short int)1152),((short int)79),((short int)1114),((short int)-47),
  ((short int)1530),((short int)311),((short int)1721),((short int)314),
  ((short int)1166),((short int)689),((short int)514),((short int)-94),
  ((short int)349),((short int)282),((short int)1412),((short int)328),
  ((short int)1025),((short int)487),((short int)-65),((short int)57),
  ((short int)805),((short int)970),((short int)36),((short int)62),
  ((short int)769),((short int)-263),((short int)791),((short int)-346),
  ((short int)637),((short int)699),((short int)-137),((short int)620),
  ((short int)534),((short int)541),((short int)-735),((short int)194),
  ((short int)711),((short int)300),((short int)-268),((short int)-863),
  ((short int)926),((short int)769),((short int)-708),((short int)-428),
  ((short int)506),((short int)174),((short int)-892),((short int)-630),
  ((short int)435),((short int)547),((short int)-1435),((short int)-258),
  ((short int)621),((short int)471),((short int)-1018),((short int)-1368),
  ((short int)-393),((short int)521),((short int)-920),((short int)-686),
  ((short int)-25),((short int)20),((short int)-982),((short int)-1156),
  ((short int)340),((short int)9),((short int)-1558),((short int)-1135),
  ((short int)-352),((short int)48),((short int)-1579),((short int)-402),
  ((short int)-887),((short int)6),((short int)-1156),((short int)-888),
  ((short int)-548),((short int)-352),((short int)-1643),((short int)-1168),
  ((short int)-159),((short int)610),((short int)-2024),((short int)-963),
  ((short int)-225),((short int)193),((short int)-1656),((short int)-1960),
  ((short int)-245),((short int)-493),((short int)-964),((short int)-1680),
  ((short int)-936),((short int)-635),((short int)-1299),((short int)-1744),
  ((short int)-1388),((short int)-604),((short int)-1540),((short int)-835),
  ((short int)-1397),((short int)-135),((short int)-1588),((short int)-290),
  ((short int)-1670),((short int)-712),((short int)-2011),((short int)-1632),
  ((short int)-1663),((short int)-27),((short int)-2258),((short int)-811),
  ((short int)-1157),((short int)184),((short int)-1265),((short int)189),
  ((short int)-1367),((short int)586),((short int)-2011),((short int)201),
  ((short int)-790),((short int)712),((short int)-1210),((short int)3),
  ((short int)-1033),((short int)808),((short int)-1251),((short int)830),
  ((short int)-111),((short int)635),((short int)-1636),((short int)447),
  ((short int)-463),((short int)-949),((short int)-445),((short int)-928),
  ((short int)-504),((short int)-1162),((short int)-501),((short int)-1211),
  ((short int)144),((short int)-351),((short int)-372),((short int)-1052),
  ((short int)-283),((short int)-1059),((short int)-279),((short int)-1123),
  ((short int)-575),((short int)-1438),((short int)-587),((short int)-1614),
  ((short int)-935),((short int)-984),((short int)229),((short int)690),
  ((short int)-921),((short int)-719),((short int)-403),((short int)1362),
  ((short int)-685),((short int)-465),((short int)874),((short int)397),
  ((short int)-509),((short int)-46),((short int)317),((short int)1334),
  ((short int)-485),((short int)456),((short int)813),((short int)439),
  ((short int)-411),((short int)339),((short int)898),((short int)1067),
  ((short int)-425),((short int)46),((short int)1441),((short int)497),
  ((short int)-909),((short int)-800),((short int)1465),((short int)1046),
  ((short int)-254),((short int)-321),((short int)1430),((short int)1165),
  ((short int)68),((short int)350),((short int)1034),((short int)666),
  ((short int)370),((short int)11),((short int)1311),((short int)790),
  ((short int)143),((short int)232),((short int)1041),((short int)1562),
  ((short int)-114),((short int)663),((short int)1616),((short int)1078),
  ((short int)454),((short int)579),((short int)1275),((short int)1040),
  ((short int)-76),((short int)909),((short int)752),((short int)1067),
  ((short int)153),((short int)512),((short int)348),((short int)1214),
  ((short int)614),((short int)385),((short int)1843),((short int)808),
  ((short int)269),((short int)1034),((short int)203),((short int)1086),
  ((short int)652),((short int)1017),((short int)1783),((short int)1130),
  ((short int)429),((short int)1327),((short int)387),((short int)1384),
  ((short int)-49),((short int)1183),((short int)-72),((short int)1215),
  ((short int)-416),((short int)1001),((short int)544),((short int)1749),
  ((short int)-352),((short int)1223),((short int)-502),((short int)1199),
  ((short int)-589),((short int)569),((short int)-227),((short int)1630),
  ((short int)-142),((short int)1578),((short int)-230),((short int)1715),
  ((short int)-714),((short int)1288),((short int)-838),((short int)1398),
  ((short int)1131),((short int)1357),((short int)-208),((short int)1232),
  ((short int)437),((short int)965),((short int)-929),((short int)818),
  ((short int)811),((short int)1410),((short int)859),((short int)1507),
  ((short int)164),((short int)1212),((short int)1387),((short int)1793),
  ((short int)484),((short int)1874),((short int)456),((short int)2063),
  ((short int)996),((short int)1170),((short int)1326),((short int)1402),
  ((short int)1316),((short int)1360),((short int)1135),((short int)1262),
  ((short int)1234),((short int)1618),((short int)1361),((short int)1768),
  ((short int)1421),((short int)1227),((short int)1584),((short int)1347),
  ((short int)854),((short int)672),((short int)1685),((short int)1566),
  ((short int)1139),((short int)1270),((short int)2016),((short int)1825),
  ((short int)1773),((short int)1581),((short int)1532),((short int)1460),
  ((short int)1487),((short int)946),((short int)1659),((short int)1021),
  ((short int)1744),((short int)1212),((short int)1392),((short int)977),
  ((short int)1772),((short int)1161),((short int)1826),((short int)1164),
  ((short int)1718),((short int)1429),((short int)1973),((short int)1591),
  ((short int)1185),((short int)864),((short int)2132),((short int)1061),
  ((short int)1799),((short int)814),((short int)1838),((short int)757),
  ((short int)2104),((short int)1315),((short int)2054),((short int)1258),
  ((short int)2113),((short int)915),((short int)2331),((short int)930),
  ((short int)1467),((short int)1147),((short int)2590),((short int)1439),
  ((short int)2245),((short int)1744),((short int)2090),((short int)1620),
  ((short int)2358),((short int)1454),((short int)2666),((short int)1506),
  ((short int)1876),((short int)1837),((short int)2070),((short int)1975),
  ((short int)1739),((short int)1577),((short int)682),((short int)1289),
  ((short int)1584),((short int)2045),((short int)1454),((short int)2098),
  ((short int)2498),((short int)2004),((short int)2711),((short int)2066),
  ((short int)726),((short int)1588),((short int)2756),((short int)2336),
  ((short int)228),((short int)847),((short int)2456),((short int)1659),
  ((short int)36),((short int)301),((short int)1942),((short int)1957),
  ((short int)-446),((short int)-96),((short int)2154),((short int)1396),
  ((short int)1533),((short int)1101),((short int)14),((short int)608),
  ((short int)-923),((short int)-732),((short int)1383),((short int)1982),
  ((short int)1345),((short int)952),((short int)-680),((short int)321),
  ((short int)1281),((short int)1268),((short int)-1594),((short int)365),
  ((short int)941),((short int)946),((short int)-1737),((short int)-822),
  ((short int)2374),((short int)2787),((short int)1821),((short int)2788) };


static short int dico3_lsf[1024] = { 

  ((short int)-1812),((short int)-2275),((short int)-1879),((short int)-2537),
  ((short int)-1640),((short int)-1848),((short int)-1695),((short int)-2004),
  ((short int)-1220),((short int)-1912),((short int)-1221),((short int)-2106),
  ((short int)-1559),((short int)-1588),((short int)-1573),((short int)-1556),
  ((short int)-1195),((short int)-1615),((short int)-1224),((short int)-1727),
  ((short int)-1359),((short int)-1151),((short int)-1616),((short int)-1948),
  ((short int)-1274),((short int)-1391),((short int)-1305),((short int)-1403),
  ((short int)-1607),((short int)-1179),((short int)-1676),((short int)-1311),
  ((short int)-1443),((short int)-1478),((short int)-1367),((short int)-898),
  ((short int)-1256),((short int)-1059),((short int)-1331),((short int)-1134),
  ((short int)-982),((short int)-1133),((short int)-1149),((short int)-1504),
  ((short int)-1080),((short int)-1308),((short int)-1020),((short int)-1183),
  ((short int)-980),((short int)-1486),((short int)-967),((short int)-1495),
  ((short int)-988),((short int)-922),((short int)-1047),((short int)-1077),
  ((short int)-838),((short int)-1179),((short int)-858),((short int)-1222),
  ((short int)-1131),((short int)-1041),((short int)-1064),((short int)-767),
  ((short int)-872),((short int)-1157),((short int)-701),((short int)-880),
  ((short int)-706),((short int)-906),((short int)-774),((short int)-1016),
  ((short int)-578),((short int)-1080),((short int)-801),((short int)-1478),
  ((short int)-591),((short int)-1111),((short int)-592),((short int)-1146),
  ((short int)-713),((short int)-1388),((short int)-640),((short int)-1376),
  ((short int)-597),((short int)-1059),((short int)-416),((short int)-903),
  ((short int)-686),((short int)-832),((short int)-661),((short int)-708),
  ((short int)-444),((short int)-868),((short int)-490),((short int)-921),
  ((short int)-374),((short int)-776),((short int)-619),((short int)-1170),
  ((short int)-585),((short int)-549),((short int)-769),((short int)-795),
  ((short int)-435),((short int)-659),((short int)-530),((short int)-741),
  ((short int)-498),((short int)-837),((short int)-357),((short int)-597),
  ((short int)-279),((short int)-871),((short int)-243),((short int)-887),
  ((short int)-282),((short int)-665),((short int)-280),((short int)-667),
  ((short int)-165),((short int)-560),((short int)-394),((short int)-903),
  ((short int)-362),((short int)-410),((short int)-448),((short int)-583),
  ((short int)-409),((short int)-574),((short int)-313),((short int)-357),
  ((short int)-637),((short int)-548),((short int)-570),((short int)-436),
  ((short int)-896),((short int)-504),((short int)-382),((short int)-757),
  ((short int)-58),((short int)-481),((short int)-165),((short int)-618),
  ((short int)-191),((short int)-374),((short int)-234),((short int)-382),
  ((short int)-222),((short int)-683),((short int)-25),((short int)-480),
  ((short int)-418),((short int)-359),((short int)-730),((short int)-353),
  ((short int)-324),((short int)-157),((short int)-432),((short int)-322),
  ((short int)-394),((short int)-303),((short int)-284),((short int)-104),
  ((short int)-601),((short int)-289),((short int)-556),((short int)-196),
  ((short int)-588),((short int)-150),((short int)-659),((short int)-608),
  ((short int)-473),((short int)-24),((short int)-68),((short int)-448),
  ((short int)-474),((short int)-8),((short int)-506),((short int)-45),
  ((short int)-748),((short int)-184),((short int)-844),((short int)-252),
  ((short int)-901),((short int)-91),((short int)-584),((short int)-97),
  ((short int)-652),((short int)138),((short int)-764),((short int)-131),
  ((short int)-678),((short int)-12),((short int)-670),((short int)165),
  ((short int)-259),((short int)-3),((short int)-840),((short int)-107),
  ((short int)-909),((short int)37),((short int)-992),((short int)44),
  ((short int)-854),((short int)-415),((short int)-839),((short int)13),
  ((short int)-1001),((short int)-271),((short int)-1026),((short int)-309),
  ((short int)-798),((short int)-478),((short int)-832),((short int)-488),
  ((short int)-943),((short int)168),((short int)-1112),((short int)-387),
  ((short int)-1185),((short int)-101),((short int)-1183),((short int)-40),
  ((short int)-941),((short int)-316),((short int)-1030),((short int)-770),
  ((short int)-1044),((short int)-625),((short int)-1081),((short int)-538),
  ((short int)-1224),((short int)-299),((short int)-1312),((short int)-436),
  ((short int)-1197),((short int)-663),((short int)-1167),((short int)-161),
  ((short int)-1216),((short int)-690),((short int)-1237),((short int)-831),
  ((short int)-1432),((short int)-720),((short int)-1403),((short int)-493),
  ((short int)-898),((short int)-740),((short int)-922),((short int)-801),
  ((short int)-1102),((short int)-402),((short int)-1579),((short int)-964),
  ((short int)-1061),((short int)-638),((short int)-1269),((short int)-1438),
  ((short int)-1499),((short int)-934),((short int)-1502),((short int)-895),
  ((short int)-1598),((short int)-564),((short int)-1723),((short int)-717),
  ((short int)-606),((short int)-597),((short int)-1166),((short int)-1085),
  ((short int)-1369),((short int)-468),((short int)-1946),((short int)-1493),
  ((short int)-1838),((short int)-953),((short int)-1932),((short int)-931),
  ((short int)-1499),((short int)-188),((short int)-1635),((short int)-421),
  ((short int)-1457),((short int)-338),((short int)-1448),((short int)-22),
  ((short int)-1942),((short int)-422),((short int)-2006),((short int)-249),
  ((short int)-496),((short int)-114),((short int)-1910),((short int)-755),
  ((short int)-1289),((short int)174),((short int)-1451),((short int)-109),
  ((short int)-482),((short int)-257),((short int)-1221),((short int)-508),
  ((short int)-1617),((short int)151),((short int)-1694),((short int)208),
  ((short int)-654),((short int)107),((short int)-1651),((short int)29),
  ((short int)-1141),((short int)279),((short int)-1215),((short int)306),
  ((short int)-1228),((short int)-506),((short int)-730),((short int)-175),
  ((short int)-1236),((short int)-101),((short int)-969),((short int)551),
  ((short int)-870),((short int)278),((short int)-823),((short int)315),
  ((short int)-563),((short int)376),((short int)-1051),((short int)228),
  ((short int)-507),((short int)280),((short int)-599),((short int)281),
  ((short int)-758),((short int)253),((short int)-305),((short int)379),
  ((short int)-755),((short int)-134),((short int)-611),((short int)660),
  ((short int)-824),((short int)536),((short int)-817),((short int)646),
  ((short int)-413),((short int)49),((short int)-341),((short int)177),
  ((short int)-453),((short int)526),((short int)-482),((short int)589),
  ((short int)-71),((short int)339),((short int)-657),((short int)264),
  ((short int)-244),((short int)295),((short int)-237),((short int)315),
  ((short int)-387),((short int)569),((short int)-506),((short int)-9),
  ((short int)-377),((short int)14),((short int)-160),((short int)661),
  ((short int)-216),((short int)40),((short int)-308),((short int)-46),
  ((short int)95),((short int)214),((short int)-242),((short int)167),
  ((short int)-86),((short int)192),((short int)-56),((short int)27),
  ((short int)-76),((short int)31),((short int)36),((short int)309),
  ((short int)-106),((short int)-182),((short int)-113),((short int)74),
  ((short int)-441),((short int)-22),((short int)23),((short int)139),
  ((short int)81),((short int)-11),((short int)44),((short int)15),
  ((short int)-87),((short int)-137),((short int)-118),((short int)-207),
  ((short int)-158),((short int)-58),((short int)272),((short int)-92),
  ((short int)-156),((short int)-441),((short int)8),((short int)-136),
  ((short int)128),((short int)-221),((short int)101),((short int)-218),
  ((short int)40),((short int)-197),((short int)-76),((short int)-456),
  ((short int)9),((short int)-445),((short int)33),((short int)-423),
  ((short int)226),((short int)60),((short int)73),((short int)-222),
  ((short int)156),((short int)-399),((short int)280),((short int)-318),
  ((short int)245),((short int)-341),((short int)166),((short int)-499),
  ((short int)339),((short int)-190),((short int)327),((short int)-219),
  ((short int)325),((short int)-137),((short int)-89),((short int)-596),
  ((short int)100),((short int)-627),((short int)144),((short int)-677),
  ((short int)487),((short int)28),((short int)252),((short int)-391),
  ((short int)214),((short int)-41),((short int)282),((short int)-28),
  ((short int)99),((short int)-286),((short int)331),((short int)49),
  ((short int)459),((short int)-388),((short int)565),((short int)-369),
  ((short int)436),((short int)28),((short int)336),((short int)-9),
  ((short int)397),((short int)-167),((short int)618),((short int)34),
  ((short int)596),((short int)-17),((short int)561),((short int)-140),
  ((short int)299),((short int)79),((short int)522),((short int)125),
  ((short int)203),((short int)2),((short int)244),((short int)288),
  ((short int)255),((short int)211),((short int)175),((short int)82),
  ((short int)596),((short int)187),((short int)517),((short int)108),
  ((short int)381),((short int)255),((short int)365),((short int)297),
  ((short int)497),((short int)352),((short int)327),((short int)-82),
  ((short int)25),((short int)210),((short int)371),((short int)245),
  ((short int)261),((short int)3),((short int)545),((short int)449),
  ((short int)140),((short int)294),((short int)44),((short int)295),
  ((short int)212),((short int)347),((short int)244),((short int)494),
  ((short int)331),((short int)528),((short int)201),((short int)307),
  ((short int)349),((short int)411),((short int)613),((short int)284),
  ((short int)614),((short int)413),((short int)464),((short int)322),
  ((short int)624),((short int)397),((short int)97),((short int)200),
  ((short int)-160),((short int)384),((short int)149),((short int)362),
  ((short int)495),((short int)525),((short int)269),((short int)585),
  ((short int)33),((short int)491),((short int)-121),((short int)433),
  ((short int)427),((short int)611),((short int)498),((short int)516),
  ((short int)171),((short int)443),((short int)497),((short int)666),
  ((short int)440),((short int)275),((short int)566),((short int)575),
  ((short int)146),((short int)639),((short int)155),((short int)670),
  ((short int)-33),((short int)173),((short int)212),((short int)696),
  ((short int)-166),((short int)601),((short int)-191),((short int)695),
  ((short int)-489),((short int)503),((short int)175),((short int)742),
  ((short int)214),((short int)476),((short int)372),((short int)1083),
  ((short int)578),((short int)530),((short int)586),((short int)777),
  ((short int)425),((short int)874),((short int)315),((short int)841),
  ((short int)374),((short int)848),((short int)-165),((short int)565),
  ((short int)35),((short int)991),((short int)-39),((short int)1062),
  ((short int)329),((short int)712),((short int)786),((short int)840),
  ((short int)645),((short int)795),((short int)661),((short int)676),
  ((short int)571),((short int)918),((short int)632),((short int)1079),
  ((short int)673),((short int)817),((short int)318),((short int)388),
  ((short int)874),((short int)1012),((short int)564),((short int)848),
  ((short int)880),((short int)620),((short int)557),((short int)479),
  ((short int)671),((short int)453),((short int)692),((short int)468),
  ((short int)840),((short int)642),((short int)844),((short int)645),
  ((short int)506),((short int)428),((short int)897),((short int)567),
  ((short int)837),((short int)387),((short int)962),((short int)499),
  ((short int)691),((short int)561),((short int)939),((short int)926),
  ((short int)783),((short int)296),((short int)790),((short int)268),
  ((short int)1028),((short int)530),((short int)874),((short int)329),
  ((short int)548),((short int)143),((short int)675),((short int)291),
  ((short int)503),((short int)66),((short int)1041),((short int)359),
  ((short int)786),((short int)97),((short int)805),((short int)33),
  ((short int)837),((short int)470),((short int)511),((short int)49),
  ((short int)1092),((short int)327),((short int)1174),((short int)323),
  ((short int)3),((short int)242),((short int)872),((short int)474),
  ((short int)689),((short int)429),((short int)1329),((short int)678),
  ((short int)1042),((short int)620),((short int)1109),((short int)664),
  ((short int)321),((short int)193),((short int)889),((short int)950),
  ((short int)1153),((short int)874),((short int)893),((short int)635),
  ((short int)877),((short int)862),((short int)948),((short int)913),
  ((short int)1293),((short int)665),((short int)1320),((short int)639),
  ((short int)997),((short int)793),((short int)1402),((short int)1030),
  ((short int)1176),((short int)1012),((short int)1110),((short int)959),
  ((short int)1410),((short int)925),((short int)1403),((short int)915),
  ((short int)543),((short int)862),((short int)1116),((short int)1222),
  ((short int)835),((short int)1190),((short int)835),((short int)1190),
  ((short int)959),((short int)1148),((short int)1147),((short int)1376),
  ((short int)1300),((short int)1193),((short int)1415),((short int)1231),
  ((short int)1335),((short int)1341),((short int)746),((short int)1092),
  ((short int)1711),((short int)1283),((short int)1389),((short int)1073),
  ((short int)1334),((short int)1566),((short int)1153),((short int)1475),
  ((short int)1645),((short int)1137),((short int)1825),((short int)1220),
  ((short int)1056),((short int)1382),((short int)1521),((short int)1730),
  ((short int)1632),((short int)1545),((short int)1620),((short int)1542),
  ((short int)855),((short int)1596),((short int)865),((short int)1667),
  ((short int)693),((short int)885),((short int)1716),((short int)1519),
  ((short int)1167),((short int)1296),((short int)2209),((short int)1760),
  ((short int)1952),((short int)1493),((short int)2020),((short int)1482),
  ((short int)1534),((short int)1866),((short int)1694),((short int)2008),
  ((short int)1566),((short int)748),((short int)1761),((short int)825),
  ((short int)294),((short int)1392),((short int)1084),((short int)2058),
  ((short int)621),((short int)1315),((short int)365),((short int)1287),
  ((short int)198),((short int)1028),((short int)488),((short int)1408),
  ((short int)249),((short int)403),((short int)1014),((short int)1561),
  ((short int)324),((short int)363),((short int)1645),((short int)1044),
  ((short int)193),((short int)367),((short int)2034),((short int)1859),
  ((short int)-251),((short int)579),((short int)750),((short int)994),
  ((short int)-243),((short int)30),((short int)1325),((short int)879),
  ((short int)-28),((short int)-169),((short int)624),((short int)917),
  ((short int)-453),((short int)159),((short int)186),((short int)1370),
  ((short int)-614),((short int)6),((short int)537),((short int)392),
  ((short int)-94),((short int)-291),((short int)781),((short int)229),
  ((short int)-128),((short int)-298),((short int)245),((short int)491),
  ((short int)-701),((short int)-648),((short int)972),((short int)789),
  ((short int)-501),((short int)-640),((short int)178),((short int)255),
  ((short int)-365),((short int)-390),((short int)-255),((short int)317),
  ((short int)-958),((short int)-294),((short int)-191),((short int)228),
  ((short int)-775),((short int)-447),((short int)157),((short int)-237),
  ((short int)-657),((short int)-720),((short int)-407),((short int)92),
  ((short int)-117),((short int)-611),((short int)334),((short int)-230),
  ((short int)-679),((short int)-1084),((short int)-144),((short int)-317),
  ((short int)-901),((short int)-861),((short int)-738),((short int)-360),
  ((short int)-85),((short int)-727),((short int)-90),((short int)-787),
  ((short int)100),((short int)-22),((short int)-391),((short int)-263),
  ((short int)-56),((short int)-73),((short int)-337),((short int)-754),
  ((short int)5),((short int)-189),((short int)-706),((short int)-624),
  ((short int)89),((short int)-344),((short int)-135),((short int)-1113),
  ((short int)-353),((short int)-237),((short int)-684),((short int)-1135),
  ((short int)-275),((short int)-1102),((short int)-269),((short int)-1203),
  ((short int)152),((short int)145),((short int)-722),((short int)-1232),
  ((short int)49),((short int)80),((short int)-1248),((short int)-776),
  ((short int)-248),((short int)391),((short int)-732),((short int)-547),
  ((short int)469),((short int)218),((short int)-255),((short int)-864),
  ((short int)69),((short int)366),((short int)-166),((short int)-485),
  ((short int)-688),((short int)191),((short int)-1212),((short int)-1196),
  ((short int)-170),((short int)-169),((short int)-1308),((short int)-1631),
  ((short int)321),((short int)470),((short int)-1419),((short int)-1243),
  ((short int)-64),((short int)272),((short int)-1361),((short int)-248),
  ((short int)492),((short int)565),((short int)-721),((short int)-609),
  ((short int)195),((short int)485),((short int)-573),((short int)-133),
  ((short int)427),((short int)202),((short int)-171),((short int)-118),
  ((short int)199),((short int)575),((short int)2),((short int)-31),
  ((short int)694),((short int)755),((short int)-1366),((short int)-39),
  ((short int)552),((short int)557),((short int)-489),((short int)271),
  ((short int)680),((short int)537),((short int)13),((short int)-453),
  ((short int)855),((short int)954),((short int)-133),((short int)-52),
  ((short int)-81),((short int)738),((short int)-1169),((short int)637),
  ((short int)1055),((short int)1059),((short int)-95),((short int)676),
  ((short int)1259),((short int)1081),((short int)489),((short int)305),
  ((short int)-449),((short int)954),((short int)-534),((short int)996),
  ((short int)-969),((short int)866),((short int)-1058),((short int)1059),
  ((short int)-1294),((short int)618),((short int)-1416),((short int)617),
  ((short int)-458),((short int)1366),((short int)-159),((short int)1821),
  ((short int)-774),((short int)-528),((short int)-14),((short int)1110),
  ((short int)-1202),((short int)-901),((short int)-772),((short int)433),
  ((short int)-1256),((short int)-1255),((short int)-1011),((short int)-302),
  ((short int)-602),((short int)-585),((short int)-759),((short int)-1618),
  ((short int)-760),((short int)-1549),((short int)-840),((short int)-1921),
  ((short int)-816),((short int)-539),((short int)-1769),((short int)-2235),
  ((short int)-227),((short int)-36),((short int)-2034),((short int)-1831),
  ((short int)-2107),((short int)-1126),((short int)-2471),((short int)-1816),
  ((short int)-1470),((short int)252),((short int)-2701),((short int)-415),
  ((short int)-571),((short int)-467),((short int)1509),((short int)1554),
  ((short int)2180),((short int)1975),((short int)2326),((short int)2020) };


static short int dico4_lsf[1024] = { 

  ((short int)-1857),((short int)-1681),((short int)-1857),((short int)-1755),
  ((short int)-2056),((short int)-1150),((short int)-2134),((short int)-1654),
  ((short int)-1619),((short int)-1099),((short int)-1704),((short int)-1131),
  ((short int)-1345),((short int)-1608),((short int)-1359),((short int)-1638),
  ((short int)-1338),((short int)-1293),((short int)-1325),((short int)-1265),
  ((short int)-1664),((short int)-1649),((short int)-1487),((short int)-851),
  ((short int)-1346),((short int)-1832),((short int)-1413),((short int)-2188),
  ((short int)-1282),((short int)-681),((short int)-1785),((short int)-1649),
  ((short int)-966),((short int)-1082),((short int)-1183),((short int)-1676),
  ((short int)-1054),((short int)-1073),((short int)-1142),((short int)-1158),
  ((short int)-1207),((short int)-744),((short int)-1274),((short int)-997),
  ((short int)-934),((short int)-1383),((short int)-927),((short int)-1416),
  ((short int)-1010),((short int)-1305),((short int)-783),((short int)-955),
  ((short int)-1049),((short int)-900),((short int)-993),((short int)-817),
  ((short int)-737),((short int)-823),((short int)-972),((short int)-1189),
  ((short int)-738),((short int)-1094),((short int)-738),((short int)-1154),
  ((short int)-784),((short int)-801),((short int)-810),((short int)-786),
  ((short int)-892),((short int)-520),((short int)-1000),((short int)-818),
  ((short int)-644),((short int)-965),((short int)-577),((short int)-882),
  ((short int)-541),((short int)-694),((short int)-671),((short int)-917),
  ((short int)-595),((short int)-642),((short int)-646),((short int)-615),
  ((short int)-956),((short int)-621),((short int)-925),((short int)-515),
  ((short int)-727),((short int)-483),((short int)-815),((short int)-485),
  ((short int)-840),((short int)-578),((short int)-440),((short int)-713),
  ((short int)-578),((short int)-325),((short int)-657),((short int)-670),
  ((short int)-386),((short int)-570),((short int)-441),((short int)-666),
  ((short int)-514),((short int)-787),((short int)-392),((short int)-529),
  ((short int)-522),((short int)-453),((short int)-487),((short int)-423),
  ((short int)-616),((short int)-585),((short int)-617),((short int)-157),
  ((short int)-662),((short int)-268),((short int)-680),((short int)-348),
  ((short int)-322),((short int)-323),((short int)-632),((short int)-444),
  ((short int)-304),((short int)-430),((short int)-332),((short int)-458),
  ((short int)-277),((short int)-468),((short int)-659),((short int)-793),
  ((short int)-319),((short int)-636),((short int)-227),((short int)-554),
  ((short int)-373),((short int)-347),((short int)-334),((short int)-210),
  ((short int)-456),((short int)-192),((short int)-530),((short int)-242),
  ((short int)-216),((short int)-198),((short int)-366),((short int)-370),
  ((short int)-338),((short int)-161),((short int)-409),((short int)-748),
  ((short int)-107),((short int)-380),((short int)-294),((short int)-643),
  ((short int)-223),((short int)-665),((short int)-234),((short int)-741),
  ((short int)-141),((short int)-496),((short int)-130),((short int)-510),
  ((short int)-139),((short int)-327),((short int)-172),((short int)-305),
  ((short int)-306),((short int)-580),((short int)-164),((short int)-263),
  ((short int)-262),((short int)-172),((short int)-67),((short int)-402),
  ((short int)31),((short int)-366),((short int)-10),((short int)-436),
  ((short int)-86),((short int)-527),((short int)71),((short int)-377),
  ((short int)-22),((short int)-609),((short int)-12),((short int)-678),
  ((short int)-67),((short int)-319),((short int)63),((short int)-191),
  ((short int)35),((short int)-181),((short int)-39),((short int)-242),
  ((short int)126),((short int)-167),((short int)-140),((short int)-544),
  ((short int)155),((short int)-297),((short int)174),((short int)-297),
  ((short int)38),((short int)-8),((short int)117),((short int)-380),
  ((short int)197),((short int)-452),((short int)240),((short int)-522),
  ((short int)223),((short int)-103),((short int)110),((short int)-187),
  ((short int)87),((short int)-155),((short int)169),((short int)-47),
  ((short int)157),((short int)26),((short int)-83),((short int)-100),
  ((short int)128),((short int)80),((short int)209),((short int)-62),
  ((short int)6),((short int)7),((short int)22),((short int)5),
  ((short int)318),((short int)-20),((short int)248),((short int)-45),
  ((short int)-200),((short int)-63),((short int)156),((short int)-69),
  ((short int)250),((short int)-183),((short int)369),((short int)-126),
  ((short int)-113),((short int)-76),((short int)-142),((short int)-122),
  ((short int)-64),((short int)-254),((short int)-31),((short int)35),
  ((short int)-177),((short int)-71),((short int)-7),((short int)171),
  ((short int)93),((short int)27),((short int)108),((short int)212),
  ((short int)-330),((short int)-209),((short int)-123),((short int)-70),
  ((short int)-279),((short int)95),((short int)-96),((short int)20),
  ((short int)-188),((short int)-61),((short int)-314),((short int)87),
  ((short int)-300),((short int)-78),((short int)-354),((short int)-134),
  ((short int)11),((short int)122),((short int)-140),((short int)122),
  ((short int)-275),((short int)152),((short int)-293),((short int)140),
  ((short int)-82),((short int)138),((short int)-321),((short int)-111),
  ((short int)-480),((short int)-156),((short int)-359),((short int)76),
  ((short int)-254),((short int)-40),((short int)-635),((short int)-96),
  ((short int)-522),((short int)79),((short int)-507),((short int)8),
  ((short int)-268),((short int)303),((short int)-539),((short int)68),
  ((short int)-446),((short int)61),((short int)-522),((short int)306),
  ((short int)111),((short int)189),((short int)-435),((short int)122),
  ((short int)-379),((short int)166),((short int)-571),((short int)-398),
  ((short int)-632),((short int)-74),((short int)-747),((short int)-95),
  ((short int)-455),((short int)194),((short int)-952),((short int)83),
  ((short int)-798),((short int)192),((short int)-755),((short int)192),
  ((short int)-781),((short int)-162),((short int)-619),((short int)234),
  ((short int)-663),((short int)-297),((short int)-488),((short int)-109),
  ((short int)-964),((short int)-132),((short int)-838),((short int)-68),
  ((short int)-843),((short int)58),((short int)-1112),((short int)-86),
  ((short int)-805),((short int)-299),((short int)-944),((short int)-253),
  ((short int)-778),((short int)-50),((short int)-965),((short int)-549),
  ((short int)-352),((short int)-98),((short int)-992),((short int)-343),
  ((short int)-1117),((short int)-315),((short int)-1117),((short int)-307),
  ((short int)-1155),((short int)-374),((short int)-637),((short int)-230),
  ((short int)-1166),((short int)-43),((short int)-1299),((short int)-100),
  ((short int)-925),((short int)-393),((short int)-1274),((short int)-600),
  ((short int)-689),((short int)-130),((short int)-1479),((short int)-312),
  ((short int)-1321),((short int)-254),((short int)-1464),((short int)-442),
  ((short int)-1292),((short int)-613),((short int)-1261),((short int)-503),
  ((short int)-1501),((short int)-368),((short int)-1322),((short int)26),
  ((short int)-1432),((short int)-66),((short int)-1743),((short int)-161),
  ((short int)-1644),((short int)-467),((short int)-1760),((short int)-548),
  ((short int)-1393),((short int)-568),((short int)-1556),((short int)-871),
  ((short int)-1495),((short int)-1034),((short int)-1387),((short int)-571),
  ((short int)-1917),((short int)-528),((short int)-1783),((short int)-123),
  ((short int)-1897),((short int)-231),((short int)-2054),((short int)-323),
  ((short int)-2052),((short int)-906),((short int)-1976),((short int)-567),
  ((short int)-1917),((short int)-620),((short int)-2047),((short int)-989),
  ((short int)-1077),((short int)-370),((short int)-2031),((short int)-704),
  ((short int)-2355),((short int)-749),((short int)-2740),((short int)-1089),
  ((short int)-1909),((short int)159),((short int)-2012),((short int)248),
  ((short int)-626),((short int)-123),((short int)-2339),((short int)-962),
  ((short int)-669),((short int)-408),((short int)-1379),((short int)-1174),
  ((short int)-452),((short int)-364),((short int)-1044),((short int)-735),
  ((short int)-132),((short int)183),((short int)-1620),((short int)-752),
  ((short int)-547),((short int)-307),((short int)-777),((short int)-1261),
  ((short int)-98),((short int)41),((short int)-880),((short int)-1091),
  ((short int)-257),((short int)97),((short int)-1602),((short int)-1833),
  ((short int)31),((short int)-26),((short int)-644),((short int)-561),
  ((short int)-180),((short int)-546),((short int)-385),((short int)-1095),
  ((short int)-410),((short int)-802),((short int)-414),((short int)-827),
  ((short int)-457),((short int)-970),((short int)-490),((short int)-1109),
  ((short int)-215),((short int)-916),((short int)-144),((short int)-937),
  ((short int)-493),((short int)-1269),((short int)-517),((short int)-1507),
  ((short int)181),((short int)101),((short int)-332),((short int)-889),
  ((short int)-836),((short int)-937),((short int)-559),((short int)-429),
  ((short int)-629),((short int)-547),((short int)-183),((short int)-337),
  ((short int)-545),((short int)-82),((short int)-250),((short int)-286),
  ((short int)5),((short int)-132),((short int)-348),((short int)-252),
  ((short int)-293),((short int)-472),((short int)-158),((short int)100),
  ((short int)-29),((short int)197),((short int)-236),((short int)-424),
  ((short int)-861),((short int)-213),((short int)-140),((short int)-7),
  ((short int)-427),((short int)-443),((short int)187),((short int)-97),
  ((short int)-684),((short int)-736),((short int)-293),((short int)258),
  ((short int)-368),((short int)-152),((short int)-150),((short int)392),
  ((short int)-609),((short int)175),((short int)-142),((short int)299),
  ((short int)-138),((short int)152),((short int)-119),((short int)329),
  ((short int)-486),((short int)-52),((short int)293),((short int)198),
  ((short int)-183),((short int)117),((short int)175),((short int)331),
  ((short int)-58),((short int)-274),((short int)231),((short int)300),
  ((short int)-288),((short int)330),((short int)-305),((short int)372),
  ((short int)-111),((short int)409),((short int)-9),((short int)423),
  ((short int)83),((short int)256),((short int)67),((short int)367),
  ((short int)-19),((short int)248),((short int)91),((short int)113),
  ((short int)-35),((short int)406),((short int)-191),((short int)154),
  ((short int)238),((short int)296),((short int)5),((short int)197),
  ((short int)141),((short int)221),((short int)313),((short int)198),
  ((short int)211),((short int)421),((short int)244),((short int)334),
  ((short int)88),((short int)426),((short int)-243),((short int)454),
  ((short int)202),((short int)552),((short int)-5),((short int)403),
  ((short int)291),((short int)185),((short int)219),((short int)301),
  ((short int)251),((short int)138),((short int)128),((short int)69),
  ((short int)197),((short int)288),((short int)-140),((short int)-61),
  ((short int)188),((short int)361),((short int)197),((short int)598),
  ((short int)442),((short int)273),((short int)290),((short int)143),
  ((short int)472),((short int)482),((short int)157),((short int)370),
  ((short int)415),((short int)321),((short int)372),((short int)385),
  ((short int)402),((short int)552),((short int)155),((short int)24),
  ((short int)550),((short int)263),((short int)-11),((short int)21),
  ((short int)360),((short int)227),((short int)147),((short int)-254),
  ((short int)424),((short int)97),((short int)366),((short int)-13),
  ((short int)375),((short int)141),((short int)449),((short int)232),
  ((short int)396),((short int)507),((short int)474),((short int)272),
  ((short int)701),((short int)324),((short int)362),((short int)-47),
  ((short int)587),((short int)148),((short int)543),((short int)69),
  ((short int)400),((short int)-51),((short int)561),((short int)59),
  ((short int)220),((short int)-10),((short int)352),((short int)147),
  ((short int)206),((short int)211),((short int)653),((short int)185),
  ((short int)563),((short int)297),((short int)565),((short int)284),
  ((short int)594),((short int)121),((short int)766),((short int)192),
  ((short int)398),((short int)118),((short int)642),((short int)434),
  ((short int)233),((short int)264),((short int)481),((short int)467),
  ((short int)129),((short int)-165),((short int)699),((short int)239),
  ((short int)90),((short int)26),((short int)342),((short int)474),
  ((short int)-55),((short int)27),((short int)388),((short int)94),
  ((short int)-172),((short int)0),((short int)725),((short int)379),
  ((short int)-60),((short int)337),((short int)370),((short int)465),
  ((short int)95),((short int)319),((short int)806),((short int)595),
  ((short int)78),((short int)260),((short int)497),((short int)851),
  ((short int)210),((short int)560),((short int)458),((short int)574),
  ((short int)-464),((short int)202),((short int)497),((short int)625),
  ((short int)-202),((short int)152),((short int)48),((short int)712),
  ((short int)-20),((short int)566),((short int)100),((short int)715),
  ((short int)455),((short int)468),((short int)411),((short int)605),
  ((short int)319),((short int)646),((short int)195),((short int)615),
  ((short int)401),((short int)538),((short int)680),((short int)739),
  ((short int)201),((short int)667),((short int)434),((short int)954),
  ((short int)454),((short int)425),((short int)646),((short int)491),
  ((short int)606),((short int)681),((short int)416),((short int)508),
  ((short int)497),((short int)822),((short int)426),((short int)815),
  ((short int)660),((short int)647),((short int)628),((short int)716),
  ((short int)697),((short int)466),((short int)618),((short int)457),
  ((short int)685),((short int)460),((short int)365),((short int)309),
  ((short int)721),((short int)567),((short int)836),((short int)601),
  ((short int)609),((short int)300),((short int)825),((short int)459),
  ((short int)943),((short int)687),((short int)681),((short int)533),
  ((short int)915),((short int)598),((short int)591),((short int)243),
  ((short int)876),((short int)451),((short int)874),((short int)420),
  ((short int)786),((short int)317),((short int)732),((short int)220),
  ((short int)922),((short int)317),((short int)1108),((short int)367),
  ((short int)531),((short int)466),((short int)1028),((short int)649),
  ((short int)1053),((short int)615),((short int)1034),((short int)553),
  ((short int)829),((short int)602),((short int)1021),((short int)799),
  ((short int)927),((short int)803),((short int)878),((short int)763),
  ((short int)799),((short int)496),((short int)1373),((short int)773),
  ((short int)585),((short int)770),((short int)803),((short int)930),
  ((short int)1099),((short int)793),((short int)1222),((short int)862),
  ((short int)1209),((short int)895),((short int)1025),((short int)727),
  ((short int)772),((short int)845),((short int)1172),((short int)1115),
  ((short int)867),((short int)1021),((short int)830),((short int)1013),
  ((short int)841),((short int)910),((short int)506),((short int)703),
  ((short int)1239),((short int)1077),((short int)620),((short int)819),
  ((short int)1196),((short int)1083),((short int)1155),((short int)1081),
  ((short int)1142),((short int)907),((short int)1547),((short int)1121),
  ((short int)1309),((short int)648),((short int)1343),((short int)612),
  ((short int)1484),((short int)988),((short int)1479),((short int)937),
  ((short int)985),((short int)1328),((short int)955),((short int)1341),
  ((short int)429),((short int)910),((short int)841),((short int)1338),
  ((short int)564),((short int)1179),((short int)412),((short int)1156),
  ((short int)1427),((short int)1320),((short int)1434),((short int)1330),
  ((short int)640),((short int)760),((short int)1726),((short int)1410),
  ((short int)190),((short int)555),((short int)1073),((short int)1005),
  ((short int)426),((short int)257),((short int)839),((short int)980),
  ((short int)235),((short int)231),((short int)1520),((short int)1167),
  ((short int)109),((short int)293),((short int)1014),((short int)1569),
  ((short int)305),((short int)142),((short int)1148),((short int)539),
  ((short int)-291),((short int)-108),((short int)1213),((short int)972),
  ((short int)22),((short int)-216),((short int)667),((short int)828),
  ((short int)-482),((short int)438),((short int)453),((short int)1431),
  ((short int)-581),((short int)-422),((short int)789),((short int)387),
  ((short int)-358),((short int)-454),((short int)174),((short int)780),
  ((short int)-36),((short int)-372),((short int)390),((short int)-134),
  ((short int)-629),((short int)160),((short int)-306),((short int)751),
  ((short int)-1258),((short int)-331),((short int)177),((short int)522),
  ((short int)-248),((short int)574),((short int)-251),((short int)639),
  ((short int)-531),((short int)407),((short int)-596),((short int)394),
  ((short int)-419),((short int)789),((short int)-617),((short int)801),
  ((short int)-986),((short int)399),((short int)-857),((short int)727),
  ((short int)-7),((short int)518),((short int)-703),((short int)310),
  ((short int)-1143),((short int)-24),((short int)-1002),((short int)287),
  ((short int)-960),((short int)363),((short int)-1299),((short int)312),
  ((short int)-1534),((short int)245),((short int)-1557),((short int)305),
  ((short int)28),((short int)153),((short int)-859),((short int)-175),
  ((short int)-33),((short int)332),((short int)-1398),((short int)-154),
  ((short int)212),((short int)410),((short int)-593),((short int)-197),
  ((short int)-1092),((short int)-704),((short int)-904),((short int)-65),
  ((short int)282),((short int)367),((short int)-918),((short int)-686),
  ((short int)345),((short int)93),((short int)-258),((short int)-357),
  ((short int)696),((short int)644),((short int)-693),((short int)-28),
  ((short int)448),((short int)493),((short int)-273),((short int)193),
  ((short int)527),((short int)546),((short int)-243),((short int)-513),
  ((short int)384),((short int)-136),((short int)273),((short int)-353),
  ((short int)512),((short int)-142),((short int)537),((short int)-198),
  ((short int)941),((short int)750),((short int)83),((short int)248),
  ((short int)578),((short int)861),((short int)-56),((short int)592),
  ((short int)842),((short int)44),((short int)892),((short int)24),
  ((short int)33),((short int)890),((short int)-16),((short int)982),
  ((short int)831),((short int)1398),((short int)1535),((short int)1898),
  ((short int)1716),((short int)1376),((short int)1948),((short int)1465) };


static short int dico5_lsf[256] = { 

  ((short int)-1002),((short int)-929),((short int)-1096),((short int)-1203),
  ((short int)-641),((short int)-931),((short int)-604),((short int)-961),
  ((short int)-779),((short int)-673),((short int)-835),((short int)-788),
  ((short int)-416),((short int)-664),((short int)-458),((short int)-766),
  ((short int)-652),((short int)-521),((short int)-662),((short int)-495),
  ((short int)-1023),((short int)-509),((short int)-1023),((short int)-428),
  ((short int)-444),((short int)-552),((short int)-368),((short int)-449),
  ((short int)-479),((short int)-211),((short int)-1054),((short int)-903),
  ((short int)-316),((short int)-249),((short int)-569),((short int)-591),
  ((short int)-569),((short int)-275),((short int)-541),((short int)-191),
  ((short int)-716),((short int)-188),((short int)-842),((short int)-264),
  ((short int)-333),((short int)-248),((short int)-318),((short int)-228),
  ((short int)-275),((short int)1),((short int)-567),((short int)-228),
  ((short int)-115),((short int)-221),((short int)-238),((short int)-374),
  ((short int)-197),((short int)-507),((short int)-222),((short int)-579),
  ((short int)-258),((short int)-432),((short int)-61),((short int)-244),
  ((short int)-345),((short int)2),((short int)-338),((short int)39),
  ((short int)-215),((short int)-169),((short int)-58),((short int)0),
  ((short int)-56),((short int)-6),((short int)-203),((short int)-131),
  ((short int)1),((short int)-186),((short int)-5),((short int)-211),
  ((short int)6),((short int)-380),((short int)11),((short int)-418),
  ((short int)-116),((short int)131),((short int)-134),((short int)113),
  ((short int)89),((short int)-4),((short int)71),((short int)-2),
  ((short int)-19),((short int)-192),((short int)262),((short int)24),
  ((short int)189),((short int)151),((short int)-133),((short int)-109),
  ((short int)186),((short int)-153),((short int)166),((short int)-219),
  ((short int)37),((short int)139),((short int)193),((short int)171),
  ((short int)337),((short int)124),((short int)158),((short int)-61),
  ((short int)141),((short int)226),((short int)-13),((short int)190),
  ((short int)231),((short int)34),((short int)354),((short int)109),
  ((short int)316),((short int)201),((short int)244),((short int)164),
  ((short int)330),((short int)-85),((short int)390),((short int)-84),
  ((short int)254),((short int)327),((short int)257),((short int)335),
  ((short int)491),((short int)147),((short int)476),((short int)105),
  ((short int)54),((short int)77),((short int)437),((short int)370),
  ((short int)421),((short int)314),((short int)449),((short int)342),
  ((short int)329),((short int)126),((short int)673),((short int)292),
  ((short int)571),((short int)388),((short int)243),((short int)193),
  ((short int)653),((short int)320),((short int)621),((short int)280),
  ((short int)194),((short int)380),((short int)517),((short int)581),
  ((short int)45),((short int)323),((short int)111),((short int)422),
  ((short int)489),((short int)395),((short int)734),((short int)534),
  ((short int)622),((short int)546),((short int)486),((short int)502),
  ((short int)318),((short int)572),((short int)189),((short int)550),
  ((short int)385),((short int)422),((short int)-157),((short int)153),
  ((short int)-125),((short int)382),((short int)-197),((short int)386),
  ((short int)-263),((short int)334),((short int)228),((short int)697),
  ((short int)-188),((short int)1),((short int)51),((short int)297),
  ((short int)-507),((short int)213),((short int)-376),((short int)397),
  ((short int)-24),((short int)255),((short int)-547),((short int)89),
  ((short int)-502),((short int)-94),((short int)387),((short int)179),
  ((short int)-620),((short int)68),((short int)-684),((short int)112),
  ((short int)-642),((short int)-350),((short int)-260),((short int)172),
  ((short int)-438),((short int)-324),((short int)264),((short int)648),
  ((short int)-964),((short int)-4),((short int)-1121),((short int)7),
  ((short int)-134),((short int)134),((short int)-1133),((short int)-306),
  ((short int)143),((short int)96),((short int)-420),((short int)-497),
  ((short int)-1221),((short int)-350),((short int)-1527),((short int)-685),
  ((short int)-161),((short int)72),((short int)873),((short int)691),
  ((short int)732),((short int)283),((short int)921),((short int)353),
  ((short int)334),((short int)475),((short int)1095),((short int)821),
  ((short int)864),((short int)524),((short int)843),((short int)497),
  ((short int)714),((short int)711),((short int)788),((short int)750),
  ((short int)1076),((short int)714),((short int)1204),((short int)753) };

// channel class definitions /////////////////////////////////////////

#line 1152 "vocoderPam.cc"
OSNone::OSNone()
    : _specc::channel()
{   
}

OSNone::~OSNone(void)
{   
}

#line 23 "OSNone.sc"
void OSNone::ienter(void) {
}

#line 30 "OSNone.sc"
void OSNone::init(void) {
}

#line 26 "OSNone.sc"
void OSNone::ireturn(void) {
    _specc::notify(event(&intr), ((void*)0));
}

#line 38 "OSNone.sc"
void OSNone::par_end(int p) {
}

#line 36 "OSNone.sc"
int OSNone::par_start(void) { return  -1;
}

#line 56 "OSNone.sc"
void OSNone::post_wait(int me) {
}

#line 55 "OSNone.sc"
int OSNone::pre_wait() { return  -1;
}

#line 32 "OSNone.sc"
void OSNone::start(void) {
}

#line 43 "OSNone.sc"
void OSNone::task_activate(int tid) {
}

#line 40 "OSNone.sc"
int OSNone::task_create(const char *name, int type, unsigned long long int period, unsigned long long int wcet)
{    return  -1;
}

#line 51 "OSNone.sc"
void OSNone::task_endcycle(void) {
}
void OSNone::task_kill(int tid) {
}

#line 47 "OSNone.sc"
void OSNone::task_resume(int id) {
}

#line 45 "OSNone.sc"
void OSNone::task_sleep(void) {
}


void OSNone::task_terminate(void) {
}

#line 34 "OSNone.sc"
void OSNone::time_wait(long long int nsec) {
}

#line 19 "OSNone.sc"
void OSNone::wait_int(void) {
    _specc::wait(event(&intr), ((void*)0));
}

#line 1231 "vocoderPam.cc"
c_osnone_int_handshake::c_osnone_int_handshake(OSAPINone (&os))
    : _specc::channel(), os(os),
    f(false),
    w(false)
{   
}

c_osnone_int_handshake::~c_osnone_int_handshake(void)
{   
}

#line 71 "OSNone.sc"
void c_osnone_int_handshake::receive(void)
{   
    while( !f)
    {   
	os.wait_int();
    }
    f = false;
}

void c_osnone_int_handshake::send(void)
{   
    f = true;
}

#line 1258 "vocoderPam.cc"
c_double_handshake::c_double_handshake()
    : _specc::channel(),
    v(false),
    w(false)
{   
}

c_double_handshake::~c_double_handshake(void)
{   
}

#line 84 "c_double_handshake.sc"
void c_double_handshake::receive(void *d, unsigned long int l)
{   
    if ( !v)
    {   
	w = true;
	_specc::wait(event(&req), ((void*)0));
	w = false;
    }
    if (l != tmpl)
    {   
	abort();
    }
    memcpy(d, tmpd, l);
    v = false;
    _specc::notify(event(&ack), ((void*)0));
    _specc::wait(event(&ack), ((void*)0));
}

void c_double_handshake::send(const void *d, unsigned long int l)
{   
    tmpd = d;
    tmpl = l;
    v = true;
    if (w)
    {   
	_specc::notify(event(&req), ((void*)0));
    }
    _specc::wait(event(&ack), ((void*)0));
}

#line 1301 "vocoderPam.cc"
c_handshake::c_handshake()
    : _specc::channel(),
    f(false),
    w(false)
{   
}

c_handshake::~c_handshake(void)
{   
}

#line 62 "c_handshake.sc"
void c_handshake::receive(void)
{   
    if ( !f)
    {   
	w = true;
	_specc::wait(event(&e), ((void*)0));
	w = false;
    }
    f = false;
}

void c_handshake::send(void)
{   
    if (w)
    {   
	_specc::notify(event(&e), ((void*)0));
    }
    f = true;
}

#line 1334 "vocoderPam.cc"
c_mutex::c_mutex()
    : _specc::channel(),
    n(0ul)
{   
}

c_mutex::~c_mutex(void)
{   
}

#line 44 "c_mutex.sc"
void c_mutex::acquire(void)
{   
    if (n++ )
    {   
	_specc::wait(event(&e), ((void*)0));
    }
}

#line 60 "c_mutex.sc"
bool c_mutex::attempt(void)
{   
    if (n)
    {   
	return (false);
    }
    else 
    {   
	n++ ;
	return (true);
    }
}

#line 52 "c_mutex.sc"
void c_mutex::release(void)
{   
    if ( --n)
    {   
	_specc::notifyone(event(&e), ((void*)0));
    }
}

#line 1377 "vocoderPam.cc"
DSP56600IntDetect_2_0::DSP56600IntDetect_2_0(_specc::signal<bit<_BITLEN(0,0),true> > (&intr))
    : _specc::channel(), intr(intr)
{   
}

DSP56600IntDetect_2_0::~DSP56600IntDetect_2_0(void)
{   
}

#line 168 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600IntDetect_2_0::receive(void)
{   
    _specc::wait(rising(&intr), ((void*)0));
}

#line 1393 "vocoderPam.cc"
DSP56600IntGenerate_2_0::DSP56600IntGenerate_2_0(_specc::signal<bit<_BITLEN(0,0),true> > (&intr))
    : _specc::channel(), intr(intr)
{   
}

DSP56600IntGenerate_2_0::~DSP56600IntGenerate_2_0(void)
{   
}

#line 177 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600IntGenerate_2_0::send(void)
{   
    intr = 1;
    _specc::waitfor((5000ull));
    intr = 0;
}

#line 1411 "vocoderPam.cc"
DSP56600MasterLinkAccess_2_0::DSP56600MasterLinkAccess_2_0(IDSP56600MasterProtocol_2_0 (&protocol))
    : _specc::channel(), protocol(protocol)
{   
}

DSP56600MasterLinkAccess_2_0::~DSP56600MasterLinkAccess_2_0(void)
{   
}

#line 364 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600MasterLinkAccess_2_0::Read(unsigned short int addr, void *data, unsigned long int len)
{   
    unsigned long int i;
    unsigned char *p;
    bit<_BITLEN(23,0),true> word;

    for(p = (unsigned char *)data , i = 0; i < len; i++ )
    {   
	if ( !(i % 3)) {
	    protocol.masterRead(addr,  &word);
	}

	p[i] = ((unsigned char)((word(23,0, 23,16))).toInt());
	word = word << 8;
    }
}

#line 342 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600MasterLinkAccess_2_0::Write(unsigned short int addr, const void *data, unsigned long int len)
{   
    unsigned long int i;
    unsigned char *p;
    bit<_BITLEN(23,0),true> word = bit<24,true>("000000000000000000000000");

    for(p = (unsigned char *)data , i = 0; i < len; i++ )
    {   
	word = (word << 8) + p[i];

	if ( !((i + 1) % 3)) {
	    protocol.masterWrite(addr, word);
	    word = 0;
	}
    }

    if (i % 3) {
	word <<= 8 * (3 - (i % 3));
	protocol.masterWrite(addr, word);
    }
}

#line 1462 "vocoderPam.cc"
DSP56600MemAccess_2_0::DSP56600MemAccess_2_0(IDSP56600MasterProtocol_2_0 (&protocol))
    : _specc::channel(), protocol(protocol)
{   
}

DSP56600MemAccess_2_0::~DSP56600MemAccess_2_0(void)
{   
}

#line 462 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600MemAccess_2_0::Read(unsigned short int addr, void *data, unsigned long int len)
{   
    unsigned long int i;
    unsigned char *p;
    bit<_BITLEN(23,0),true> word;

    for(p = (unsigned char *)data , i = 0; i < len; i++ )
    {   
	if ( !(i % 2u)) {
	    protocol.masterRead(addr,  &word);
	    addr += 2u;
	}

	p[i] = ((unsigned char)((word(23,0, 15,8))).toInt());
	word = word << 8;
    }
}

#line 439 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600MemAccess_2_0::Write(unsigned short int addr, const void *data, unsigned long int len)
{   
    unsigned long int i;
    unsigned char *p;
    bit<_BITLEN(23,0),true> word = bit<24,true>("000000000000000000000000");

    for(p = (unsigned char *)data , i = 0; i < len; i++ )
    {   
	word = (word << 8) + p[i];

	if ( !((i + 1) % 2u)) {
	    protocol.masterWrite(addr, word);
	    addr += 2u;
	    word = 0;
	}
    }

    if (i % 2u) {
	word <<= 8 * (2u - (i % 2u));
	protocol.masterWrite(addr, word);
    }
}

#line 1515 "vocoderPam.cc"
DSP56600ProtocolTLM_2_0::DSP56600ProtocolTLM_2_0()
    : _specc::channel()
{   
}

DSP56600ProtocolTLM_2_0::~DSP56600ProtocolTLM_2_0(void)
{   
}

#line 304 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
bit<_BITLEN(1,0),true> DSP56600ProtocolTLM_2_0::listen(bit<_BITLEN(15,0),true> *addr, bit<_BITLEN(15,0),true> mask)
{   
    do  {
	_specc::wait(event(&busRequest), ((void*)0));
    }
    while(

#line 308 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
	(busAddr & mask) !=  *addr);
     *addr = busAddr;

    return _bit::concat(_bit(isWrite),_bit( !isWrite));
}

#line 263 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600ProtocolTLM_2_0::masterRead(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> *data) {
    busAddr = addr;
    isWrite = false;
    _specc::waitfor(((5 + 1 + 2 * 2 + 1 + 1) * 100000ull / 6 / 2));
    _specc::notify(event(&busRequest), ((void*)0));
    _specc::waitfor((2 * 100000ull / 6));
     *data = busData;

    return ;
}

void DSP56600ProtocolTLM_2_0::masterWrite(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> data) {
    busAddr = addr;
    isWrite = true;



    _specc::waitfor(

#line 277 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
    ((5 * 100000ull / 6 / 2) + 
	(100000ull / 6 / 4) + 
	(3 * 100000ull / 6 / 4) + 
	((2 + 1) * 100000ull / 6)));
    busData = data;
    _specc::notify(event(&busRequest), ((void*)0));
    _specc::waitfor((2 * 100000ull / 6 / 2));
}

#line 314 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
bit<_BITLEN(23,0),true> DSP56600ProtocolTLM_2_0::serveRead(bit<_BITLEN(15,0),true> addr)
{   
    _specc::waitfor((20000ull));
    return busData;
}

void DSP56600ProtocolTLM_2_0::serveWrite(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> data)
{   
    _specc::waitfor((15000ull));
    busData = data;
}

#line 286 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600ProtocolTLM_2_0::slaveRead(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> *data) {
    t1: _specc::wait(event(&busRequest), ((void*)0));
    if (busAddr != addr) goto t1;
    if (isWrite == false) goto t1;
     *data = busData;
    _specc::waitfor((20000ull));
    return ;
}

void DSP56600ProtocolTLM_2_0::slaveWrite(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> data) {
    t1: _specc::wait(event(&busRequest), ((void*)0));
    if (busAddr != addr) goto t1;
    if (isWrite) goto t1;
    busData = data;
    _specc::waitfor((15000ull));
    return ;
}

#line 1602 "vocoderPam.cc"
DSP56600SlaveLinkAccess_2_0::DSP56600SlaveLinkAccess_2_0(IDSP56600SlaveProtocol_2_0 (&protocol))
    : _specc::channel(), protocol(protocol)
{   
}

DSP56600SlaveLinkAccess_2_0::~DSP56600SlaveLinkAccess_2_0(void)
{   
}

#line 409 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600SlaveLinkAccess_2_0::Read(unsigned short int addr, void *data, unsigned long int len)
{   
    unsigned long int i;
    unsigned char *p;
    bit<_BITLEN(23,0),true> word;

    for(p = (unsigned char *)data , i = 0; i < len; i++ )
    {   
	if ( !(i % 3)) {
	    protocol.slaveRead(addr,  &word);
	}

	p[i] = ((unsigned char)((word(23,0, 23,16))).toInt());
	word = word << 8;
    }
}

#line 387 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600SlaveLinkAccess_2_0::Write(unsigned short int addr, const void *data, unsigned long int len)
{   
    unsigned long int i;
    unsigned char *p;
    bit<_BITLEN(23,0),true> word = bit<24,true>("000000000000000000000000");

    for(p = (unsigned char *)data , i = 0; i < len; i++ )
    {   
	word = (word << 8) + p[i];

	if ( !((i + 1) % 3)) {
	    protocol.slaveWrite(addr, word);
	    word = 0;
	}
    }

    if (i % 3) {
	word <<= 8 * (3 - (i % 3));
	protocol.slaveWrite(addr, word);
    }
}

#line 1653 "vocoderPam.cc"
DSP56600SlaveMemAccess_2_0::DSP56600SlaveMemAccess_2_0(IDSP56600SlaveProtocol_2_0 (&protocol))
    : _specc::channel(), protocol(protocol)
{   
}

DSP56600SlaveMemAccess_2_0::~DSP56600SlaveMemAccess_2_0(void)
{   
}

#line 512 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600SlaveMemAccess_2_0::SlaveRead(unsigned short int addr, void *data, unsigned long int len)
{   
    unsigned long int i;
    unsigned char *p;
    bit<_BITLEN(23,0),true> word;

    for(p = (unsigned char *)data , i = 0; i < len; i++ )
    {   
	if ( !(i % 2u)) {
	    protocol.slaveRead(addr,  &word);
	    addr += 2u;
	}
	p[i] = ((unsigned char)((word(23,0, 15,8))).toInt());
	word = word << 8;
    }
}

#line 491 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600SlaveMemAccess_2_0::SlaveWrite(unsigned short int addr, const void *data, unsigned long int len)
{   
    unsigned long int i;
    unsigned char *p;
    bit<_BITLEN(23,0),true> word = bit<24,true>("000000000000000000000000");

    for(p = (unsigned char *)data , i = 0; i < len; i++ )
    {   
	word = (word << 8) + p[i];
	if ( !((i + 1) % 2u)) {
	    protocol.slaveWrite(addr, word);
	    addr += 2u;
	    word = 0;
	}
    }
    if (i % 2u) {
	word <<= 8 * (2u - (i % 2u));
	protocol.slaveWrite(addr, word);
    }
}

#line 529 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void DSP56600SlaveMemAccess_2_0::serve(unsigned short int addr, void *data, unsigned long int len)
{   
    bit<_BITLEN(15,0),true> a;
    bit<_BITLEN(15,0),true> m;
    bit<_BITLEN(23,0),true> word;
    bit<_BITLEN(1,0),true> t;
    unsigned char *p;
    unsigned long int i;

    do  {
	a = bit<16,true>("0000000000000000");
	m = bit<16,true>("0000000000000000");
	t = protocol.listen( &a, m);
    }
    while(

#line 542 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
	a < addr || a >= addr + len);

    addr = ((unsigned short)(a - addr).toInt());
    if (addr >= len)
	return ;
    len -= addr;

#line 553 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
    if (len > 2u)
	len = 2u;

    p = (unsigned char *)data + addr;
    if (((t(1,0,(1))).test())) {
	for(i = 0; i < len; i++ )
	{   
	    if ( !(i % 2u)) {
		word = protocol.serveRead(addr);
		addr += 2u;
	    }

	    p[i] = ((unsigned char)((word(23,0, 15,8))).toInt());
	    word = word << 8;
	}
    }
    else 

#line 568 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
    {   
	word = 0;
	for(i = 0; i < len; i++ )
	{   
	    word = (word << 8) + p[i];
	    if ( !((i + 1) % 2u)) {
		protocol.serveWrite(addr, word);
		addr += 2u;
		word = 0;
	    }
	}
	if (i % 2u) {
	    word <<= 8 * (2u - (i % 2u));
	    protocol.serveWrite(addr, word);
	}
    }
}

#line 1766 "vocoderPam.cc"
MasterDSP56600_2_0::MasterDSP56600_2_0(_specc::signal<bit<_BITLEN(15,0),true> > (&A), _specc::signal<bit<_BITLEN(23,0),true> > (&D), _specc::signal<bit<_BITLEN(0,0),true> > (&MCS), _specc::signal<bit<_BITLEN(0,0),true> > (&nRD), _specc::signal<bit<_BITLEN(0,0),true> > (&nWR))
    : _specc::channel(), A(A), D(D), MCS(MCS), nRD(nRD), nWR(nWR)
{   
}

MasterDSP56600_2_0::~MasterDSP56600_2_0(void)
{   
}

#line 67 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void MasterDSP56600_2_0::masterRead(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> *data)
{   
    _specc::waitfor((5 * 100000ull / 6 / 2));
    A = addr;
    MCS = 1;
    _specc::waitfor((100000ull / 6 / 2));
    nRD = 0;
    _specc::waitfor(((2 * 2 + 1) * 100000ull / 6 / 2));
     *data = ((bit<_BITLEN(23,0),true>)D);
    _specc::waitfor((100000ull / 6 / 2));
    nRD = 1;
    MCS = 0;
    _specc::waitfor((2 * 100000ull / 6));

    return ;
}

void MasterDSP56600_2_0::masterWrite(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> data)
{   
    _specc::waitfor((5 * 100000ull / 6 / 2));
    A = addr;
    MCS = 1;
    _specc::waitfor((100000ull / 6 / 4));
    nWR = 0;
    _specc::waitfor((3 * 100000ull / 6 / 4));
    D = data;
    _specc::waitfor(((2 + 1) * 100000ull / 6));
    nWR = 1;
    MCS = 0;
    _specc::waitfor((2 * 100000ull / 6 / 2));
}

#line 1809 "vocoderPam.cc"
Motorola_DSP56600_PortA_2_0::Motorola_DSP56600_PortA_2_0()
    : _specc::channel(),
    MCS(bit<1,true>("0")),
    intA(bit<1,true>("0")),
    intB(bit<1,true>("0")),
    intC(bit<1,true>("0")),
    intD(bit<1,true>("0")),
    nRD(bit<1,true>("1")),
    nWR(bit<1,true>("1")),
    Master(A, D, MCS, nRD, nWR),
    MasterIntA(intA),
    MasterIntB(intB),
    MasterIntC(intC),
    MasterIntD(intD),
    MasterLink(Master),
    MasterMemAccess(Master),
    ProtocolTLM(),
    Slave(A, D, MCS, nRD, nWR),
    SlaveIntA(intA),
    SlaveIntB(intB),
    SlaveIntC(intC),
    SlaveIntD(intD),
    SlaveLink(Slave),
    SlaveMemAccess(Slave)
{   
}

Motorola_DSP56600_PortA_2_0::~Motorola_DSP56600_PortA_2_0(void)
{   
}

#line 986 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void Motorola_DSP56600_PortA_2_0::MasterRead(bit<_BITLEN(15,0),true> addr, void *data, unsigned long int len) {
    MasterLink.Read(((unsigned short)(addr).toInt()), data, len);
}

#line 994 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void Motorola_DSP56600_PortA_2_0::MasterReceive(int priority)
{   
    switch(priority) {
	case 0: return MasterIntA.receive();
	case 1: return MasterIntB.receive();
	case 2: return MasterIntC.receive();
	case 3: return MasterIntD.receive();
    }
}

#line 990 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void Motorola_DSP56600_PortA_2_0::MasterWrite(bit<_BITLEN(15,0),true> addr, const void *data, unsigned long int len) {
    MasterLink.Write(((unsigned short)(addr).toInt()), data, len);
}

#line 1005 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void Motorola_DSP56600_PortA_2_0::SlaveRead(bit<_BITLEN(15,0),true> addr, void *data, unsigned long int len) {
    SlaveLink.Read(((unsigned short)(addr).toInt()), data, len);
}

#line 1013 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void Motorola_DSP56600_PortA_2_0::SlaveSend(int priority)
{   
    switch(priority) {
	case 0: return SlaveIntA.send();
	case 1: return SlaveIntB.send();
	case 2: return SlaveIntC.send();
	case 3: return SlaveIntD.send();
    }
}

#line 1009 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void Motorola_DSP56600_PortA_2_0::SlaveWrite(bit<_BITLEN(15,0),true> addr, const void *data, unsigned long int len) {
    SlaveLink.Write(((unsigned short)(addr).toInt()), data, len);
}

#line 1883 "vocoderPam.cc"
Motorola_DSP56600_PortA_Wrap_0::Motorola_DSP56600_PortA_Wrap_0(IDSP56600MasterProtocol_2_0 (&protocol), _specc::signal<bit<_BITLEN(0,0),true> > (&INTR_MASKED))
    : _specc::channel(), protocol(protocol), INTR_MASKED(INTR_MASKED),
    mutex()
{   
}

Motorola_DSP56600_PortA_Wrap_0::~Motorola_DSP56600_PortA_Wrap_0(void)
{   
}

#line 195 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
void Motorola_DSP56600_PortA_Wrap_0::masterRead(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> *data)
{   
    mutex.acquire();
    INTR_MASKED = 1;
    protocol.masterRead(addr, data);
    INTR_MASKED = 0;
    mutex.release();
}

void Motorola_DSP56600_PortA_Wrap_0::masterWrite(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> data)
{   
    mutex.acquire();
    INTR_MASKED = 1;
    protocol.masterWrite(addr, data);
    INTR_MASKED = 0;
    mutex.release();
}

#line 1913 "vocoderPam.cc"
SlaveDSP56600_2_0::SlaveDSP56600_2_0(_specc::signal<bit<_BITLEN(15,0),true> > (&A), _specc::signal<bit<_BITLEN(23,0),true> > (&D), _specc::signal<bit<_BITLEN(0,0),true> > (&MCS), _specc::signal<bit<_BITLEN(0,0),true> > (&nRD), _specc::signal<bit<_BITLEN(0,0),true> > (&nWR))
    : _specc::channel(), A(A), D(D), MCS(MCS), nRD(nRD), nWR(nWR)
{   
}

SlaveDSP56600_2_0::~SlaveDSP56600_2_0(void)
{   
}

#line 137 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
bit<_BITLEN(1,0),true> SlaveDSP56600_2_0::listen(bit<_BITLEN(15,0),true> *addr, bit<_BITLEN(15,0),true> mask)
{   
    do  {
	_specc::wait(rising(&MCS), ((void*)0));
    }
    while(

#line 141 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
	(((bit<_BITLEN(15,0),true>)A) & mask) !=  *addr);
     *addr = ((bit<_BITLEN(15,0),true>)A);

    _specc::waitfor((100000ull / 6));

    return _bit::concat(((bit<_BITLEN(0,0),true>)nRD),((bit<_BITLEN(0,0),true>)nWR));
}

bit<_BITLEN(23,0),true> SlaveDSP56600_2_0::serveRead(bit<_BITLEN(15,0),true> addr)
{   
    _specc::waitfor((20000ull));
    return ((bit<_BITLEN(23,0),true>)D);
}

void SlaveDSP56600_2_0::serveWrite(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> data)
{   
    _specc::waitfor((15000ull));
    D = data;
    return ;
}

#line 118 "/ECEnet/Apps1/sce/latest/share/sce/db/busses/processor/dsp566portA.sc"
void SlaveDSP56600_2_0::slaveRead(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> *data)
{   
    t1: _specc::wait(rising(&MCS), ((void*)0));
    if (((bit<_BITLEN(15,0),true>)A) != addr) goto t1;
    _specc::waitfor((20000ull));
    if (((nWR).test())) goto t1;
     *data = ((bit<_BITLEN(23,0),true>)D);
    return ;
}

void SlaveDSP56600_2_0::slaveWrite(bit<_BITLEN(15,0),true> addr, bit<_BITLEN(23,0),true> data)
{   
    t1: _specc::wait(rising(&MCS), ((void*)0));
    if (((bit<_BITLEN(15,0),true>)A) != addr) goto t1;
    _specc::waitfor((15000ull));
    if (((nRD).test())) goto t1;
    D = data;
}

#line 1973 "vocoderPam.cc"
c_int_queue::c_int_queue(const unsigned long int (&size))
    : _specc::channel(), size(size),
    buffer(0),
    n(0ul),
    p(0ul),
    wr(0ul),
    ws(0ul)
{   
}

c_int_queue::~c_int_queue(void)
{   
}

void c_int_queue::cleanup(void)
{   
    if ( !n)
    {   
	free(buffer);
	buffer = 0;
    }
}

void c_int_queue::receive(int *d)
{   
    while( !n)
    {   
	wr++ ;
	_specc::wait(event(&r), ((void*)0));
	wr-- ;
    }
    if (n <= p)
    {   
	 *d = buffer[p - n];
    }
    else 
    {   
	 *d = buffer[p + size - n];
    }
    n-- ;
    if (ws)
    {   
	_specc::notify(event(&s), ((void*)0));
    }
    cleanup();
}

void c_int_queue::send(int d)
{   
    while(n >= size)
    {   
	ws++ ;
	_specc::wait(event(&s), ((void*)0));
	ws-- ;
    }
    setup();
    buffer[p] = d;
    p++ ;
    if (p >= size)
    {   
	p = 0;
    }
    n++ ;
    if (wr)
    {   
	_specc::notify(event(&r), ((void*)0));
    }
}

void c_int_queue::setup(void)
{   
    if ( !buffer)
    {   
	if ( !(buffer = (int *)malloc(sizeof(int) * size)))
	{   
	    exit(1);
	}
    }
}

c_link_DSP__HW_adapter_DSP::c_link_DSP__HW_adapter_DSP(IDSP56600LinkAccess_2_0 (&mac), unsigned short int (&addr), OSAPI (&os))
    : _specc::channel(), mac(mac), addr(addr), os(os)
{   
}

c_link_DSP__HW_adapter_DSP::~c_link_DSP__HW_adapter_DSP(void)
{   
}

void c_link_DSP__HW_adapter_DSP::receive(void *data, unsigned long int len)
{   
    if (len == 0ull)
    {   
	unsigned char tmp[1];

	mac.Read(addr, tmp, 1ull);
    }
    else 
    {   
	mac.Read(addr, data, len);
    }
}

void c_link_DSP__HW_adapter_DSP::send(const void *data, unsigned long int len)
{   
    if (len == 0ull)
    {   
	unsigned char tmp[1];

	mac.Write(addr, tmp, 1ull);
    }
    else 
    {   
	mac.Write(addr, data, len);
    }
}

c_link_DSP__HW_adapter_HW::c_link_DSP__HW_adapter_HW(IDSP56600LinkAccess_2_0 (&mac), unsigned short int (&addr))
    : _specc::channel(), mac(mac), addr(addr)
{   
}

c_link_DSP__HW_adapter_HW::~c_link_DSP__HW_adapter_HW(void)
{   
}

void c_link_DSP__HW_adapter_HW::receive(void *data, unsigned long int len)
{   
    if (len == 0ull)
    {   
	unsigned char tmp[1];

	mac.Read(addr, tmp, 1ull);
    }
    else 
    {   
	mac.Read(addr, data, len);
    }
}

void c_link_DSP__HW_adapter_HW::send(const void *data, unsigned long int len)
{   
    if (len == 0ull)
    {   
	unsigned char tmp[1];

	mac.Write(addr, tmp, 1ull);
    }
    else 
    {   
	mac.Write(addr, data, len);
    }
}

c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_DSP::c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_DSP(i_tranceiver (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_DSP::~c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_DSP(void)
{   
}

void c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_DSP::send(int d)
{   
    unsigned short int temp_2;

    temp_2 = (unsigned short int)d;
    htonshort( &buf[0],  &temp_2);
    strm.send( &buf[0], 2);
}

c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_DSP_opt::c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_DSP_opt(i_tranceiver (&strm), i_receive (&intr))
    : _specc::channel(), strm(strm), intr(intr)
{   
}

c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_DSP_opt::~c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_DSP_opt(void)
{   
}

void c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_DSP_opt::send(int d)
{   
    unsigned short int temp_2;

    intr.receive();
    temp_2 = (unsigned short int)d;
    htonshort( &buf[0],  &temp_2);
    strm.send( &buf[0], 2);
}

c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_HW::c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_HW(i_tranceiver_pack (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_HW::~c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_HW(void)
{   
}

void c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_HW::receive(int *d)
{   
    unsigned short int temp_2;

    strm.receive_enter(2);
    strm.receive( &buf[0], 2);
    ntohshort( &buf[0],  &temp_2);
     *d = (int)temp_2;
    strm.receive_leave();
}

c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_HW_opt::c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_HW_opt(i_tranceiver (&lnk), i_send (&intr))
    : _specc::channel(), lnk(lnk), intr(intr)
{   
}

c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_HW_opt::~c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_HW_opt(void)
{   
}

void c_pre_ar_cc__ar_tid_Codebook_CN__DSP__HW_HW_opt::receive(int *d)
{   
    unsigned short int temp_2;

    intr.send();
    lnk.receive( &buf[0], 2);
    ntohshort( &buf[0],  &temp_2);
     *d = (int)temp_2;
}

c_pre_ar_cc__ar_tid_Coder__DSP__HW_DSP::c_pre_ar_cc__ar_tid_Coder__DSP__HW_DSP(i_tranceiver (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_pre_ar_cc__ar_tid_Coder__DSP__HW_DSP::~c_pre_ar_cc__ar_tid_Coder__DSP__HW_DSP(void)
{   
}

void c_pre_ar_cc__ar_tid_Coder__DSP__HW_DSP::send(int d)
{   
    unsigned short int temp_2;

    temp_2 = (unsigned short int)d;
    htonshort( &buf[0],  &temp_2);
    strm.send( &buf[0], 2);
}

c_pre_ar_cc__ar_tid_Coder__DSP__HW_DSP_opt::c_pre_ar_cc__ar_tid_Coder__DSP__HW_DSP_opt(i_tranceiver (&strm), i_receive (&intr))
    : _specc::channel(), strm(strm), intr(intr)
{   
}

c_pre_ar_cc__ar_tid_Coder__DSP__HW_DSP_opt::~c_pre_ar_cc__ar_tid_Coder__DSP__HW_DSP_opt(void)
{   
}

void c_pre_ar_cc__ar_tid_Coder__DSP__HW_DSP_opt::send(int d)
{   
    unsigned short int temp_2;

    intr.receive();
    temp_2 = (unsigned short int)d;
    htonshort( &buf[0],  &temp_2);
    strm.send( &buf[0], 2);
}

c_pre_ar_cc__ar_tid_Coder__DSP__HW_HW::c_pre_ar_cc__ar_tid_Coder__DSP__HW_HW(i_tranceiver_pack (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_pre_ar_cc__ar_tid_Coder__DSP__HW_HW::~c_pre_ar_cc__ar_tid_Coder__DSP__HW_HW(void)
{   
}

void c_pre_ar_cc__ar_tid_Coder__DSP__HW_HW::receive(int *d)
{   
    unsigned short int temp_2;

    strm.receive_enter(2);
    strm.receive( &buf[0], 2);
    ntohshort( &buf[0],  &temp_2);
     *d = (int)temp_2;
    strm.receive_leave();
}

c_pre_ar_cc__ar_tid_Coder__DSP__HW_HW_opt::c_pre_ar_cc__ar_tid_Coder__DSP__HW_HW_opt(i_tranceiver (&lnk), i_send (&intr))
    : _specc::channel(), lnk(lnk), intr(intr)
{   
}

c_pre_ar_cc__ar_tid_Coder__DSP__HW_HW_opt::~c_pre_ar_cc__ar_tid_Coder__DSP__HW_HW_opt(void)
{   
}

void c_pre_ar_cc__ar_tid_Coder__DSP__HW_HW_opt::receive(int *d)
{   
    unsigned short int temp_2;

    intr.send();
    lnk.receive( &buf[0], 2);
    ntohshort( &buf[0],  &temp_2);
     *d = (int)temp_2;
}

c_pre_ar_cc__ar_tid_Subframes__DSP__HW_DSP::c_pre_ar_cc__ar_tid_Subframes__DSP__HW_DSP(i_tranceiver (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_pre_ar_cc__ar_tid_Subframes__DSP__HW_DSP::~c_pre_ar_cc__ar_tid_Subframes__DSP__HW_DSP(void)
{   
}

void c_pre_ar_cc__ar_tid_Subframes__DSP__HW_DSP::send(int d)
{   
    unsigned short int temp_2;

    temp_2 = (unsigned short int)d;
    htonshort( &buf[0],  &temp_2);
    strm.send( &buf[0], 2);
}

c_pre_ar_cc__ar_tid_Subframes__DSP__HW_DSP_opt::c_pre_ar_cc__ar_tid_Subframes__DSP__HW_DSP_opt(i_tranceiver (&strm), i_receive (&intr))
    : _specc::channel(), strm(strm), intr(intr)
{   
}

c_pre_ar_cc__ar_tid_Subframes__DSP__HW_DSP_opt::~c_pre_ar_cc__ar_tid_Subframes__DSP__HW_DSP_opt(void)
{   
}

void c_pre_ar_cc__ar_tid_Subframes__DSP__HW_DSP_opt::send(int d)
{   
    unsigned short int temp_2;

    intr.receive();
    temp_2 = (unsigned short int)d;
    htonshort( &buf[0],  &temp_2);
    strm.send( &buf[0], 2);
}

c_pre_ar_cc__ar_tid_Subframes__DSP__HW_HW::c_pre_ar_cc__ar_tid_Subframes__DSP__HW_HW(i_tranceiver_pack (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_pre_ar_cc__ar_tid_Subframes__DSP__HW_HW::~c_pre_ar_cc__ar_tid_Subframes__DSP__HW_HW(void)
{   
}

void c_pre_ar_cc__ar_tid_Subframes__DSP__HW_HW::receive(int *d)
{   
    unsigned short int temp_2;

    strm.receive_enter(2);
    strm.receive( &buf[0], 2);
    ntohshort( &buf[0],  &temp_2);
     *d = (int)temp_2;
    strm.receive_leave();
}

c_pre_ar_cc__ar_tid_Subframes__DSP__HW_HW_opt::c_pre_ar_cc__ar_tid_Subframes__DSP__HW_HW_opt(i_tranceiver (&lnk), i_send (&intr))
    : _specc::channel(), lnk(lnk), intr(intr)
{   
}

c_pre_ar_cc__ar_tid_Subframes__DSP__HW_HW_opt::~c_pre_ar_cc__ar_tid_Subframes__DSP__HW_HW_opt(void)
{   
}

void c_pre_ar_cc__ar_tid_Subframes__DSP__HW_HW_opt::receive(int *d)
{   
    unsigned short int temp_2;

    intr.send();
    lnk.receive( &buf[0], 2);
    ntohshort( &buf[0],  &temp_2);
     *d = (int)temp_2;
}

c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_DSP::c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_DSP(i_tranceiver (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_DSP::~c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_DSP(void)
{   
}

void c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_DSP::receive(short int (*d0)[10], 
    short int (*d1)[40], short int *d2, short int (*d3)[40])
{   
    int i;
    unsigned short int temp_2;

    strm.receive( &buf[0], 182);
    for(i = 0; i < 10; i++ )
    {   
	ntohshort( &buf[i * 2],  &temp_2);
	( *d0)[i] = (short int)temp_2;
    }
    for(i = 0; i < 40; i++ )
    {   
	ntohshort( &buf[20 + i * 2],  &temp_2);
	( *d1)[i] = (short int)temp_2;
    }
    ntohshort( &buf[100],  &temp_2);
     *d2 = (short int)temp_2;
    for(i = 0; i < 40; i++ )
    {   
	ntohshort( &buf[102 + i * 2],  &temp_2);
	( *d3)[i] = (short int)temp_2;
    }
}

c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_DSP_opt::c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_DSP_opt(i_tranceiver (&strm), i_receive (&intr))
    : _specc::channel(), strm(strm), intr(intr)
{   
}

c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_DSP_opt::~c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_DSP_opt(void)
{   
}

void c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_DSP_opt::receive(short int (*d0)[10], 
    short int (*d1)[40], short int *d2, short int (*d3)[40])
{   
    int i;
    unsigned short int temp_2;

    intr.receive();
    strm.receive( &buf[0], 182);
    for(i = 0; i < 10; i++ )
    {   
	ntohshort( &buf[i * 2],  &temp_2);
	( *d0)[i] = (short int)temp_2;
    }
    for(i = 0; i < 40; i++ )
    {   
	ntohshort( &buf[20 + i * 2],  &temp_2);
	( *d1)[i] = (short int)temp_2;
    }
    ntohshort( &buf[100],  &temp_2);
     *d2 = (short int)temp_2;
    for(i = 0; i < 40; i++ )
    {   
	ntohshort( &buf[102 + i * 2],  &temp_2);
	( *d3)[i] = (short int)temp_2;
    }
}

c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_HW::c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_HW(i_tranceiver_pack (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_HW::~c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_HW(void)
{   
}

void c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_HW::send(short int d0[10], 
    short int d1[40], short int d2, short int d3[40])
{   
    int i;
    unsigned short int temp_2;

    strm.send_enter(182);
    for(i = 0; i < 9; i += 3)
    {   
	temp_2 = (unsigned short int)d0[i];
	htonshort( &buf[0],  &temp_2);
	temp_2 = (unsigned short int)d0[i + 1];
	htonshort( &buf[2],  &temp_2);
	strm.send( &buf[0], 3);
	buf[0] = buf[3];
	temp_2 = (unsigned short int)d0[i + 2];
	htonshort( &buf[1],  &temp_2);
	strm.send( &buf[0], 3);
    }
    temp_2 = (unsigned short int)d0[9];
    htonshort( &buf[0],  &temp_2);
    temp_2 = (unsigned short int)d1[0];
    htonshort( &buf[2],  &temp_2);
    strm.send( &buf[0], 3);
    buf[0] = buf[3];
    temp_2 = (unsigned short int)d1[1];
    htonshort( &buf[1],  &temp_2);
    strm.send( &buf[0], 3);
    for(i = 2; i < 38; i += 3)
    {   
	temp_2 = (unsigned short int)d1[i];
	htonshort( &buf[0],  &temp_2);
	temp_2 = (unsigned short int)d1[i + 1];
	htonshort( &buf[2],  &temp_2);
	strm.send( &buf[0], 3);
	buf[0] = buf[3];
	temp_2 = (unsigned short int)d1[i + 2];
	htonshort( &buf[1],  &temp_2);
	strm.send( &buf[0], 3);
    }
    temp_2 = (unsigned short int)d1[38];
    htonshort( &buf[0],  &temp_2);
    temp_2 = (unsigned short int)d1[39];
    htonshort( &buf[2],  &temp_2);
    strm.send( &buf[0], 3);
    buf[0] = buf[3];
    temp_2 = (unsigned short int)d2;
    htonshort( &buf[1],  &temp_2);
    strm.send( &buf[0], 3);
    for(i = 0; i < 39; i += 3)
    {   
	temp_2 = (unsigned short int)d3[i];
	htonshort( &buf[0],  &temp_2);
	temp_2 = (unsigned short int)d3[i + 1];
	htonshort( &buf[2],  &temp_2);
	strm.send( &buf[0], 3);
	buf[0] = buf[3];
	temp_2 = (unsigned short int)d3[i + 2];
	htonshort( &buf[1],  &temp_2);
	strm.send( &buf[0], 3);
    }
    temp_2 = (unsigned short int)d3[39];
    htonshort( &buf[0],  &temp_2);
    strm.send( &buf[0], 2);
    strm.send_leave();
}

c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_HW_opt::c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_HW_opt(i_tranceiver (&lnk), i_send (&intr))
    : _specc::channel(), lnk(lnk), intr(intr)
{   
}

c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_HW_opt::~c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_HW_opt(void)
{   
}

void c_pre_ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP_HW_opt::send(short int d0[10], 
    short int d1[40], short int d2, short int d3[40])
{   
    int i;
    unsigned short int temp_2;

    intr.send();
    for(i = 0; i < 9; i += 3)
    {   
	temp_2 = (unsigned short int)d0[i];
	htonshort( &buf[0],  &temp_2);
	temp_2 = (unsigned short int)d0[i + 1];
	htonshort( &buf[2],  &temp_2);
	lnk.send( &buf[0], 3);
	buf[0] = buf[3];
	temp_2 = (unsigned short int)d0[i + 2];
	htonshort( &buf[1],  &temp_2);
	lnk.send( &buf[0], 3);
    }
    temp_2 = (unsigned short int)d0[9];
    htonshort( &buf[0],  &temp_2);
    temp_2 = (unsigned short int)d1[0];
    htonshort( &buf[2],  &temp_2);
    lnk.send( &buf[0], 3);
    buf[0] = buf[3];
    temp_2 = (unsigned short int)d1[1];
    htonshort( &buf[1],  &temp_2);
    lnk.send( &buf[0], 3);
    for(i = 2; i < 38; i += 3)
    {   
	temp_2 = (unsigned short int)d1[i];
	htonshort( &buf[0],  &temp_2);
	temp_2 = (unsigned short int)d1[i + 1];
	htonshort( &buf[2],  &temp_2);
	lnk.send( &buf[0], 3);
	buf[0] = buf[3];
	temp_2 = (unsigned short int)d1[i + 2];
	htonshort( &buf[1],  &temp_2);
	lnk.send( &buf[0], 3);
    }
    temp_2 = (unsigned short int)d1[38];
    htonshort( &buf[0],  &temp_2);
    temp_2 = (unsigned short int)d1[39];
    htonshort( &buf[2],  &temp_2);
    lnk.send( &buf[0], 3);
    buf[0] = buf[3];
    temp_2 = (unsigned short int)d2;
    htonshort( &buf[1],  &temp_2);
    lnk.send( &buf[0], 3);
    for(i = 0; i < 39; i += 3)
    {   
	temp_2 = (unsigned short int)d3[i];
	htonshort( &buf[0],  &temp_2);
	temp_2 = (unsigned short int)d3[i + 1];
	htonshort( &buf[2],  &temp_2);
	lnk.send( &buf[0], 3);
	buf[0] = buf[3];
	temp_2 = (unsigned short int)d3[i + 2];
	htonshort( &buf[1],  &temp_2);
	lnk.send( &buf[0], 3);
    }
    temp_2 = (unsigned short int)d3[39];
    htonshort( &buf[0],  &temp_2);
    lnk.send( &buf[0], 2);
}

c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_DSP::c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_DSP(i_tranceiver (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_DSP::~c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_DSP(void)
{   
}

void c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_DSP::send(short int d0, 
    short int d1[40], short int d2[40], short int d3, short int d4[40], 
    short int d5[40], short int d6[40], short int d7[40])
{   
    int i;
    unsigned short int temp_2;

    temp_2 = (unsigned short int)d0;
    htonshort( &buf[0],  &temp_2);
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d1[i];
	htonshort( &buf[2 + i * 2],  &temp_2);
    }
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d2[i];
	htonshort( &buf[82 + i * 2],  &temp_2);
    }
    temp_2 = (unsigned short int)d3;
    htonshort( &buf[162],  &temp_2);
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d4[i];
	htonshort( &buf[164 + i * 2],  &temp_2);
    }
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d5[i];
	htonshort( &buf[244 + i * 2],  &temp_2);
    }
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d6[i];
	htonshort( &buf[324 + i * 2],  &temp_2);
    }
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d7[i];
	htonshort( &buf[404 + i * 2],  &temp_2);
    }
    strm.send( &buf[0], 484);
}

c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_DSP_opt::c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_DSP_opt(i_tranceiver (&strm), i_receive (&intr))
    : _specc::channel(), strm(strm), intr(intr)
{   
}

c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_DSP_opt::~c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_DSP_opt(void)
{   
}

void c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_DSP_opt::send(short int d0, 
    short int d1[40], short int d2[40], short int d3, short int d4[40], 
    short int d5[40], short int d6[40], short int d7[40])
{   
    int i;
    unsigned short int temp_2;

    intr.receive();
    temp_2 = (unsigned short int)d0;
    htonshort( &buf[0],  &temp_2);
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d1[i];
	htonshort( &buf[2 + i * 2],  &temp_2);
    }
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d2[i];
	htonshort( &buf[82 + i * 2],  &temp_2);
    }
    temp_2 = (unsigned short int)d3;
    htonshort( &buf[162],  &temp_2);
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d4[i];
	htonshort( &buf[164 + i * 2],  &temp_2);
    }
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d5[i];
	htonshort( &buf[244 + i * 2],  &temp_2);
    }
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d6[i];
	htonshort( &buf[324 + i * 2],  &temp_2);
    }
    for(i = 0; i < 40; i++ )
    {   
	temp_2 = (unsigned short int)d7[i];
	htonshort( &buf[404 + i * 2],  &temp_2);
    }
    strm.send( &buf[0], 484);
}

c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_HW::c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_HW(i_tranceiver_pack (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_HW::~c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_HW(void)
{   
}

void c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_HW::receive(short int *d0, 
    short int (*d1)[40], short int (*d2)[40], short int *d3, short int (*d4)[40], 
    short int (*d5)[40], short int (*d6)[40], short int (*d7)[40])
{   
    int i;
    unsigned short int temp_2;

    strm.receive_enter(484);
    strm.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
     *d0 = (short int)temp_2;
    buf[0] = buf[2];
    strm.receive( &buf[1], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d1)[0] = (short int)temp_2;
    ntohshort( &buf[2],  &temp_2);
    ( *d1)[1] = (short int)temp_2;
    for(i = 2; i < 38; i += 3)
    {   
	strm.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d1)[i] = (short int)temp_2;
	buf[0] = buf[2];
	strm.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d1)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d1)[i + 2] = (short int)temp_2;
    }
    strm.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d1)[38] = (short int)temp_2;
    buf[0] = buf[2];
    strm.receive( &buf[1], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d1)[39] = (short int)temp_2;
    ntohshort( &buf[2],  &temp_2);
    ( *d2)[0] = (short int)temp_2;
    for(i = 1; i < 40; i += 3)
    {   
	strm.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d2)[i] = (short int)temp_2;
	buf[0] = buf[2];
	strm.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d2)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d2)[i + 2] = (short int)temp_2;
    }
    strm.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
     *d3 = (short int)temp_2;
    buf[0] = buf[2];
    strm.receive( &buf[1], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d4)[0] = (short int)temp_2;
    ntohshort( &buf[2],  &temp_2);
    ( *d4)[1] = (short int)temp_2;
    for(i = 2; i < 38; i += 3)
    {   
	strm.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d4)[i] = (short int)temp_2;
	buf[0] = buf[2];
	strm.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d4)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d4)[i + 2] = (short int)temp_2;
    }
    strm.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d4)[38] = (short int)temp_2;
    buf[0] = buf[2];
    strm.receive( &buf[1], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d4)[39] = (short int)temp_2;
    ntohshort( &buf[2],  &temp_2);
    ( *d5)[0] = (short int)temp_2;
    for(i = 1; i < 40; i += 3)
    {   
	strm.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d5)[i] = (short int)temp_2;
	buf[0] = buf[2];
	strm.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d5)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d5)[i + 2] = (short int)temp_2;
    }
    for(i = 0; i < 39; i += 3)
    {   
	strm.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d6)[i] = (short int)temp_2;
	buf[0] = buf[2];
	strm.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d6)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d6)[i + 2] = (short int)temp_2;
    }
    strm.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d6)[39] = (short int)temp_2;
    buf[0] = buf[2];
    strm.receive( &buf[1], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d7)[0] = (short int)temp_2;
    ntohshort( &buf[2],  &temp_2);
    ( *d7)[1] = (short int)temp_2;
    for(i = 2; i < 38; i += 3)
    {   
	strm.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d7)[i] = (short int)temp_2;
	buf[0] = buf[2];
	strm.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d7)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d7)[i + 2] = (short int)temp_2;
    }
    strm.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d7)[38] = (short int)temp_2;
    buf[0] = buf[2];
    strm.receive( &buf[1], 1);
    ntohshort( &buf[0],  &temp_2);
    ( *d7)[39] = (short int)temp_2;
    strm.receive_leave();
}

c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_HW_opt::c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_HW_opt(i_tranceiver (&lnk), i_send (&intr))
    : _specc::channel(), lnk(lnk), intr(intr)
{   
}

c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_HW_opt::~c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_HW_opt(void)
{   
}

void c_pre_ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW_HW_opt::receive(short int *d0, 
    short int (*d1)[40], short int (*d2)[40], short int *d3, short int (*d4)[40], 
    short int (*d5)[40], short int (*d6)[40], short int (*d7)[40])
{   
    int i;
    unsigned short int temp_2;

    intr.send();
    lnk.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
     *d0 = (short int)temp_2;
    buf[0] = buf[2];
    lnk.receive( &buf[1], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d1)[0] = (short int)temp_2;
    ntohshort( &buf[2],  &temp_2);
    ( *d1)[1] = (short int)temp_2;
    for(i = 2; i < 38; i += 3)
    {   
	lnk.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d1)[i] = (short int)temp_2;
	buf[0] = buf[2];
	lnk.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d1)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d1)[i + 2] = (short int)temp_2;
    }
    lnk.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d1)[38] = (short int)temp_2;
    buf[0] = buf[2];
    lnk.receive( &buf[1], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d1)[39] = (short int)temp_2;
    ntohshort( &buf[2],  &temp_2);
    ( *d2)[0] = (short int)temp_2;
    for(i = 1; i < 40; i += 3)
    {   
	lnk.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d2)[i] = (short int)temp_2;
	buf[0] = buf[2];
	lnk.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d2)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d2)[i + 2] = (short int)temp_2;
    }
    lnk.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
     *d3 = (short int)temp_2;
    buf[0] = buf[2];
    lnk.receive( &buf[1], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d4)[0] = (short int)temp_2;
    ntohshort( &buf[2],  &temp_2);
    ( *d4)[1] = (short int)temp_2;
    for(i = 2; i < 38; i += 3)
    {   
	lnk.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d4)[i] = (short int)temp_2;
	buf[0] = buf[2];
	lnk.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d4)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d4)[i + 2] = (short int)temp_2;
    }
    lnk.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d4)[38] = (short int)temp_2;
    buf[0] = buf[2];
    lnk.receive( &buf[1], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d4)[39] = (short int)temp_2;
    ntohshort( &buf[2],  &temp_2);
    ( *d5)[0] = (short int)temp_2;
    for(i = 1; i < 40; i += 3)
    {   
	lnk.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d5)[i] = (short int)temp_2;
	buf[0] = buf[2];
	lnk.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d5)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d5)[i + 2] = (short int)temp_2;
    }
    for(i = 0; i < 39; i += 3)
    {   
	lnk.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d6)[i] = (short int)temp_2;
	buf[0] = buf[2];
	lnk.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d6)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d6)[i + 2] = (short int)temp_2;
    }
    lnk.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d6)[39] = (short int)temp_2;
    buf[0] = buf[2];
    lnk.receive( &buf[1], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d7)[0] = (short int)temp_2;
    ntohshort( &buf[2],  &temp_2);
    ( *d7)[1] = (short int)temp_2;
    for(i = 2; i < 38; i += 3)
    {   
	lnk.receive( &buf[0], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d7)[i] = (short int)temp_2;
	buf[0] = buf[2];
	lnk.receive( &buf[1], 3);
	ntohshort( &buf[0],  &temp_2);
	( *d7)[i + 1] = (short int)temp_2;
	ntohshort( &buf[2],  &temp_2);
	( *d7)[i + 2] = (short int)temp_2;
    }
    lnk.receive( &buf[0], 3);
    ntohshort( &buf[0],  &temp_2);
    ( *d7)[38] = (short int)temp_2;
    buf[0] = buf[2];
    lnk.receive( &buf[1], 1);
    ntohshort( &buf[0],  &temp_2);
    ( *d7)[39] = (short int)temp_2;
}

c_short_int__10__queue::c_short_int__10__queue(const unsigned long int (&size))
    : _specc::channel(), size(size),
    buffer(0),
    n(0ul),
    p(0ul),
    wr(0ul),
    ws(0ul)
{   
}

c_short_int__10__queue::~c_short_int__10__queue(void)
{   
}

void c_short_int__10__queue::cleanup(void)
{   
    if ( !n)
    {   
	free(buffer);
	buffer = 0;
    }
}

void c_short_int__10__queue::receive(short int (*d)[10])
{   
    while( !n)
    {   
	wr++ ;
	_specc::wait(event(&r), ((void*)0));
	wr-- ;
    }
    if (n <= p)
    {   
	{ unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<10;_scc_index_0++) ( *d)[_scc_index_0] = (buffer[p - 
	    n])[_scc_index_0]; }
    }
    else 
    {   
	{ unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<10;_scc_index_0++) ( *d)[_scc_index_0] = (buffer[p + 
	    size - n])[_scc_index_0]; }
    }
    n-- ;
    if (ws)
    {   
	_specc::notify(event(&s), ((void*)0));
    }
    cleanup();
}

void c_short_int__10__queue::send(short int d[10])
{   
    while(n >= size)
    {   
	ws++ ;
	_specc::wait(event(&s), ((void*)0));
	ws-- ;
    }
    setup();
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<10;_scc_index_0++) (buffer[p])[_scc_index_0] = (d)[_scc_index_0]; }
    p++ ;
    if (p >= size)
    {   
	p = 0;
    }
    n++ ;
    if (wr)
    {   
	_specc::notify(event(&r), ((void*)0));
    }
}

void c_short_int__10__queue::setup(void)
{   
    if ( !buffer)
    {   
	if ( !(buffer = (short int (*)[10])malloc(sizeof(short int [10]) * 
		    size)))
	{   
	    exit(1);
	}
    }
}

c_short_int__10__short_int__40__short_int_short_int__40__queue::c_short_int__10__short_int__40__short_int_short_int__40__queue(const unsigned long int (&size))
    : _specc::channel(), size(size)
{   
}

c_short_int__10__short_int__40__short_int_short_int__40__queue::~c_short_int__10__short_int__40__short_int_short_int__40__queue(void)
{   
}

void c_short_int__10__short_int__40__short_int_short_int__40__queue::receive(short int (*d0)[10], 
    short int (*d1)[40], short int *d2, short int (*d3)[40])
{   
}

void c_short_int__10__short_int__40__short_int_short_int__40__queue::send(short int d0[10], 
    short int d1[40], short int d2, short int d3[40])
{   
}

c_short_int__40__queue::c_short_int__40__queue(const unsigned long int (&size))
    : _specc::channel(), size(size),
    buffer(0),
    n(0ul),
    p(0ul),
    wr(0ul),
    ws(0ul)
{   
}

c_short_int__40__queue::~c_short_int__40__queue(void)
{   
}

void c_short_int__40__queue::cleanup(void)
{   
    if ( !n)
    {   
	free(buffer);
	buffer = 0;
    }
}

void c_short_int__40__queue::receive(short int (*d)[40])
{   
    while( !n)
    {   
	wr++ ;
	_specc::wait(event(&r), ((void*)0));
	wr-- ;
    }
    if (n <= p)
    {   
	{ unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<40;_scc_index_0++) ( *d)[_scc_index_0] = (buffer[p - 
	    n])[_scc_index_0]; }
    }
    else 
    {   
	{ unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<40;_scc_index_0++) ( *d)[_scc_index_0] = (buffer[p + 
	    size - n])[_scc_index_0]; }
    }
    n-- ;
    if (ws)
    {   
	_specc::notify(event(&s), ((void*)0));
    }
    cleanup();
}

void c_short_int__40__queue::send(short int d[40])
{   
    while(n >= size)
    {   
	ws++ ;
	_specc::wait(event(&s), ((void*)0));
	ws-- ;
    }
    setup();
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<40;_scc_index_0++) (buffer[p])[_scc_index_0] = (d)[_scc_index_0]; }
    p++ ;
    if (p >= size)
    {   
	p = 0;
    }
    n++ ;
    if (wr)
    {   
	_specc::notify(event(&r), ((void*)0));
    }
}

void c_short_int__40__queue::setup(void)
{   
    if ( !buffer)
    {   
	if ( !(buffer = (short int (*)[40])malloc(sizeof(short int [40]) * 
		    size)))
	{   
	    exit(1);
	}
    }
}

c_short_int_queue::c_short_int_queue(const unsigned long int (&size))
    : _specc::channel(), size(size),
    buffer(0),
    n(0ul),
    p(0ul),
    wr(0ul),
    ws(0ul)
{   
}

c_short_int_queue::~c_short_int_queue(void)
{   
}

void c_short_int_queue::cleanup(void)
{   
    if ( !n)
    {   
	free(buffer);
	buffer = 0;
    }
}

void c_short_int_queue::receive(short int *d)
{   
    while( !n)
    {   
	wr++ ;
	_specc::wait(event(&r), ((void*)0));
	wr-- ;
    }
    if (n <= p)
    {   
	 *d = buffer[p - n];
    }
    else 
    {   
	 *d = buffer[p + size - n];
    }
    n-- ;
    if (ws)
    {   
	_specc::notify(event(&s), ((void*)0));
    }
    cleanup();
}

void c_short_int_queue::send(short int d)
{   
    while(n >= size)
    {   
	ws++ ;
	_specc::wait(event(&s), ((void*)0));
	ws-- ;
    }
    setup();
    buffer[p] = d;
    p++ ;
    if (p >= size)
    {   
	p = 0;
    }
    n++ ;
    if (wr)
    {   
	_specc::notify(event(&r), ((void*)0));
    }
}

void c_short_int_queue::setup(void)
{   
    if ( !buffer)
    {   
	if ( !(buffer = (short int *)malloc(sizeof(short int) * size)))
	{   
	    exit(1);
	}
    }
}

c_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__queue::c_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__queue(const unsigned long int (&size))
    : _specc::channel(), size(size)
{   
}

c_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__queue::~c_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__queue(void)
{   
}

void c_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__queue::receive(short int *d0, 
    short int (*d1)[40], short int (*d2)[40], short int *d3, short int (*d4)[40], 
    short int (*d5)[40], short int (*d6)[40], short int (*d7)[40])
{   
}

void c_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__queue::send(short int d0, 
    short int d1[40], short int d2[40], short int d3, short int d4[40], 
    short int d5[40], short int d6[40], short int d7[40])
{   
}

c_tranceiver_c_stream_0_HW::c_tranceiver_c_stream_0_HW(i_tranceiver (&strm))
    : _specc::channel(), strm(strm)
{   
}

c_tranceiver_c_stream_0_HW::~c_tranceiver_c_stream_0_HW(void)
{   
}

void c_tranceiver_c_stream_0_HW::receive(void *d, unsigned long int len)
{   
    memcpy(d,  &buf[curr], len);
    curr += len;
}

void c_tranceiver_c_stream_0_HW::receive_enter(unsigned long int len)
{   
    size = len;
    curr = 0;
    strm.receive( &buf[0], size);
}

void c_tranceiver_c_stream_0_HW::receive_leave(void)
{   
}

void c_tranceiver_c_stream_0_HW::send(const void *d, unsigned long int len)
{   
    memcpy( &buf[curr], d, len);
    curr += len;
}

void c_tranceiver_c_stream_0_HW::send_enter(unsigned long int len)
{   
    size = len;
    curr = 0;
}

void c_tranceiver_c_stream_0_HW::send_leave(void)
{   
    strm.send( &buf[0], size);
}

// behavior class definitions ////////////////////////////////////////

Closed_Loop_Seq1::Closed_Loop_Seq1(unsigned int _idcnt, int (&i_subfr), short int (&h1)[40], short int *(&p_exc), short int *(&p_speech), short int *(&p_h1), short int *(&p_exc_i), short int *(&p_speech_i))
    : _specc::behavior(_idcnt), i_subfr(i_subfr), h1(h1), p_exc(p_exc), p_speech(p_speech), p_h1(p_h1), p_exc_i(p_exc_i), p_speech_i(p_speech_i)
{   
}

Closed_Loop_Seq1::~Closed_Loop_Seq1(void)
{   
}

#line 30 "src/closed_loop/closed_loop.sc"
void Closed_Loop_Seq1::main(void)
{   

#line 3316 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 32 "src/closed_loop/closed_loop.sc"
    p_h1 = (short int *)h1;
    p_exc_i = p_exc + i_subfr;
    p_speech_i = p_speech + i_subfr;
}

#line 3325 "vocoderPam.cc"
Closed_Loop_Seq2::Closed_Loop_Seq2(unsigned int _idcnt, short int (&Aq)[11], short int (&Ap1)[11], short int (&Ap2)[11], short int (&h1)[40], short int *(&p_speech_i), short int (&res2)[40], short int *(&p_exc_i), short int (&xn)[40], short int (&mem_err)[10], short int (&mem_w0)[10], short int (&txdtx_ctrl), short int (&CN_excitation_gain), bool (&reset_flag))
    : _specc::behavior(_idcnt), Aq(Aq), Ap1(Ap1), Ap2(Ap2), h1(h1), p_speech_i(p_speech_i), res2(res2), p_exc_i(p_exc_i), xn(xn), mem_err(mem_err), mem_w0(mem_w0), txdtx_ctrl(txdtx_ctrl), CN_excitation_gain(CN_excitation_gain), reset_flag(reset_flag),
    find_targetvec(_IDcnt, Aq, Ap1, Ap2, p_speech_i, res2, p_exc_i, xn, mem_err, mem_w0, txdtx_ctrl, CN_excitation_gain),
    imp_resp(_IDcnt, Aq, Ap1, Ap2, h1, txdtx_ctrl, reset_flag)
{   
}

Closed_Loop_Seq2::~Closed_Loop_Seq2(void)
{   
}

void Closed_Loop_Seq2::main(void)
{   
    imp_resp.main();
    find_targetvec.main();
}

#line 61 "src/closed_loop/closed_loop.sc"
void Closed_Loop_Seq2::reset(void)
{   
    imp_resp.reset();
}

#line 3349 "vocoderPam.cc"
Closed_Loop_Seq3::Closed_Loop_Seq3(unsigned int _idcnt, int (&i_subfr), int (&pit_flag), short int (&t0_min_2), short int (&t0_max_2), short int (&t0_min), short int (&t0_max))
    : _specc::behavior(_idcnt), i_subfr(i_subfr), pit_flag(pit_flag), t0_min_2(t0_min_2), t0_max_2(t0_max_2), t0_min(t0_min), t0_max(t0_max)
{   
}

Closed_Loop_Seq3::~Closed_Loop_Seq3(void)
{   
}

#line 87 "src/closed_loop/closed_loop.sc"
void Closed_Loop_Seq3::main(void)
{   

#line 3363 "vocoderPam.cc"
    _specc::waitfor(16666ull);

#line 94 "src/closed_loop/closed_loop.sc"
    pit_flag = i_subfr;


    if (sub(i_subfr, 80) == 0)
    {   
	pit_flag = 0;
	t0_min = t0_min_2;
	t0_max = t0_max_2;
    }
}

#line 3378 "vocoderPam.cc"
Closed_Loop_Seq4::Closed_Loop_Seq4(unsigned int _idcnt, short int (&ana_content), short int (&T0), short int (&ana)[2], short int (&t0))
    : _specc::behavior(_idcnt), ana_content(ana_content), T0(T0), ana(ana), t0(t0)
{   
}

Closed_Loop_Seq4::~Closed_Loop_Seq4(void)
{   
}

#line 114 "src/closed_loop/closed_loop.sc"
void Closed_Loop_Seq4::main(void)
{   

#line 3392 "vocoderPam.cc"
    _specc::waitfor(33333ull);

#line 116 "src/closed_loop/closed_loop.sc"
    ana[0] = ana_content;
    t0 = T0;
}

#line 3400 "vocoderPam.cc"
Closed_Loop_Seq5::Closed_Loop_Seq5(unsigned int _idcnt, short int (&gain_pit))
    : _specc::behavior(_idcnt), gain_pit(gain_pit)
{   
}

Closed_Loop_Seq5::~Closed_Loop_Seq5(void)
{   
}

#line 124 "src/closed_loop/closed_loop.sc"
void Closed_Loop_Seq5::main(void)
{   

#line 3414 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 126 "src/closed_loop/closed_loop.sc"
    gain_pit = 0;
}

#line 3421 "vocoderPam.cc"
Closed_Loop_Seq6::Closed_Loop_Seq6(unsigned int _idcnt, short int (&y1b)[40], short int (&gain_pitch), short int (&ana_content), short int (&y1)[40], short int (&gain_pit), short int (&ana)[2])
    : _specc::behavior(_idcnt), y1b(y1b), gain_pitch(gain_pitch), ana_content(ana_content), y1(y1), gain_pit(gain_pit), ana(ana)
{   
}

Closed_Loop_Seq6::~Closed_Loop_Seq6(void)
{   
}

#line 139 "src/closed_loop/closed_loop.sc"
void Closed_Loop_Seq6::main(void)
{   

#line 3435 "vocoderPam.cc"
    _specc::waitfor(33333ull);

#line 141 "src/closed_loop/closed_loop.sc"
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<40;_scc_index_0++) (y1)[_scc_index_0] = (y1b)[_scc_index_0]; }
    gain_pit = gain_pitch;
    ana[1] = ana_content;
}

#line 3444 "vocoderPam.cc"
Compute_CN_Excitation_Gain::Compute_CN_Excitation_Gain(unsigned int _idcnt, short int (&res2)[40], short int (&c_gain))
    : _specc::behavior(_idcnt), res2(res2), c_gain(c_gain)
{   
}

Compute_CN_Excitation_Gain::~Compute_CN_Excitation_Gain(void)
{   
}

#line 31 "src/closed_loop/compute_CN_excitation_gain.sc"
void Compute_CN_Excitation_Gain::main(void)
{   
    int i;
    short int gain;
    short int norm; short int norm1;
    bool overfl;
    int L_temp;

#line 3463 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 41 "src/closed_loop/compute_CN_excitation_gain.sc"
    norm = 0;
    do 
    {   
	overfl = 0;

	L_temp = 0l;
	for(i = 0; i < 40; i++ )
	{   
	    gain = shr(res2[i], norm);
	    L_temp = L_mac(L_temp, gain, gain);
	}


	if (L_sub(L_temp, (int)2147483647l) == 0)
	{   
	    norm = add(norm, 1);
	    overfl = 1;
	}
    }
    while(
	overfl != 0);

    L_temp = L_add(L_temp, 1l);




    norm1 = norm_l(L_temp);
    gain = extract_h(L_shl(L_temp, norm1));
    L_temp = L_mult(gain, gain);
    L_temp = L_sub(805306368l, L_shr(L_temp, 3));
    L_temp = L_add(L_temp, L_mult(24576, gain));

    gain = extract_h(L_temp);

    if ((norm1 & 1) != 0)
    {   
	gain = mult_r(gain, 23170);
	norm1 = sub(norm1, 1);
    }


    gain = mult_r(gain, 10362);



    norm1 = shr(norm1, 1);
    norm1 = sub(norm1, norm);


    if (norm1 >= 0)
    {   
	c_gain = shr(gain, norm1);
    }
    else 
    {   
	c_gain = shl(gain, abs_s(norm1));
    }
}

#line 3527 "vocoderPam.cc"
Convolve::Convolve(unsigned int _idcnt, short int *(&x), short int *(&h), short int (&y)[40])
    : _specc::behavior(_idcnt), x(x), h(h), y(y)
{   
}

Convolve::~Convolve(void)
{   
}

#line 30 "src/closed_loop/convolve.sc"
void Convolve::main(void)
{   
    short int *p_y;

#line 3542 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 34 "src/closed_loop/convolve.sc"
    p_y =  &y[0];
    Convolut(x, h, p_y, 40);
}

#line 3550 "vocoderPam.cc"
Enc_Lag6::Enc_Lag6(unsigned int _idcnt, short int (&T0), short int (&T0_frac), short int (&T0_min), short int (&T0_max), int (&pit_flag), short int (&index))
    : _specc::behavior(_idcnt), T0(T0), T0_frac(T0_frac), T0_min(T0_min), T0_max(T0_max), pit_flag(pit_flag), index(index)
{   
}

Enc_Lag6::~Enc_Lag6(void)
{   
}

#line 55 "src/closed_loop/enc_lag6.sc"
void Enc_Lag6::main(void)
{   
    short int i;

#line 3565 "vocoderPam.cc"
    _specc::waitfor(50000ull);

#line 60 "src/closed_loop/enc_lag6.sc"
    if (pit_flag == 0)
    {   



	if (sub(T0, 94) <= 0)
	{   

	    i = add(add(T0, T0), T0);
	    index = add(sub(add(i, i), 105), T0_frac);
	}
	else  {
	    T0_frac = 0;
	    index = add(T0, 368);
	}



	T0_min = sub(T0, 5);

	if (sub(T0_min, 18) < 0)
	{   
	    T0_min = 18;
	}
	T0_max = add(T0_min, 9);

	if (sub(T0_max, 143) > 0)
	{   
	    T0_max = 143;
	    T0_min = sub(T0_max, 9);
	}
    }
    else 
    {   

	i = sub(T0, T0_min);
	i = add(add(i, i), i);
	index = add(add(add(i, i), 3), T0_frac);
    }
}

#line 3610 "vocoderPam.cc"
Find_Targetvec_Copy1::Find_Targetvec_Copy1(unsigned int _idcnt, short int (&res2b)[40], short int (&mem_err)[10], short int (&res2)[40], short int *(&p_exc_i), short int (&mem)[10])
    : _specc::behavior(_idcnt), res2b(res2b), mem_err(mem_err), res2(res2), p_exc_i(p_exc_i), mem(mem)
{   
}

Find_Targetvec_Copy1::~Find_Targetvec_Copy1(void)
{   
}

#line 20 "src/closed_loop/find_targetvec.sc"
void Find_Targetvec_Copy1::main(void)
{   

#line 3624 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 22 "src/closed_loop/find_targetvec.sc"
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<40;_scc_index_0++) (res2)[_scc_index_0] = (res2b)[_scc_index_0]; }
    Copy(res2b, (short int *)p_exc_i, 40);
    Copy(mem_err, (short int *)mem, 10);
}

#line 3633 "vocoderPam.cc"
Find_Targetvec_Copy2::Find_Targetvec_Copy2(unsigned int _idcnt, short int (&mem_err)[10], short int (&error)[40], short int (&mem_error)[50], short int *(&p_error))
    : _specc::behavior(_idcnt), mem_err(mem_err), error(error), mem_error(mem_error), p_error(p_error)
{   
}

Find_Targetvec_Copy2::~Find_Targetvec_Copy2(void)
{   
}

#line 36 "src/closed_loop/find_targetvec.sc"
void Find_Targetvec_Copy2::main(void)
{   

#line 3647 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 38 "src/closed_loop/find_targetvec.sc"
    p_error = mem_error + 10;
    Copy(mem_err, mem_error, 10);
    Copy(error, (short int *)p_error, 40);
}

#line 3656 "vocoderPam.cc"
Find_Targetvec::Find_Targetvec(unsigned int _idcnt, short int (&Aq)[11], short int (&Ap1)[11], short int (&Ap2)[11], short int *(&p_speech_i), short int (&res2)[40], short int *(&p_exc_i), short int (&xn)[40], short int (&mem_err)[10], short int (&mem_w0)[10], short int (&txdtx_ctrl), short int (&CN_excitation_gain))
    : _specc::behavior(_idcnt), Aq(Aq), Ap1(Ap1), Ap2(Ap2), p_speech_i(p_speech_i), res2(res2), p_exc_i(p_exc_i), xn(xn), mem_err(mem_err), mem_w0(mem_w0), txdtx_ctrl(txdtx_ctrl), CN_excitation_gain(CN_excitation_gain),
    _scc_const_port_0(false),
    _scc_const_port_1(false),
    compute_CN_excitation_gain(_IDcnt, res2b, CN_excitation_gain),
    copy1(_IDcnt, res2b, mem_err, res2, p_exc_i, mem),
    copy2(_IDcnt, mem_err, error, mem_error, p_error),
    residu_1(_IDcnt, Aq, p_speech_i, res2b),
    residu_2(_IDcnt, Ap1, p_error, xn2),
    syn_filt_1(_IDcnt, Aq, res2b, error, mem, _scc_const_port_0),
    syn_filt_2(_IDcnt, Ap2, xn2, xn, mem_w0, _scc_const_port_1)
{   
}

Find_Targetvec::~Find_Targetvec(void)
{   
}

#line 79 "src/closed_loop/find_targetvec.sc"
void Find_Targetvec::main(void)
{   

#line 3679 "vocoderPam.cc"
    { enum { _scc_state_0, _scc_state_residu_1, _scc_state_copy1, _scc_state_compute_CN_excitation_gain, _scc_state_syn_filt_1, _scc_state_copy2, _scc_state_residu_2, _scc_state_syn_filt_2 } _scc_next_state = _scc_state_residu_1; do switch(_scc_next_state) {

#line 83 "src/closed_loop/find_targetvec.sc"
	    case _scc_state_residu_1: { residu_1.main(); { _scc_next_state = _scc_state_copy1; break; } }


	    case _scc_state_copy1: { copy1.main(); if ((txdtx_ctrl & 1) == 0) { _scc_next_state = _scc_state_compute_CN_excitation_gain; break; }
		{ _scc_next_state = _scc_state_syn_filt_1; break; } }

#line 93 "src/closed_loop/find_targetvec.sc"
	    case _scc_state_compute_CN_excitation_gain: { compute_CN_excitation_gain.main(); { _scc_next_state = _scc_state_0; break; } }


	    case _scc_state_syn_filt_1: { syn_filt_1.main(); { _scc_next_state = _scc_state_copy2; break; } }

	    case _scc_state_copy2: { copy2.main(); { _scc_next_state = _scc_state_residu_2; break; } }

	    case _scc_state_residu_2: { residu_2.main(); { _scc_next_state = _scc_state_syn_filt_2; break; } }
	    case _scc_state_syn_filt_2: { syn_filt_2.main(); { _scc_next_state = _scc_state_0; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

#line 3702 "vocoderPam.cc"
G_Pitch::G_Pitch(unsigned int _idcnt, short int (&xn)[40], short int (&y1)[40], short int (&gain))
    : _specc::behavior(_idcnt), xn(xn), y1(y1), gain(gain)
{   
}

G_Pitch::~G_Pitch(void)
{   
}

#line 34 "src/closed_loop/g_pitch.sc"
void G_Pitch::main(void)
{   
    int i;
    short int g;
    short int exp_xy; short int exp_yy; short int xy; short int yy;
    int s;

    short int scaled_y1[80];

#line 3722 "vocoderPam.cc"
    _specc::waitfor(6333333ull);

#line 45 "src/closed_loop/g_pitch.sc"
    for(i = 0; i < 40; i++ )
    {   
	scaled_y1[i] = shr(y1[i], 2);
    }



    s = 0l;
    for(i = 0; i < 40; i++ )
    {   
	s = L_mac(s, y1[i], y1[i]);
    }

    if (L_sub(s, (int)2147483647l) != 0l)
    {   
	s = L_add(s, 1l);
	exp_yy = norm_l(s);
	yy = round(L_shl(s, exp_yy));
    }
    else 
    {   
	s = 1l;
	for(i = 0; i < 40; i++ )
	{   
	    s = L_mac(s, scaled_y1[i], scaled_y1[i]);
	}
	exp_yy = norm_l(s);
	yy = round(L_shl(s, exp_yy));
	exp_yy = sub(exp_yy, 4);
    }




    clear_overflow();

    s = 1l;
    for(i = 0; i < 40; i++ )
    {   

	clear_carry();

	s = L_macNs(s, xn[i], y1[i]);



	if (overflow())
	{   
	    break;
	}
    }



    if ( !overflow())
    {   
	exp_xy = norm_l(s);
	xy = round(L_shl(s, exp_xy));
    }
    else 
    {   
	s = 1l;
	for(i = 0; i < 40; i++ )
	{   
	    s = L_mac(s, xn[i], scaled_y1[i]);
	}
	exp_xy = norm_l(s);
	xy = round(L_shl(s, exp_xy));
	exp_xy = sub(exp_xy, 2);
    }



    i = sub(xy, 4);


    if (i < 0)
    {   

	gain = 0;
	return ;
    }



    xy = shr(xy, 1);
    g = div_s(xy, yy);

    i = add(exp_xy, 3 - 1);
    i = sub(i, exp_yy);

    g = shr(g, i);




    if (sub(g, 4915) > 0)
    {   
	g = 4915;
    }

    gain = g;
}

#line 3830 "vocoderPam.cc"
Imp_Resp_Init::Imp_Resp_Init(unsigned int _idcnt, bool (&reset_flag), short int (&zero)[10], short int (&ai_zero)[40])
    : _specc::behavior(_idcnt), reset_flag(reset_flag), zero(zero), ai_zero(ai_zero)
{   
}

Imp_Resp_Init::~Imp_Resp_Init(void)
{   
}

#line 19 "src/closed_loop/imp_resp.sc"
void Imp_Resp_Init::init(void)
{   
    Set_zero((short int *)zero, 10);
    Set_zero((short int *)ai_zero, 40);
}

#line 30 "src/closed_loop/imp_resp.sc"
void Imp_Resp_Init::main(void)
{   

#line 3851 "vocoderPam.cc"
    _specc::waitfor(166666ull);

#line 32 "src/closed_loop/imp_resp.sc"
    if (reset_flag) init();
}

#line 25 "src/closed_loop/imp_resp.sc"
void Imp_Resp_Init::reset(void)
{   
    init();
}

#line 3864 "vocoderPam.cc"
Imp_Resp_Seq1::Imp_Resp_Seq1(unsigned int _idcnt, short int (&Ap1)[11], short int (&ai_zero)[40])
    : _specc::behavior(_idcnt), Ap1(Ap1), ai_zero(ai_zero)
{   
}

Imp_Resp_Seq1::~Imp_Resp_Seq1(void)
{   
}

#line 42 "src/closed_loop/imp_resp.sc"
void Imp_Resp_Seq1::main(void)
{   

#line 3878 "vocoderPam.cc"
    _specc::waitfor(16666ull);

#line 44 "src/closed_loop/imp_resp.sc"
    Copy(Ap1, (short int *)ai_zero, (10 + 1));
}

#line 3885 "vocoderPam.cc"
Imp_Resp::Imp_Resp(unsigned int _idcnt, short int (&Aq)[11], short int (&Ap1)[11], short int (&Ap2)[11], short int (&h1)[40], short int (&txdtx_ctrl), bool (&reset_flag))
    : _specc::behavior(_idcnt), Aq(Aq), Ap1(Ap1), Ap2(Ap2), h1(h1), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag),
    _scc_const_port_0(false),
    _scc_const_port_1(false),
    init(_IDcnt, reset_flag, zero, ai_zero),
    seq1(_IDcnt, Ap1, ai_zero),
    syn_filt_1(_IDcnt, Aq, ai_zero, h1b, zero, _scc_const_port_0),
    syn_filt_2(_IDcnt, Ap2, h1b, h1, zero, _scc_const_port_1)
{   
}

Imp_Resp::~Imp_Resp(void)
{   
}

#line 79 "src/closed_loop/imp_resp.sc"
void Imp_Resp::main(void)
{   

#line 3905 "vocoderPam.cc"
    { enum { _scc_state_0, _scc_state_init, _scc_state_seq1, _scc_state_syn_filt_1, _scc_state_syn_filt_2 } _scc_next_state = _scc_state_init; do switch(_scc_next_state) {

#line 84 "src/closed_loop/imp_resp.sc"
	    case _scc_state_init: { init.main(); if ((txdtx_ctrl & 1) != 0) { _scc_next_state = _scc_state_seq1; break; }
		{ _scc_next_state = _scc_state_0; break; } }


	    case _scc_state_seq1: { seq1.main(); { _scc_next_state = _scc_state_syn_filt_1; break; } }

	    case _scc_state_syn_filt_1: { syn_filt_1.main(); { _scc_next_state = _scc_state_syn_filt_2; break; } }
	    case _scc_state_syn_filt_2: { syn_filt_2.main(); { _scc_next_state = _scc_state_0; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

#line 73 "src/closed_loop/imp_resp.sc"
void Imp_Resp::reset(void)
{   

#line 3924 "vocoderPam.cc"
    init.reset();
}

Par_Weight::Par_Weight(unsigned int _idcnt, short int (&A)[11], short int (&Ap1)[11], short int (&Ap2)[11])
    : _specc::behavior(_idcnt), A(A), Ap1(Ap1), Ap2(Ap2),
    weight_1(_IDcnt, A, F_gamma1, Ap1),
    weight_2(_IDcnt, A, F_gamma2, Ap2)
{   
}

Par_Weight::~Par_Weight(void)
{   
}

void Par_Weight::main(void)
{   
    weight_1.main();
    weight_2.main();
}

Pitch_Fr6::Pitch_Fr6(unsigned int _idcnt, short int *(&exc), short int (&xn)[40], short int *(&h1), short int (&t0_min), short int (&t0_max), int (&i_subfr), short int (&pit_frac), short int (&lag))
    : _specc::behavior(_idcnt), exc(exc), xn(xn), h1(h1), t0_min(t0_min), t0_max(t0_max), i_subfr(i_subfr), pit_frac(pit_frac), lag(lag)
{   
}

Pitch_Fr6::~Pitch_Fr6(void)
{   
}

#line 174 "src/closed_loop/pitch_fr6.sc"
short int Pitch_Fr6::Interpol_6(
    short int *x, 
    short int frac)

{   
    int i; int k;
    short int *x1; short int *x2;
    const short int *c1; const short int *c2;
    int s;




    const short int inter_6[25] = { 

      ((short int)29519),
      ((short int)28316),((short int)24906),((short int)19838),((short int)13896),((short int)7945),((short int)2755),
      ((short int)-1127),((short int)-3459),((short int)-4304),((short int)-3969),((short int)-2899),((short int)-1561),
      ((short int)-336),((short int)534),((short int)970),((short int)1023),((short int)823),((short int)516),
      ((short int)220),((short int)0),((short int)-131),((short int)-194),((short int)-215),((short int)0) };




    if (frac < 0)
    {   
	frac = add(frac, 6);
	x-- ;
    }
    x1 =  &x[0];
    x2 =  &x[1];
    c1 =  &inter_6[frac];
    c2 =  &inter_6[sub(6, frac)];

    s = 0;
    for(i = 0 , k = 0; i < 4; i++  , k += 6)
    {   
	s = L_mac(s, x1[ -i], c1[k]);
	s = L_mac(s, x2[i], c2[k]);
    }

    return round(s);
}

#line 62 "src/closed_loop/pitch_fr6.sc"
void Pitch_Fr6::Norm_Corr(short int NC_exc[], short int NC_xn[], short int NC_h[], 
    short int t_min, short int t_max, short int corr_norm[])
{   
    int i; int j; int k;
    short int corr__h; short int corr__l; short int norm__h; short int norm__l;
    int s;


    short int excf[80];
    short int h_fac; short int *s_excf; short int scaled_excf[80]; short int scaling;



    k =  -t_min;



    Convolut( &NC_exc[k], NC_h, excf, 40);



    for(j = 0; j < 40; j++ )
    {   
	scaled_excf[j] = shr(excf[j], 2);
    }



    s = 0;
    for(j = 0; j < 40; j++ )
    {   
	s = L_mac(s, excf[j], excf[j]);
    }

    if (L_sub(s, 67108864l) <= 0)
    {   
	s_excf = excf;
	h_fac = 15 - 12;
	scaling = 0;
    }
    else 
    {   

	s_excf = scaled_excf;
	h_fac = 15 - 12 - 2;
	scaling = 2;
    }



    for(i = t_min; i <= t_max; i++ )
    {   


	s = 0;
	for(j = 0; j < 40; j++ )
	{   
	    s = L_mac(s, s_excf[j], s_excf[j]);
	}

	s = Inv_sqrt(s);
	L_Extract(s,  &norm__h,  &norm__l);



	s = 0;
	for(j = 0; j < 40; j++ )
	{   
	    s = L_mac(s, NC_xn[j], s_excf[j]);
	}
	L_Extract(s,  &corr__h,  &corr__l);



	s = Mpy_32(corr__h, corr__l, norm__h, norm__l);

	corr_norm[i] = extract_h(L_shl(s, 16));

#line 144 "src/closed_loop/pitch_fr6.sc"
	if (i != t_max)
	{   
	    k-- ;
	    for(j = 40 - 1; j > 0; j-- )
	    {   
		s = L_mult(NC_exc[k], NC_h[j]);
		s = L_shl(s, h_fac);
		s_excf[j] = add(extract_h(s), s_excf[j - 1]);
	    }
	    s_excf[0] = shr(NC_exc[k], scaling);
	}
    }
    return ;
}

#line 223 "src/closed_loop/pitch_fr6.sc"
void Pitch_Fr6::main(void)
{   
    int i;
    short int l;
    short int t_max; short int t_min;
    short int frac; short int max;
    short int *corr;
    short int corr_int;
    short int corr_v[40];

#line 4105 "vocoderPam.cc"
    _specc::waitfor(139366666ull);

#line 235 "src/closed_loop/pitch_fr6.sc"
    t_min = sub(t0_min, 4);
    t_max = add(t0_max, 4);

    corr =  &corr_v[ -t_min];




    Norm_Corr(exc,  &xn[0], h1, t_min, t_max, corr);



    max = corr[t0_min];
    l = t0_min;

    for(i = t0_min + 1; i <= t0_max; i++ )
    {   

	if (sub(corr[i], max) >= 0)
	{   
	    max = corr[i];
	    l = i;
	}
    }




    if ((i_subfr == 0) && (sub(l, 94) > 0))
    {   
	pit_frac = 0;

	lag = l;
	return ;
    }



    max = Interpol_6( &corr[l],  -3);
    frac =  -3;

    for(i =  -2; i <= 3; i++ )
    {   
	corr_int = Interpol_6( &corr[l], i);

	if (sub(corr_int, max) > 0)
	{   
	    max = corr_int;
	    frac = i;
	}
    }




    if (sub(frac,  -3) == 0)
    {   
	frac = 3;
	l = sub(l, 1);
    }
    pit_frac = frac;


    lag = l;
}

#line 4175 "vocoderPam.cc"
Pred_Lt_6::Pred_Lt_6(unsigned int _idcnt, short int *(&exc), short int (&T0), short int (&frac))
    : _specc::behavior(_idcnt), exc(exc), T0(T0), frac(frac)
{   
}

Pred_Lt_6::~Pred_Lt_6(void)
{   
}

#line 37 "src/closed_loop/pred_lt_6.sc"
void Pred_Lt_6::main(void)
{   
    int i; int j; int k;
    short int f;
    short int *x0; short int *x1; short int *x2;
    const short int *c1; const short int *c2;
    int s;


    const short int inter_6[61] = { 
      ((short int)29443),
      ((short int)28346),((short int)25207),((short int)20449),((short int)14701),((short int)8693),((short int)3143),
      ((short int)-1352),((short int)-4402),((short int)-5865),((short int)-5850),((short int)-4673),((short int)-2783),
      ((short int)-672),((short int)1211),((short int)2536),((short int)3130),((short int)2991),((short int)2259),
      ((short int)1170),((short int)0),((short int)-1001),((short int)-1652),((short int)-1868),((short int)-1666),
      ((short int)-1147),((short int)-464),((short int)218),((short int)756),((short int)1060),((short int)1099),
      ((short int)904),((short int)550),((short int)135),((short int)-245),((short int)-514),((short int)-634),
      ((short int)-602),((short int)-451),((short int)-231),((short int)0),((short int)191),((short int)308),
      ((short int)340),((short int)296),((short int)198),((short int)78),((short int)-36),((short int)-120),
      ((short int)-163),((short int)-165),((short int)-132),((short int)-79),((short int)-19),((short int)34),
      ((short int)73),((short int)91),((short int)89),((short int)70),((short int)38),((short int)0) };

#line 4208 "vocoderPam.cc"
    _specc::waitfor(44733333ull);

#line 61 "src/closed_loop/pred_lt_6.sc"
    x0 =  &exc[ -T0];

    f = negate(frac);

    if (f < 0)
    {   
	f = add(f, 6);
	x0-- ;
    }
    for(j = 0; j < 40; j++ )
    {   
	x1 = x0++ ;
	x2 = x0;
	c1 =  &inter_6[f];
	c2 =  &inter_6[sub(6, f)];

	s = 0;
	for(i = 0 , k = 0; i < 10; i++  , k += 6)
	{   
	    s = L_mac(s, x1[ -i], c1[k]);
	    s = L_mac(s, x2[i], c2[k]);
	}

	exc[j] = round(s);
    }
}

#line 4239 "vocoderPam.cc"
Q_Gain_Pitch::Q_Gain_Pitch(unsigned int _idcnt, short int (&gain), short int (&index))
    : _specc::behavior(_idcnt), gain(gain), index(index)
{   
}

Q_Gain_Pitch::~Q_Gain_Pitch(void)
{   
}

#line 23 "src/closed_loop/q_gain_pitch.sc"
void Q_Gain_Pitch::main(void)
{   
    int i;
    short int err; short int err_min; short int gain_q14;




    const short int qua_gain_pitch[16] = { 

      ((short int)0),((short int)3277),((short int)6556),((short int)8192),((short int)9830),((short int)11469),((short int)12288),((short int)13107),
      ((short int)13926),((short int)14746),((short int)15565),((short int)16384),((short int)17203),((short int)18022),((short int)18842),((short int)19661) };

#line 4263 "vocoderPam.cc"
    _specc::waitfor(1100000ull);

#line 38 "src/closed_loop/q_gain_pitch.sc"
    gain_q14 = shl(gain, 2);

    err_min = abs_s(sub(gain_q14, qua_gain_pitch[0]));
    index = 0;

    for(i = 1; i < 16; i++ )
    {   
	err = abs_s(sub(gain_q14, qua_gain_pitch[i]));


	if (sub(err, err_min) < 0)
	{   
	    err_min = err;
	    index = i;
	}
    }

    gain = shr(qua_gain_pitch[index], 2);
}

#line 4287 "vocoderPam.cc"
Build_Code::Build_Code(unsigned int _idcnt, short int (&codvec)[10], short int (&sign)[40], short int (&cod)[40], short int (&h)[40], short int (&y)[40], short int (&indx)[10])
    : _specc::behavior(_idcnt), codvec(codvec), sign(sign), cod(cod), h(h), y(y), indx(indx)
{   
}

Build_Code::~Build_Code(void)
{   
}

#line 28 "src/codebook/build_code.sc"
void Build_Code::main(void)
{   
    int i; int k;
    short int _sign[10]; short int code[40]; short int index; short int indices[10]; short int j; short int track;
    int p0; int p1; int p2; int p3; int p4; int p5; int p6; int p7; int p8; int p9;
    int s;

#line 4305 "vocoderPam.cc"
    _specc::waitfor(1560000ull);

#line 35 "src/codebook/build_code.sc"
    for(i = 0; i < 40; i++ )
    {   
	code[i] = 0;
    }
    for(i = 0; i < 5; i++ )
    {   
	indices[i] =  -1;
    }

    for(k = 0; k < 10; k++ )
    {   

	i = codvec[k];

	j = sign[i];

	index = mult(i, 6554);

	track = sub(i, extract_l(L_shr(L_mult(index, 5), 1)));

	if (j > 0)
	{   
	    code[i] = add(code[i], 4096);
	    _sign[k] = 8192;
	}
	else 

	{   
	    code[i] = sub(code[i], 4096);
	    _sign[k] =  -8192;
	    index = add(index, 8);
	}


	if (indices[track] < 0)
	{   
	    indices[track] = index;
	}
	else 
	{   

	    if (((index ^ indices[track]) & 8) == 0)
	    {   



		if (sub(indices[track], index) <= 0)
		{   
		    indices[track + 5] = index;
		}
		else 
		{   
		    indices[track + 5] = indices[track];

		    indices[track] = index;
		}
	    }
	    else 
	    {   



		if (sub((indices[track] & 7), (index & 7)) <= 0)
		{   
		    indices[track + 5] = indices[track];

		    indices[track] = index;
		}
		else 
		{   
		    indices[track + 5] = index;
		}
	    }
	}
    }

    p0 =  -codvec[0];
    p1 =  -codvec[1];
    p2 =  -codvec[2];
    p3 =  -codvec[3];
    p4 =  -codvec[4];
    p5 =  -codvec[5];
    p6 =  -codvec[6];
    p7 =  -codvec[7];
    p8 =  -codvec[8];
    p9 =  -codvec[9];

    for(i = 0; i < 40; i++ )
    {   
	s = 0;
	if (p0 >= 0) s = L_mac(s, h[p0], _sign[0]);
	if (p1 >= 0) s = L_mac(s, h[p1], _sign[1]);
	if (p2 >= 0) s = L_mac(s, h[p2], _sign[2]);
	if (p3 >= 0) s = L_mac(s, h[p3], _sign[3]);
	if (p4 >= 0) s = L_mac(s, h[p4], _sign[4]);
	if (p5 >= 0) s = L_mac(s, h[p5], _sign[5]);
	if (p6 >= 0) s = L_mac(s, h[p6], _sign[6]);
	if (p7 >= 0) s = L_mac(s, h[p7], _sign[7]);
	if (p8 >= 0) s = L_mac(s, h[p8], _sign[8]);
	if (p9 >= 0) s = L_mac(s, h[p9], _sign[9]);
	p0++ ;
	p1++ ;
	p2++ ;
	p3++ ;
	p4++ ;
	p5++ ;
	p6++ ;
	p7++ ;
	p8++ ;
	p9++ ;
	y[i] = round(s);
    }


    for(i = 0; i < 10; i++ )
	indx[i] = indices[i];
    for(i = 0; i < 40; i++ )
	cod[i] = code[i];
}

#line 4429 "vocoderPam.cc"
Code_10i40_35bits::Code_10i40_35bits(unsigned int _idcnt, short int (&x)[40], short int (&cn)[40], short int (&h)[40], short int (&cod)[40], short int (&y)[40], short int (&prm)[10])
    : _specc::behavior(_idcnt), x(x), cn(cn), h(h), cod(cod), y(y), prm(prm),
    build_code(_IDcnt, codevec, sign, cod, h, y, indx),
    cor_h(_IDcnt, h, sign, rr),
    cor_h_x(_IDcnt, h, x, dn),
    q_p(_IDcnt, indx, prm),
    search_10i40(_IDcnt, dn2, rr, ipos, pos_max, codevec),
    set_sign(_IDcnt, dn, dn2, cn, sign, pos_max, ipos)
{   
}

Code_10i40_35bits::~Code_10i40_35bits(void)
{   
}

#line 45 "src/codebook/code_10i40_35bits.sc"
void Code_10i40_35bits::main(void)
{   
    cor_h_x.main();
    set_sign.main();
    cor_h.main();
    search_10i40.main();
    build_code.main();
    q_p.main();
}

#line 4456 "vocoderPam.cc"
Codebook_Seq1::Codebook_Seq1(unsigned int _idcnt, short int (&xn)[40], short int (&y1)[40], short int (&gain_pit), short int (&exc)[40], short int (&h1)[40], short int (&T0), short int (&res2)[40], short int (&xn2)[40], short int (&h1b)[40], short int (&res2b)[40])
    : _specc::behavior(_idcnt), xn(xn), y1(y1), gain_pit(gain_pit), exc(exc), h1(h1), T0(T0), res2(res2), xn2(xn2), h1b(h1b), res2b(res2b),
    filter_h(_IDcnt, T0, gain_pit, h1, h1b),
    upd_res(_IDcnt, res2, exc, gain_pit, res2b),
    upd_target(_IDcnt, xn, y1, gain_pit, xn2)
{   
}

Codebook_Seq1::~Codebook_Seq1(void)
{   
}

void Codebook_Seq1::main(void)
{   
    upd_target.main();
    upd_res.main();
    filter_h.main();
}

Codebook_Seq2::Codebook_Seq2(unsigned int _idcnt, short int (&T0), short int (&gain_pit), short int (&codeb)[40], short int (&xn2)[40], short int (&y2)[40], short int (&code)[40], short int (&gain_code))
    : _specc::behavior(_idcnt), T0(T0), gain_pit(gain_pit), codeb(codeb), xn2(xn2), y2(y2), code(code), gain_code(gain_code),
    filter_c(_IDcnt, T0, gain_pit, codeb, code),
    g_code(_IDcnt, xn2, y2, gain_code)
{   
}

Codebook_Seq2::~Codebook_Seq2(void)
{   
}

void Codebook_Seq2::main(void)
{   
    filter_c.main();
    g_code.main();
}

Cor_h::Cor_h(unsigned int _idcnt, short int (&h)[40], short int (&sign)[40], short int (&rr)[1600])
    : _specc::behavior(_idcnt), h(h), sign(sign), rr(rr)
{   
}

Cor_h::~Cor_h(void)
{   
}

#line 29 "src/codebook/cor_h.sc"
void Cor_h::main(void)
{   
    int dec; int i; int k; int l;
    short int h2[40]; short int j; short int tmp;
    int s;

#line 4509 "vocoderPam.cc"
    _specc::waitfor(58600000ull);

#line 36 "src/codebook/cor_h.sc"
    s = 2;
    for(i = 0; i < 40; i++ )
	s = L_mac(s, h[i], h[i]);

    j = sub(extract_h(s), 32767);

    if (j == 0)
    {   
	for(i = 0; i < 40; i++ )
	{   
	    h2[i] = shr(h[i], 1);
	}
    }
    else 
    {   
	s = L_shr(s, 1);
	k = extract_h(L_shl(Inv_sqrt(s), 7));
	k = mult(k, 32440);

	for(i = 0; i < 40; i++ )
	{   
	    h2[i] = round(L_shl(L_mult(h[i], k), 9));
	}
    }




    s = 0;
    i = 40 - 1;
    for(k = 0; k < 40; k++  , i-- )
    {   
	s = L_mac(s, h2[k], h2[k]);
	rr[i * 40 + i] = round(s);
    }

    for(dec = 1; dec < 40; dec++ )
    {   
	s = 0;
	l = 40 - 1;
	i = l - dec;
	for(k = 0; k < (40 - dec); k++  , i--  , l-- )
	{   
	    s = L_mac(s, h2[k], h2[k + dec]);
	    tmp = mult(round(s), mult(sign[i], sign[l]));
	    rr[l * 40 + i] = tmp;
	    rr[i * 40 + l] = tmp;
	}
    }
}

#line 4564 "vocoderPam.cc"
Cor_h_x::Cor_h_x(unsigned int _idcnt, short int (&h)[40], short int (&x)[40], short int (&dn)[40])
    : _specc::behavior(_idcnt), h(h), x(x), dn(dn)
{   
}

Cor_h_x::~Cor_h_x(void)
{   
}

#line 29 "src/codebook/cor_h_x.sc"
void Cor_h_x::main(void)
{   
    int i; int k;
    short int j;
    int max; int s; int tot; int y32[40];

#line 4581 "vocoderPam.cc"
    _specc::waitfor(18120000ull);

#line 37 "src/codebook/cor_h_x.sc"
    tot = 5;

    for(k = 0; k < 5; k++ )
    {   
	max = 0;
	for(i = k; i < 40; i += 5)
	{   
	    s = 0;
	    for(j = i; j < 40; j++ )
		s = L_mac(s, x[j], h[j - i]);

	    y32[i] = s;

	    s = L_abs(s);

	    if (L_sub(s, max) > (int)0l)
		max = s;
	}
	tot = L_add(tot, L_shr(max, 1));
    }

    j = sub(norm_l(tot), 2);

    for(i = 0; i < 40; i++ )
    {   
	dn[i] = round(L_shl(y32[i], j));
    }
}

#line 4614 "vocoderPam.cc"
Gain_Code::Gain_Code(unsigned int _idcnt, short int (&xn2)[40], short int (&y2)[40], short int (&gain))
    : _specc::behavior(_idcnt), xn2(xn2), y2(y2), gain(gain)
{   
}

Gain_Code::~Gain_Code(void)
{   
}

#line 22 "src/codebook/g_code.sc"
void Gain_Code::main(void)
{   
    int i;
    short int g;
    short int j;
    short int exp_xy; short int exp_yy; short int xy; short int yy;
    short int scal_y2[40];
    int s;

#line 4634 "vocoderPam.cc"
    _specc::waitfor(1230000ull);

#line 33 "src/codebook/g_code.sc"
    for(i = 0; i < 40; i++ )
    {   
	scal_y2[i] = shr(y2[i], 1);
    }



    s = 1l;
    for(i = 0; i < 40; i++ )
    {   
	s = L_mac(s, xn2[i], scal_y2[i]);
    }
    exp_xy = norm_l(s);
    xy = extract_h(L_shl(s, exp_xy));



    if (xy <= 0) {
	gain = ((short int)0);
	return ;
    }



    s = 0l;
    for(i = 0; i < 40; i++ )
    {   
	s = L_mac(s, scal_y2[i], scal_y2[i]);
    }
    exp_yy = norm_l(s);
    yy = extract_h(L_shl(s, exp_yy));



    xy = shr(xy, 1);
    g = div_s(xy, yy);


    j = add(exp_xy, 5);
    j = sub(j, exp_yy);

    gain = shr(g, j);
}

#line 4682 "vocoderPam.cc"
Pitch_Contr::Pitch_Contr(unsigned int _idcnt, short int (&x)[40], short int (&v)[40], short int (&gain_pit), short int (&y)[40])
    : _specc::behavior(_idcnt), x(x), v(v), gain_pit(gain_pit), y(y)
{   
}

Pitch_Contr::~Pitch_Contr(void)
{   
}

#line 24 "src/codebook/pitch_contr.sc"
void Pitch_Contr::main(void)
{   
    int i;
    int L_temp;
    short int temp_gain_pit;

#line 4699 "vocoderPam.cc"
    _specc::waitfor(410000ull);

#line 30 "src/codebook/pitch_contr.sc"
    temp_gain_pit = gain_pit;

    for(i = 0; i < 40; i++ )
    {   
	L_temp = L_mult(v[i], temp_gain_pit);
	L_temp = L_shl(L_temp, 3);
	y[i] = sub(x[i], extract_h(L_temp));
    }
}

#line 4713 "vocoderPam.cc"
Prefilter::Prefilter(unsigned int _idcnt, short int (&T0), short int (&gain_pit), short int (&x_in)[40], short int (&x_out)[40])
    : _specc::behavior(_idcnt), T0(T0), gain_pit(gain_pit), x_in(x_in), x_out(x_out)
{   
}

Prefilter::~Prefilter(void)
{   
}

#line 25 "src/codebook/prefilter.sc"
void Prefilter::main(void)
{   
    int i;
    short int temp;
    short int pit_sharp;
    short int x[40];
    short int temp_T0;
    short int temp_gain_pit;

#line 4733 "vocoderPam.cc"
    _specc::waitfor(480000ull);

#line 34 "src/codebook/prefilter.sc"
    temp_T0 = T0;
    temp_gain_pit = gain_pit;


    for(i = 0; i < 40; i++ )
    {   
	x[i] = x_in[i];
    }

    pit_sharp = shl(temp_gain_pit, 3);

    for(i = T0; i < 40; i++ )
    {   
	temp = mult(x[i - T0], pit_sharp);
	x[i] = add(x[i], temp);
    }

    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<40;_scc_index_0++) (x_out)[_scc_index_0] = (x)[_scc_index_0]; }
}

#line 4757 "vocoderPam.cc"
Q_p::Q_p(unsigned int _idcnt, short int (&indi)[10], short int (&indo)[10])
    : _specc::behavior(_idcnt), indi(indi), indo(indo)
{   
}

Q_p::~Q_p(void)
{   
}

#line 17 "src/codebook/q_p.sc"
void Q_p::main(void)
{   
    static const short int gray[8] = { ((short int)0),((short int)1),((short int)3),((short int)2),((short int)6),((short int)4),((short int)5),((short int)7) };
    short int tmp;
    int i;

#line 4774 "vocoderPam.cc"
    _specc::waitfor(310000ull);

#line 23 "src/codebook/q_p.sc"
    for(i = 0; i < 10; i++ )
    {   
	tmp = indi[i];

	if (i < 5)
	{   
	    tmp = (tmp & 8) | gray[tmp & 7];
	}
	else 

	{   
	    tmp = gray[tmp & 7];
	}

	indo[i] = tmp;
    }
}

#line 4796 "vocoderPam.cc"
Search_10i40::Search_10i40(unsigned int _idcnt, short int (&dn)[40], short int (&rr)[1600], short int (&ipos)[10], short int (&pos_max)[5], short int (&codvec)[10])
    : _specc::behavior(_idcnt), dn(dn), rr(rr), ipos(ipos), pos_max(pos_max), codvec(codvec)
{   
}

Search_10i40::~Search_10i40(void)
{   
}

#line 38 "src/codebook/search_10i40.sc"
void Search_10i40::main(void)
{   
    short int i0; short int i1;
    int i2; int i3; int i4; int i5; int i6; int i7; int i8; int i9;
    int i; int j; int k;
    short int ia; short int ib; short int pos;
    short int ps; short int ps0; short int ps1; short int ps2; short int psk; short int sq; short int sq2;
    short int alp; short int alp_16; short int alpk;
    short int rrv[40];
    int alp0; int alp1; int alp2; int s;
    short int my_ipos[10];

#line 4819 "vocoderPam.cc"
    _specc::waitfor(151470000ull);

#line 51 "src/codebook/search_10i40.sc"
    for(i = 0; i < 10; i++ ) {
	my_ipos[i] = ipos[i];
    }



    i0 = pos_max[my_ipos[0]];

#line 64 "src/codebook/search_10i40.sc"
    psk =  -1;
    alpk = 1;
    for(i = 0; i < 10; i++ )
    {   
	codvec[i] = i;
    }

    for(i = 1; i < 5; i++ )
    {   
	i1 = pos_max[my_ipos[1]];
	ps0 = add(dn[i0], dn[i1]);
	alp0 = L_mult(rr[i0 * 40 + i0], (short int)(32768l / 16));
	alp0 = L_mac(alp0, rr[i1 * 40 + i1], (short int)(32768l / 16));
	alp0 = L_mac(alp0, rr[i0 * 40 + i1], (short int)(32768l / 8));

#line 89 "src/codebook/search_10i40.sc"
	for(i3 = my_ipos[3]; i3 < 40; i3 += 5)
	{   
	    s = L_mult(rr[i3 * 40 + i3], (short int)(32768l / 8));
	    s = L_mac(s, rr[i0 * 40 + i3], (short int)(32768l / 4));
	    s = L_mac(s, rr[i1 * 40 + i3], (short int)(32768l / 4));
	    rrv[i3] = round(s);
	}


	sq =  -1;
	alp = 1;
	ps = 0;
	ia = my_ipos[2];
	ib = my_ipos[3];

#line 110 "src/codebook/search_10i40.sc"
	for(i2 = my_ipos[2]; i2 < 40; i2 += 5)
	{   

	    ps1 = add(ps0, dn[i2]);


	    alp1 = L_mac(alp0, rr[i2 * 40 + i2], (short int)(32768l / 16));

	    alp1 = L_mac(alp1, rr[i0 * 40 + i2], (short int)(32768l / 8));

	    alp1 = L_mac(alp1, rr[i1 * 40 + i2], (short int)(32768l / 8));

#line 127 "src/codebook/search_10i40.sc"
	    for(i3 = my_ipos[3]; i3 < 40; i3 += 5)
	    {   

		ps2 = add(ps1, dn[i3]);


		alp2 = L_mac(alp1, rrv[i3], (short int)(32768l / 2));

		alp2 = L_mac(alp2, rr[i2 * 40 + i3], (short int)(32768l / 8));

		sq2 = mult(ps2, ps2);

		alp_16 = round(alp2);

		s = L_msu(L_mult(alp, sq2), sq, alp_16);

		if (s > 0)
		{   
		    sq = sq2;
		    ps = ps2;
		    alp = alp_16;
		    ia = i2;
		    ib = i3;
		}
	    }
	}
	i2 = ia;
	i3 = ib;

#line 160 "src/codebook/search_10i40.sc"
	ps0 = ps;
	alp0 = L_mult(alp, (short int)(32768l / 2));




	for(i5 = my_ipos[5]; i5 < 40; i5 += 5)
	{   
	    s = L_mult(rr[i5 * 40 + i5], (short int)(32768l / 8));
	    s = L_mac(s, rr[i0 * 40 + i5], (short int)(32768l / 4));
	    s = L_mac(s, rr[i1 * 40 + i5], (short int)(32768l / 4));
	    s = L_mac(s, rr[i2 * 40 + i5], (short int)(32768l / 4));
	    s = L_mac(s, rr[i3 * 40 + i5], (short int)(32768l / 4));
	    rrv[i5] = round(s);
	}


	sq =  -1;
	alp = 1;
	ps = 0;
	ia = my_ipos[4];
	ib = my_ipos[5];




	for(i4 = my_ipos[4]; i4 < 40; i4 += 5)
	{   
	    ps1 = add(ps0, dn[i4]);

	    alp1 = L_mac(alp0, rr[i4 * 40 + i4], (short int)(32768l / 32));
	    alp1 = L_mac(alp1, rr[i0 * 40 + i4], (short int)(32768l / 16));
	    alp1 = L_mac(alp1, rr[i1 * 40 + i4], (short int)(32768l / 16));
	    alp1 = L_mac(alp1, rr[i2 * 40 + i4], (short int)(32768l / 16));
	    alp1 = L_mac(alp1, rr[i3 * 40 + i4], (short int)(32768l / 16));




	    for(i5 = my_ipos[5]; i5 < 40; i5 += 5)
	    {   
		ps2 = add(ps1, dn[i5]);

		alp2 = L_mac(alp1, rrv[i5], (short int)(32768l / 4));
		alp2 = L_mac(alp2, rr[i4 * 40 + i5], (short int)(32768l / 16));

		sq2 = mult(ps2, ps2);

		alp_16 = round(alp2);

		s = L_msu(L_mult(alp, sq2), sq, alp_16);


		if (s > 0)
		{   
		    sq = sq2;
		    ps = ps2;
		    alp = alp_16;
		    ia = i4;
		    ib = i5;
		}
	    }
	}
	i4 = ia;
	i5 = ib;

#line 230 "src/codebook/search_10i40.sc"
	ps0 = ps;
	alp0 = L_mult(alp, (short int)(32768l / 2));

#line 237 "src/codebook/search_10i40.sc"
	for(i7 = my_ipos[7]; i7 < 40; i7 += 5)
	{   
	    s = L_mult(rr[i7 * 40 + i7], (short int)(32768l / 16));
	    s = L_mac(s, rr[i0 * 40 + i7], (short int)(32768l / 8));
	    s = L_mac(s, rr[i1 * 40 + i7], (short int)(32768l / 8));
	    s = L_mac(s, rr[i2 * 40 + i7], (short int)(32768l / 8));
	    s = L_mac(s, rr[i3 * 40 + i7], (short int)(32768l / 8));
	    s = L_mac(s, rr[i4 * 40 + i7], (short int)(32768l / 8));
	    s = L_mac(s, rr[i5 * 40 + i7], (short int)(32768l / 8));
	    rrv[i7] = round(s);
	}


	sq =  -1;
	alp = 1;
	ps = 0;
	ia = my_ipos[6];
	ib = my_ipos[7];



	for(i6 = my_ipos[6]; i6 < 40; i6 += 5)
	{   
	    ps1 = add(ps0, dn[i6]);

	    alp1 = L_mac(alp0, rr[i6 * 40 + i6], (short int)(32768l / 64));
	    alp1 = L_mac(alp1, rr[i0 * 40 + i6], (short int)(32768l / 32));
	    alp1 = L_mac(alp1, rr[i1 * 40 + i6], (short int)(32768l / 32));
	    alp1 = L_mac(alp1, rr[i2 * 40 + i6], (short int)(32768l / 32));
	    alp1 = L_mac(alp1, rr[i3 * 40 + i6], (short int)(32768l / 32));
	    alp1 = L_mac(alp1, rr[i4 * 40 + i6], (short int)(32768l / 32));
	    alp1 = L_mac(alp1, rr[i5 * 40 + i6], (short int)(32768l / 32));




	    for(i7 = my_ipos[7]; i7 < 40; i7 += 5)
	    {   
		ps2 = add(ps1, dn[i7]);

		alp2 = L_mac(alp1, rrv[i7], (short int)(32768l / 4));
		alp2 = L_mac(alp2, rr[i6 * 40 + i7], (short int)(32768l / 32));

		sq2 = mult(ps2, ps2);

		alp_16 = round(alp2);

		s = L_msu(L_mult(alp, sq2), sq, alp_16);


		if (s > 0)
		{   
		    sq = sq2;
		    ps = ps2;
		    alp = alp_16;
		    ia = i6;
		    ib = i7;
		}
	    }
	}
	i6 = ia;
	i7 = ib;

#line 304 "src/codebook/search_10i40.sc"
	ps0 = ps;
	alp0 = L_mult(alp, (short int)(32768l / 2));

#line 311 "src/codebook/search_10i40.sc"
	for(i9 = my_ipos[9]; i9 < 40; i9 += 5)
	{   
	    s = L_mult(rr[i9 * 40 + i9], (short int)(32768l / 16));
	    s = L_mac(s, rr[i0 * 40 + i9], (short int)(32768l / 8));
	    s = L_mac(s, rr[i1 * 40 + i9], (short int)(32768l / 8));
	    s = L_mac(s, rr[i2 * 40 + i9], (short int)(32768l / 8));
	    s = L_mac(s, rr[i3 * 40 + i9], (short int)(32768l / 8));
	    s = L_mac(s, rr[i4 * 40 + i9], (short int)(32768l / 8));
	    s = L_mac(s, rr[i5 * 40 + i9], (short int)(32768l / 8));
	    s = L_mac(s, rr[i6 * 40 + i9], (short int)(32768l / 8));
	    s = L_mac(s, rr[i7 * 40 + i9], (short int)(32768l / 8));
	    rrv[i9] = round(s);
	}


	sq =  -1;
	alp = 1;
	ps = 0;
	ia = my_ipos[8];
	ib = my_ipos[9];


	for(i8 = my_ipos[8]; i8 < 40; i8 += 5)
	{   
	    ps1 = add(ps0, dn[i8]);

	    alp1 = L_mac(alp0, rr[i8 * 40 + i8], (short int)(32768l / 128));
	    alp1 = L_mac(alp1, rr[i0 * 40 + i8], (short int)(32768l / 64));
	    alp1 = L_mac(alp1, rr[i1 * 40 + i8], (short int)(32768l / 64));
	    alp1 = L_mac(alp1, rr[i2 * 40 + i8], (short int)(32768l / 64));
	    alp1 = L_mac(alp1, rr[i3 * 40 + i8], (short int)(32768l / 64));
	    alp1 = L_mac(alp1, rr[i4 * 40 + i8], (short int)(32768l / 64));
	    alp1 = L_mac(alp1, rr[i5 * 40 + i8], (short int)(32768l / 64));
	    alp1 = L_mac(alp1, rr[i6 * 40 + i8], (short int)(32768l / 64));
	    alp1 = L_mac(alp1, rr[i7 * 40 + i8], (short int)(32768l / 64));




	    for(i9 = my_ipos[9]; i9 < 40; i9 += 5)
	    {   
		ps2 = add(ps1, dn[i9]);

		alp2 = L_mac(alp1, rrv[i9], (short int)(32768l / 8));
		alp2 = L_mac(alp2, rr[i8 * 40 + i9], (short int)(32768l / 64));

		sq2 = mult(ps2, ps2);

		alp_16 = round(alp2);

		s = L_msu(L_mult(alp, sq2), sq, alp_16);


		if (s > 0)
		{   
		    sq = sq2;
		    ps = ps2;
		    alp = alp_16;
		    ia = i8;
		    ib = i9;
		}
	    }
	}

#line 379 "src/codebook/search_10i40.sc"
	s = L_msu(L_mult(alpk, sq), psk, alp);


	if (s > 0)
	{   
	    psk = sq;
	    alpk = alp;
	    codvec[0] = i0;
	    codvec[1] = i1;
	    codvec[2] = i2;
	    codvec[3] = i3;
	    codvec[4] = i4;
	    codvec[5] = i5;
	    codvec[6] = i6;
	    codvec[7] = i7;
	    codvec[8] = ia;
	    codvec[9] = ib;
	}




	pos = my_ipos[1];
	for(j = 1 , k = 2; k < 10; j++  , k++ )
	{   
	    my_ipos[j] = my_ipos[k];
	}
	my_ipos[10 - 1] = pos;
    }
}

#line 5142 "vocoderPam.cc"
Set_Sign::Set_Sign(unsigned int _idcnt, short int (&dn)[40], short int (&dn2)[40], short int (&cn)[40], short int (&sign)[40], short int (&pos_max)[5], short int (&ipos)[10])
    : _specc::behavior(_idcnt), dn(dn), dn2(dn2), cn(cn), sign(sign), pos_max(pos_max), ipos(ipos)
{   
}

Set_Sign::~Set_Sign(void)
{   
}

#line 40 "src/codebook/set_sign.sc"
void Set_Sign::main(void)
{   
    int i; int j;
    short int cor; short int ipos0; short int k_cn; short int k_dn; short int max; short int max_of_all; short int pos; short int val;
    short int en[40];
    int s;

#line 5160 "vocoderPam.cc"
    _specc::waitfor(2230000ull);

#line 49 "src/codebook/set_sign.sc"
    s = 256;
    for(i = 0; i < 40; i++ )
    {   
	s = L_mac(s, cn[i], cn[i]);
    }
    s = Inv_sqrt(s);
    k_cn = extract_h(L_shl(s, 5));

    s = 256;
    for(i = 0; i < 40; i++ )
    {   
	s = L_mac(s, dn[i], dn[i]);
    }
    s = Inv_sqrt(s);
    k_dn = extract_h(L_shl(s, 5));

    for(i = 0; i < 40; i++ )
    {   
	val = dn[i];
	cor = round(L_shl(L_mac(L_mult(k_cn, cn[i]), k_dn, val), 10));


	if (cor >= 0)
	{   
	    sign[i] = 32767;
	}
	else 
	{   
	    sign[i] =  -32767;
	    cor = negate(cor);
	    val = negate(val);
	}

	dn2[i] = val;
	en[i] = cor;
    }

    max_of_all =  -1;
    for(i = 0; i < 5; i++ )
    {   
	max =  -1;

	for(j = i; j < 40; j += 5)
	{   
	    cor = en[j];
	    val = sub(cor, max);

	    if (val > 0)
	    {   
		max = cor;
		pos = j;
	    }
	}

	pos_max[i] = pos;
	val = sub(max, max_of_all);

	if (val > 0)
	{   
	    max_of_all = max;

	    ipos0 = i;
	}
    }

#line 118 "src/codebook/set_sign.sc"
    pos = ipos0;
    ipos[0] = ipos0;
    ipos[5] = ipos0;

    for(i = 1; i < 5; i++ )
    {   
	pos = add(pos, 1);
	if (sub(pos, 5) >= 0)
	{   
	    pos = 0;
	}
	ipos[i] = pos;
	ipos[i + 5] = pos;
    }
}

#line 5246 "vocoderPam.cc"
Nop::Nop(unsigned int _idcnt)
    : _specc::behavior(_idcnt)
{   
}

Nop::~Nop(void)
{   
}

#line 13 "src/common/copy.sc"
void Nop::main(void)
{   

#line 5260 "vocoderPam.cc"
    _specc::waitfor(0ull);
}

CopySubfr::CopySubfr(unsigned int _idcnt, short int (&x)[40], short int (&y)[40])
    : _specc::behavior(_idcnt), x(x), y(y)
{   
}

CopySubfr::~CopySubfr(void)
{   
}

#line 23 "src/common/copy.sc"
void CopySubfr::main(void)
{   

#line 5277 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 25 "src/common/copy.sc"
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<40;_scc_index_0++) (y)[_scc_index_0] = (x)[_scc_index_0]; }
}

#line 5284 "vocoderPam.cc"
Residu::Residu(unsigned int _idcnt, short int (&a)[11], short int *(&x), short int (&y)[40])
    : _specc::behavior(_idcnt), a(a), x(x), y(y)
{   
}

Residu::~Residu(void)
{   
}

#line 27 "src/common/residu.sc"
void Residu::main(void)
{   
    int i; int j;
    int s;

#line 5300 "vocoderPam.cc"
    _specc::waitfor(31366666ull);

#line 32 "src/common/residu.sc"
    for(i = 0; i < 40; i++ )
    {   
	s = L_mult(x[i], a[0]);
	for(j = 1; j <= 10; j++ )
	{   
	    s = L_mac(s, a[j], x[i - j]);
	}
	s = L_shl(s, 3);
	y[i] = round(s);
    }
}

#line 5316 "vocoderPam.cc"
Syn_Filt::Syn_Filt(unsigned int _idcnt, short int (&a)[11], short int (&x)[40], short int (&y)[40], short int (&mem)[10], bool (&update))
    : _specc::behavior(_idcnt), a(a), x(x), y(y), mem(mem), update(update)
{   
}

Syn_Filt::~Syn_Filt(void)
{   
}

#line 27 "src/common/syn_filt.sc"
void Syn_Filt::main(void)
{   
    int i; int j;
    int s;
    short int tmp[80];
    short int *yy;

#line 5334 "vocoderPam.cc"
    _specc::waitfor(34833333ull);

#line 36 "src/common/syn_filt.sc"
    yy = tmp;

    for(i = 0; i < 10; i++ )
    {   
	 *yy++  = mem[i];
    }



    for(i = 0; i < 40; i++ )
    {   
	s = L_mult(x[i], a[0]);
	for(j = 1; j <= 10; j++ )
	{   
	    s = L_msu(s, a[j], yy[ -j]);
	}
	s = L_shl(s, 3);
	 *yy++  = round(s);
    }

    for(i = 0; i < 40; i++ )
    {   
	y[i] = tmp[i + 10];
    }




    if (update != 0)
    {   
	for(i = 0; i < 10; i++ )
	{   
	    mem[i] = tmp[40 + i];
	}
    }
}

#line 5375 "vocoderPam.cc"
Weight_Ai::Weight_Ai(unsigned int _idcnt, short int (&a)[11], short int (&fac)[10], short int (&a_exp)[11])
    : _specc::behavior(_idcnt), a(a), fac(fac), a_exp(a_exp)
{   
}

Weight_Ai::~Weight_Ai(void)
{   
}

#line 24 "src/common/weight_ai.sc"
void Weight_Ai::main(void)
{   
    int i;

#line 5390 "vocoderPam.cc"
    _specc::waitfor(716666ull);

#line 28 "src/common/weight_ai.sc"
    a_exp[0] = a[0];
    for(i = 1; i <= 10; i++ )
    {   
	a_exp[i] = round(L_mult(a[i], fac[i - 1]));
    }
}

#line 5401 "vocoderPam.cc"
Autocorr::Autocorr(unsigned int _idcnt, short int *(&x), short int (&wind)[240], short int (&r_h)[11], short int (&r_l)[11], short int (&norm))
    : _specc::behavior(_idcnt), x(x), wind(wind), r_h(r_h), r_l(r_l), norm(norm)
{   
}

Autocorr::~Autocorr(void)
{   
}

#line 31 "src/lp_analysis/autocorr.sc"
void Autocorr::main(void)
{   
    int i; int j;
    short int n;
    short int y[240];
    int sum;
    bool overfl;
    short int overfl_shft;

#line 5421 "vocoderPam.cc"
    _specc::waitfor(220816666ull);

#line 42 "src/lp_analysis/autocorr.sc"
    for(i = 0; i < 240; i++ )
    {   
	y[i] = mult_r(x[i], wind[i]);
    }



    overfl_shft = 0;

    do 
    {   
	overfl = 0;
	sum = 0l;

	for(i = 0; i < 240; i++ )
	{   
	    sum = L_mac(sum, y[i], y[i]);
	}




	if (L_sub(sum, (int)2147483647l) == 0l)
	{   
	    overfl_shft = add(overfl_shft, 4);
	    overfl = 1;

	    for(i = 0; i < 240; i++ )
	    {   
		y[i] = shr(y[i], 2);
	    }
	}
    }
    while(
	overfl != 0);

    sum = L_add(sum, 1l);



    n = norm_l(sum);
    sum = L_shl(sum, n);
    L_Extract(sum,  &r_h[0],  &r_l[0]);



    for(i = 1; i <= 10; i++ )
    {   
	sum = 0;

	for(j = 0; j < 240 - i; j++ )
	{   
	    sum = L_mac(sum, y[j], y[j + i]);
	}

	sum = L_shl(sum, n);
	L_Extract(sum,  &r_h[i],  &r_l[i]);
    }

    norm = sub(n, overfl_shft);
}

#line 5487 "vocoderPam.cc"
Az_Lsp::Az_Lsp(unsigned int _idcnt, short int (&a)[11], short int (&lsp)[10], short int (&old_lsp)[10])
    : _specc::behavior(_idcnt), a(a), lsp(lsp), old_lsp(old_lsp)
{   
}

Az_Lsp::~Az_Lsp(void)
{   
}

#line 65 "src/lp_analysis/az_lsp.sc"
short int Az_Lsp::Chebps(short int x, short int f[], short int n)
{   
    int i;
    short int cheb;
    short int b0_h; short int b0_l; short int b1_h; short int b1_l; short int b2_h; short int b2_l;
    int t0;

    b2_h = 256;
    b2_l = 0;

    t0 = L_mult(x, 512);
    t0 = L_mac(t0, f[1], 8192);
    L_Extract(t0,  &b1_h,  &b1_l);

    for(i = 2; i < n; i++ )
    {   
	t0 = Mpy_32_16(b1_h, b1_l, x);
	t0 = L_shl(t0, 1);
	t0 = L_mac(t0, b2_h, (short int)32768);
	t0 = L_msu(t0, b2_l, 1);
	t0 = L_mac(t0, f[i], 8192);

	L_Extract(t0,  &b0_h,  &b0_l);

	b2_l = b1_l;
	b2_h = b1_h;
	b1_l = b0_l;
	b1_h = b0_h;
    }

    t0 = Mpy_32_16(b1_h, b1_l, x);
    t0 = L_mac(t0, b2_h, (short int)32768);
    t0 = L_msu(t0, b2_l, 1);
    t0 = L_mac(t0, f[i], 4096);

    t0 = L_shl(t0, 6);

    cheb = extract_h(t0);

    return (cheb);
}


void Az_Lsp::main(void)
{   
    int i; int j;
    int ip; int nf;
    short int xhigh; short int xint; short int xlow; short int xmid; short int yhigh; short int ylow; short int ymid;
    short int exp; short int sign; short int x; short int y;
    short int *coef;
    short int f1[6]; short int f2[6];
    int t0;

#line 128 "src/lp_analysis/az_lsp.sc"
    const short int grid[61] = { 

      ((short int)32760),((short int)32723),((short int)32588),((short int)32364),((short int)32051),((short int)31651),
      ((short int)31164),((short int)30591),((short int)29935),((short int)29196),((short int)28377),((short int)27481),
      ((short int)26509),((short int)25465),((short int)24351),((short int)23170),((short int)21926),((short int)20621),
      ((short int)19260),((short int)17846),((short int)16384),((short int)14876),((short int)13327),((short int)11743),
      ((short int)10125),((short int)8480),((short int)6812),((short int)5126),((short int)3425),((short int)1714),
      ((short int)0),((short int)-1714),((short int)-3425),((short int)-5126),((short int)-6812),((short int)-8480),
      ((short int)-10125),((short int)-11743),((short int)-13327),((short int)-14876),((short int)-16384),((short int)-17846),
      ((short int)-19260),((short int)-20621),((short int)-21926),((short int)-23170),((short int)-24351),((short int)-25465),
      ((short int)-26509),((short int)-27481),((short int)-28377),((short int)-29196),((short int)-29935),((short int)-30591),
      ((short int)-31164),((short int)-31651),((short int)-32051),((short int)-32364),((short int)-32588),((short int)-32723),
      ((short int)-32760) };

#line 5566 "vocoderPam.cc"
    _specc::waitfor(154333333ull);

#line 158 "src/lp_analysis/az_lsp.sc"
    f1[0] = 1024;
    f2[0] = 1024;

    for(i = 0; i < 10 / 2; i++ )
    {   
	t0 = L_mult(a[i + 1], 8192);
	t0 = L_mac(t0, a[10 - i], 8192);
	x = extract_h(t0);

	f1[i + 1] = sub(x, f1[i]);

	t0 = L_mult(a[i + 1], 8192);
	t0 = L_msu(t0, a[10 - i], 8192);
	x = extract_h(t0);

	f2[i + 1] = add(x, f2[i]);
    }

#line 180 "src/lp_analysis/az_lsp.sc"
    nf = 0;
    ip = 0;

    coef = f1;

    xlow = grid[0];
    ylow = Chebps(xlow, coef, 10 / 2);

    j = 0;


    while((sub(nf, 10) < 0) && (sub(j, 60) < 0))
    {   
	j++ ;
	xhigh = xlow;
	yhigh = ylow;
	xlow = grid[j];
	ylow = Chebps(xlow, coef, 10 / 2);



	if (L_mult(ylow, yhigh) <= (int)0l)
	{   



	    for(i = 0; i < 4; i++ )
	    {   

		xmid = add(shr(xlow, 1), shr(xhigh, 1));
		ymid = Chebps(xmid, coef, 10 / 2);



		if (L_mult(ylow, ymid) <= (int)0l)
		{   
		    yhigh = ymid;
		    xhigh = xmid;
		}
		else 
		{   
		    ylow = ymid;
		    xlow = xmid;
		}
	    }

#line 231 "src/lp_analysis/az_lsp.sc"
	    x = sub(xhigh, xlow);
	    y = sub(yhigh, ylow);


	    if (y == 0)
	    {   
		xint = xlow;
	    }
	    else 
	    {   
		sign = y;
		y = abs_s(y);
		exp = norm_s(y);
		y = shl(y, exp);
		y = div_s((short int)16383, y);
		t0 = L_mult(x, y);
		t0 = L_shr(t0, sub(20, exp));
		y = extract_l(t0);


		if (sign < 0)
		    y = negate(y);

		t0 = L_mult(ylow, y);
		t0 = L_shr(t0, 11);
		xint = sub(xlow, extract_l(t0));
	    }

	    lsp[nf] = xint;
	    xlow = xint;
	    nf++ ;


	    if (ip == 0)
	    {   
		ip = 1;
		coef = f2;
	    }
	    else 
	    {   
		ip = 0;
		coef = f1;
	    }
	    ylow = Chebps(xlow, coef, 10 / 2);
	}
    }

#line 284 "src/lp_analysis/az_lsp.sc"
    if (sub(nf, 10) < 0)
    {   
	for(i = 0; i < 10; i++ )
	{   
	    lsp[i] = old_lsp[i];
	}
    }
}

#line 5693 "vocoderPam.cc"
Find_Az::Find_Az(unsigned int _idcnt, short int *(&x), short int (&wind)[240], short int (&r_h)[11], short int (&r_l)[11], short int (&old_A)[11], short int (&scal_fac), short int (&A_t)[11], short int (&rc)[4])
    : _specc::behavior(_idcnt), x(x), wind(wind), r_h(r_h), r_l(r_l), old_A(old_A), scal_fac(scal_fac), A_t(A_t), rc(rc),
    autocorr(_IDcnt, x, wind, r_h, r_l, scal_fac),
    lag_window(_IDcnt, r_h, r_l),
    levinson(_IDcnt, r_h, r_l, old_A, A_t, rc)
{   
}

Find_Az::~Find_Az(void)
{   
}

#line 26 "src/lp_analysis/find_az.sc"
void Find_Az::main(void)
{   
    autocorr.main();
    lag_window.main();
    levinson.main();
}

#line 5714 "vocoderPam.cc"
Int_Lpc::Int_Lpc(unsigned int _idcnt, short int (&lsp_old)[10], short int (&lsp_mid)[10], short int (&lsp_new)[10], short int (&A)[4][11])
    : _specc::behavior(_idcnt), lsp_old(lsp_old), lsp_mid(lsp_mid), lsp_new(lsp_new), A(A)
{   
}

Int_Lpc::~Int_Lpc(void)
{   
}

#line 42 "src/lp_analysis/int_lpc.sc"
void Int_Lpc::main(void)
{   
    int i;
    short int lsp[10];

#line 5730 "vocoderPam.cc"
    _specc::waitfor(1066666ull);

#line 49 "src/lp_analysis/int_lpc.sc"
    for(i = 0; i < 10; i++ )
    {   
	lsp[i] = add(shr(lsp_mid[i], 1), shr(lsp_old[i], 1));
    }


    Lsp_Az(lsp, (short int *)(A[0]));
    Lsp_Az(lsp_mid, (short int *)(A[1]));

    for(i = 0; i < 10; i++ )
    {   
	lsp[i] = add(shr(lsp_mid[i], 1), shr(lsp_new[i], 1));
    }


    Lsp_Az(lsp, (short int *)(A[2]));
    Lsp_Az(lsp_new, (short int *)(A[3]));
}

#line 5753 "vocoderPam.cc"
Int_Lpc2::Int_Lpc2(unsigned int _idcnt, short int (&lsp_old)[10], short int (&lsp_mid)[10], short int (&lsp_new)[10], short int (&A)[4][11])
    : _specc::behavior(_idcnt), lsp_old(lsp_old), lsp_mid(lsp_mid), lsp_new(lsp_new), A(A)
{   
}

Int_Lpc2::~Int_Lpc2(void)
{   
}

#line 90 "src/lp_analysis/int_lpc.sc"
void Int_Lpc2::main(void)
{   
    int i;
    short int lsp[10];

#line 5769 "vocoderPam.cc"
    _specc::waitfor(1066666ull);

#line 97 "src/lp_analysis/int_lpc.sc"
    for(i = 0; i < 10; i++ )
    {   
	lsp[i] = add(shr(lsp_mid[i], 1), shr(lsp_old[i], 1));
    }


    Lsp_Az(lsp, (short int *)(A[0]));

    for(i = 0; i < 10; i++ )
    {   
	lsp[i] = add(shr(lsp_mid[i], 1), shr(lsp_new[i], 1));
    }

    Lsp_Az(lsp, (short int *)(A[2]));
}

#line 5789 "vocoderPam.cc"
Lag_Window::Lag_Window(unsigned int _idcnt, short int (&r_h)[11], short int (&r_l)[11])
    : _specc::behavior(_idcnt), r_h(r_h), r_l(r_l)
{   
}

Lag_Window::~Lag_Window(void)
{   
}

#line 28 "src/lp_analysis/lag_wind.sc"
void Lag_Window::main(void)
{   
    int i;
    int x;

#line 53 "src/lp_analysis/lag_wind.sc"
    const short int lag_h[10] = { 

      ((short int)32728),((short int)32619),((short int)32438),((short int)32187),((short int)31867),((short int)31480),((short int)31029),((short int)30517),((short int)29946),((short int)29321) };


    const short int lag_l[10] = { 

      ((short int)11904),((short int)17280),((short int)30720),((short int)25856),((short int)24192),((short int)28992),((short int)24384),((short int)7360),((short int)19520),((short int)14784) };

#line 5815 "vocoderPam.cc"
    _specc::waitfor(866666ull);

#line 66 "src/lp_analysis/lag_wind.sc"
    for(i = 1; i <= 10; i++ )
    {   
	x = Mpy_32(r_h[i], r_l[i], lag_h[i - 1], lag_l[i - 1]);
	L_Extract(x,  &r_h[i],  &r_l[i]);
    }
}

#line 5826 "vocoderPam.cc"
Levinson::Levinson(unsigned int _idcnt, short int (&Rh)[11], short int (&Rl)[11], short int (&old_A)[11], short int (&A)[11], short int (&rc)[4])
    : _specc::behavior(_idcnt), Rh(Rh), Rl(Rl), old_A(old_A), A(A), rc(rc)
{   
}

Levinson::~Levinson(void)
{   
}

#line 54 "src/lp_analysis/levinson.sc"
void Levinson::main(void)
{   
    int i; int j;
    short int t0_n;
    short int hi; short int lo;
    short int Kh; short int Kl;
    short int alp_exp; short int alp_h; short int alp_l;
    short int Ah[11]; short int Al[11];
    short int Anh[11]; short int Anl[11];

    int t0; int t1; int t2;

#line 5849 "vocoderPam.cc"
    _specc::waitfor(17333333ull);

#line 69 "src/lp_analysis/levinson.sc"
    t1 = L_Comp(Rh[1], Rl[1]);
    t2 = L_abs(t1);
    t0 = Div_32(t2, Rh[0], Rl[0]);

    if (t1 > 0)
	t0 = L_negate(t0);
    L_Extract(t0,  &Kh,  &Kl);

    rc[0] = round(t0);

    t0 = L_shr(t0, 4);
    L_Extract(t0,  &Ah[1],  &Al[1]);



    t0 = Mpy_32(Kh, Kl, Kh, Kl);
    t0 = L_abs(t0);
    t0 = L_sub((int)2147483647l, t0);
    L_Extract(t0,  &hi,  &lo);
    t0 = Mpy_32(Rh[0], Rl[0], hi, lo);



    alp_exp = norm_l(t0);
    t0 = L_shl(t0, alp_exp);
    L_Extract(t0,  &alp_h,  &alp_l);

#line 100 "src/lp_analysis/levinson.sc"
    for(i = 2; i <= 10; i++ )
    {   


	t0 = 0;
	for(j = 1; j < i; j++ )
	{   
	    t0 = L_add(t0, Mpy_32(Rh[j], Rl[j], Ah[i - j], Al[i - j]));
	}
	t0 = L_shl(t0, 4);

	t1 = L_Comp(Rh[i], Rl[i]);
	t0 = L_add(t0, t1);



	t1 = L_abs(t0);
	t2 = Div_32(t1, alp_h, alp_l);

	if (t0 > 0)
	    t2 = L_negate(t2);
	t2 = L_shl(t2, alp_exp);
	L_Extract(t2,  &Kh,  &Kl);


	if (sub(i, 5) < 0)
	{   
	    rc[i - 1] = round(t2);
	}



	if (sub(abs_s(Kh), 32750) > 0)
	{   
	    for(j = 0; j <= 10; j++ )
	    {   
		A[j] = old_A[j];
	    }

	    for(j = 0; j < 4; j++ )
	    {   
		rc[j] = 0;
	    }

	    return ;
	}

#line 152 "src/lp_analysis/levinson.sc"
	for(j = 1; j < i; j++ )
	{   
	    t0 = Mpy_32(Kh, Kl, Ah[i - j], Al[i - j]);
	    t0 = L_mac(t0, Ah[j], 32767);
	    t0 = L_mac(t0, Al[j], 1);
	    L_Extract(t0,  &Anh[j],  &Anl[j]);
	}
	t2 = L_shr(t2, 4);
	L_Extract(t2,  &Anh[i],  &Anl[i]);



	t0 = Mpy_32(Kh, Kl, Kh, Kl);
	t0 = L_abs(t0);
	t0 = L_sub((int)2147483647l, t0);
	L_Extract(t0,  &hi,  &lo);
	t0 = Mpy_32(alp_h, alp_l, hi, lo);



	t0_n = norm_l(t0);
	t0 = L_shl(t0, t0_n);
	L_Extract(t0,  &alp_h,  &alp_l);
	alp_exp = add(alp_exp, t0_n);




	for(j = 1; j <= i; j++ )
	{   
	    Ah[j] = Anh[j];
	    Al[j] = Anl[j];
	}
    }

    A[0] = 4096;
    for(i = 1; i <= 10; i++ )
    {   
	t0 = L_Comp(Ah[i], Al[i]);
	A[i] = old_A[i] = round(L_shl(t0, 1));
    }
}

#line 5972 "vocoderPam.cc"
LP_Analysis_Init::LP_Analysis_Init(unsigned int _idcnt, bool (&reset_flag), short int (&old_A)[11], short int (&lsp_old)[10], short int (&lsp_old_q)[10])
    : _specc::behavior(_idcnt), reset_flag(reset_flag), old_A(old_A), lsp_old(lsp_old), lsp_old_q(lsp_old_q)
{   
}

LP_Analysis_Init::~LP_Analysis_Init(void)
{   
}

#line 26 "src/lp_analysis/lp_analysis.sc"
void LP_Analysis_Init::init(void)
{   
    int i;
    short int lsp[10];

    old_A[0] = 4096;
    for(i = 1; i < (10 + 1); i++ )
    {   
	old_A[i] = 0;
    }


    lsp[0] = 30000;
    lsp[1] = 26000;
    lsp[2] = 21000;
    lsp[3] = 15000;
    lsp[4] = 8000;
    lsp[5] = 0;
    lsp[6] =  -8000;
    lsp[7] =  -15000;
    lsp[8] =  -21000;
    lsp[9] =  -26000;

    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<10;_scc_index_0++) (lsp_old)[_scc_index_0] = (lsp)[_scc_index_0]; }
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<10;_scc_index_0++) (lsp_old_q)[_scc_index_0] = (lsp)[_scc_index_0]; }
}

#line 59 "src/lp_analysis/lp_analysis.sc"
void LP_Analysis_Init::main(void)
{   

#line 6014 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 61 "src/lp_analysis/lp_analysis.sc"
    if (reset_flag) init();
}

#line 54 "src/lp_analysis/lp_analysis.sc"
void LP_Analysis_Init::reset(void)
{   
    init();
}

#line 6027 "vocoderPam.cc"
LP_Analysis_Seq1::LP_Analysis_Seq1(unsigned int _idcnt, short int *(&p_window), short int (&r_h)[11], short int (&r_l)[11], short int (&old_A)[11], short int (&scal_fac), short int (&A_t_1)[11], short int (&A_t_3)[11], short int (&rc)[4])
    : _specc::behavior(_idcnt), p_window(p_window), r_h(r_h), r_l(r_l), old_A(old_A), scal_fac(scal_fac), A_t_1(A_t_1), A_t_3(A_t_3), rc(rc),
    find_az_1(_IDcnt, p_window, window_160_80, dummy_r_h, dummy_r_l, old_A, dummy_fac, A_t_1, dummy_rc),
    find_az_2(_IDcnt, p_window, window_232_8, r_h, r_l, old_A, scal_fac, A_t_3, rc)
{   
}

LP_Analysis_Seq1::~LP_Analysis_Seq1(void)
{   
}

void LP_Analysis_Seq1::main(void)
{   
    find_az_1.main();
    find_az_2.main();
}

LP_Analysis_Seq2::LP_Analysis_Seq2(unsigned int _idcnt, short int (&lsp_old)[10], short int (&lsp_mid)[10], short int (&lsp_new)[10], short int (&lsp_old_q)[10], short int (&lsp_mid_q)[10], short int (&lsp_new_q)[10], short int (&A_t)[4][11], short int (&Aq_t)[4][11], short int (&ana)[57], short int (&txdtx_ctrl), bool (&reset_flag))
    : _specc::behavior(_idcnt), lsp_old(lsp_old), lsp_mid(lsp_mid), lsp_new(lsp_new), lsp_old_q(lsp_old_q), lsp_mid_q(lsp_mid_q), lsp_new_q(lsp_new_q), A_t(A_t), Aq_t(Aq_t), ana(ana), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag),
    int_lpc2(_IDcnt, lsp_old, lsp_mid, lsp_new, A_t),
    q_plsf_and_intlpc(_IDcnt, Aq_t, lsp_old, lsp_mid, lsp_new, lsp_old_q, lsp_mid_q, lsp_new_q, ana, txdtx_ctrl, reset_flag)
{   
}

LP_Analysis_Seq2::~LP_Analysis_Seq2(void)
{   
}

void LP_Analysis_Seq2::main(void)
{   
    int_lpc2.main();
    q_plsf_and_intlpc.main();
}

#line 124 "src/lp_analysis/lp_analysis.sc"
void LP_Analysis_Seq2::reset(void)
{   
    q_plsf_and_intlpc.reset();
}

#line 6068 "vocoderPam.cc"
LP_Analysis_Copy1::LP_Analysis_Copy1(unsigned int _idcnt, short int (&A_t_1)[11], short int (&A_t_3)[11], short int (&A_t)[4][11])
    : _specc::behavior(_idcnt), A_t_1(A_t_1), A_t_3(A_t_3), A_t(A_t)
{   
}

LP_Analysis_Copy1::~LP_Analysis_Copy1(void)
{   
}

#line 147 "src/lp_analysis/lp_analysis.sc"
void LP_Analysis_Copy1::main(void)
{   

#line 6082 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 149 "src/lp_analysis/lp_analysis.sc"
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<11;_scc_index_0++) (A_t[1])[_scc_index_0] = (A_t_1)[_scc_index_0]; }
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<11;_scc_index_0++) (A_t[3])[_scc_index_0] = (A_t_3)[_scc_index_0]; }
}

#line 6090 "vocoderPam.cc"
LP_Analysis_Copy2::LP_Analysis_Copy2(unsigned int _idcnt, short int (&A)[4][11], short int (&A_t)[4][11])
    : _specc::behavior(_idcnt), A(A), A_t(A_t)
{   
}

LP_Analysis_Copy2::~LP_Analysis_Copy2(void)
{   
}

#line 161 "src/lp_analysis/lp_analysis.sc"
void LP_Analysis_Copy2::main(void)
{   

#line 6104 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 163 "src/lp_analysis/lp_analysis.sc"
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<4;_scc_index_0++) { unsigned int _scc_index_1; for(_scc_index_1=0;_scc_index_1<11;_scc_index_1++) (A_t)[_scc_index_0][_scc_index_1] = (A)[_scc_index_0][_scc_index_1]; } }
}

#line 6111 "vocoderPam.cc"
No_Speech_Upd::No_Speech_Upd(unsigned int _idcnt, short int (&A_t)[4][11], short int (&Aq_t)[4][11], short int (&lsp_old)[10], short int (&lsp_new)[10], short int (&lsp_old_q)[10], short int (&lsp_new_q)[10], short int (&txdtx_ctrl))
    : _specc::behavior(_idcnt), A_t(A_t), Aq_t(Aq_t), lsp_old(lsp_old), lsp_new(lsp_new), lsp_old_q(lsp_old_q), lsp_new_q(lsp_new_q), txdtx_ctrl(txdtx_ctrl)
{   
}

No_Speech_Upd::~No_Speech_Upd(void)
{   
}

#line 15 "src/lp_analysis/no_speech_upd.sc"
void No_Speech_Upd::main(void)
{   
    int i; int j;

#line 6126 "vocoderPam.cc"
    _specc::waitfor(700000ull);

#line 19 "src/lp_analysis/no_speech_upd.sc"
    if ((txdtx_ctrl & 1) == 0)
    {   

	for(i = 0; i < (10 + 1); i++ )
	{   
	    for(j = 0; j < 4; j++ )
		Aq_t[j][i] = A_t[j][i];
	}


	for(i = 0; i < 10; i++ )
	{   
	    lsp_old[i] = lsp_new[i];
	    lsp_old_q[i] = lsp_new[i];
	}
    }
    else 
    {   

	for(i = 0; i < 10; i++ )
	{   
	    lsp_old[i] = lsp_new[i];
	    lsp_old_q[i] = lsp_new_q[i];
	}
    }
}

#line 6157 "vocoderPam.cc"
Nodtx_Setflags::Nodtx_Setflags(unsigned int _idcnt, bool (&VAD_flag), short int (&txdtx_ctrl))
    : _specc::behavior(_idcnt), VAD_flag(VAD_flag), txdtx_ctrl(txdtx_ctrl)
{   
}

Nodtx_Setflags::~Nodtx_Setflags(void)
{   
}

#line 11 "src/lp_analysis/nodtx_setflags.sc"
void Nodtx_Setflags::main(void)
{   

#line 6171 "vocoderPam.cc"
    _specc::waitfor(50000ull);

#line 13 "src/lp_analysis/nodtx_setflags.sc"
    VAD_flag = 1;
    txdtx_ctrl = 2 | 1;
}

#line 6179 "vocoderPam.cc"
Q_Plsf_5::Q_Plsf_5(unsigned int _idcnt, short int (&lsp1)[10], short int (&lsp2)[10], short int (&lsp1_q)[10], short int (&lsp2_q)[10], short int (&indice)[57], short int (&txdtx_ctrl), bool (&reset_flag))
    : _specc::behavior(_idcnt), lsp1(lsp1), lsp2(lsp2), lsp1_q(lsp1_q), lsp2_q(lsp2_q), indice(indice), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag)
{   
}

Q_Plsf_5::~Q_Plsf_5(void)
{   
}

#line 431 "src/lp_analysis/q_plsf_5.sc"
void Q_Plsf_5::Lsf_wt(
    short int *lsf, 
    short int *wf)
{   
    short int temp;
    int i;



    wf[0] = lsf[1];
    for(i = 1; i < 9; i++ )
    {   
	wf[i] = sub(lsf[i + 1], lsf[i - 1]);
    }

    wf[9] = sub(16384, lsf[8]);

    for(i = 0; i < 10; i++ )
    {   
	temp = sub(wf[i], 1843);

	if (temp < 0)
	{   
	    wf[i] = sub(3427, mult(wf[i], 28160));
	}
	else 
	{   
	    wf[i] = sub(1843, mult(temp, 6242));
	}

	wf[i] = shl(wf[i], 3);
    }
    return ;
}

#line 238 "src/lp_analysis/q_plsf_5.sc"
short int Q_Plsf_5::Vq_subvec(
    short int *lsf_r1, 
    short int *lsf_r2, 
    const short int *dico, 
    short int *wf1, 
    short int *wf2, 
    short int dico_size)

{   
    int i;
    short int index; short int temp;
    const short int *p_dico;
    int dist; int dist_min;

    dist_min = (int)2147483647l;
    p_dico = dico;

    for(i = 0; i < dico_size; i++ )
    {   
	temp = sub(lsf_r1[0],  *p_dico++ );
	temp = mult(wf1[0], temp);
	dist = L_mult(temp, temp);

	temp = sub(lsf_r1[1],  *p_dico++ );
	temp = mult(wf1[1], temp);
	dist = L_mac(dist, temp, temp);

	temp = sub(lsf_r2[0],  *p_dico++ );
	temp = mult(wf2[0], temp);
	dist = L_mac(dist, temp, temp);

	temp = sub(lsf_r2[1],  *p_dico++ );
	temp = mult(wf2[1], temp);
	dist = L_mac(dist, temp, temp);


	if (L_sub(dist, dist_min) < (int)0)
	{   
	    dist_min = dist;
	    index = i;
	}
    }



    p_dico =  &dico[shl(index, 2)];
    lsf_r1[0] =  *p_dico++ ;
    lsf_r1[1] =  *p_dico++ ;
    lsf_r2[0] =  *p_dico++ ;
    lsf_r2[1] =  *p_dico++ ;

    return index;
}

#line 296 "src/lp_analysis/q_plsf_5.sc"
short int Q_Plsf_5::Vq_subvec_s(
    short int *lsf_r1, 
    short int *lsf_r2, 
    const short int *dico, 
    short int *wf1, 
    short int *wf2, 
    short int dico_size)
{   
    int i;
    short int index; short int temp;
    bool sign;
    const short int *p_dico;
    int dist; int dist_min;

    dist_min = (int)2147483647l;
    p_dico = dico;

    for(i = 0; i < dico_size; i++ )
    {   


	temp = sub(lsf_r1[0],  *p_dico++ );
	temp = mult(wf1[0], temp);
	dist = L_mult(temp, temp);

	temp = sub(lsf_r1[1],  *p_dico++ );
	temp = mult(wf1[1], temp);
	dist = L_mac(dist, temp, temp);

	temp = sub(lsf_r2[0],  *p_dico++ );
	temp = mult(wf2[0], temp);
	dist = L_mac(dist, temp, temp);

	temp = sub(lsf_r2[1],  *p_dico++ );
	temp = mult(wf2[1], temp);
	dist = L_mac(dist, temp, temp);


	if (L_sub(dist, dist_min) < (int)0)
	{   
	    dist_min = dist;
	    index = i;
	    sign = 0;
	}




	p_dico -= 4;
	temp = add(lsf_r1[0],  *p_dico++ );
	temp = mult(wf1[0], temp);
	dist = L_mult(temp, temp);

	temp = add(lsf_r1[1],  *p_dico++ );
	temp = mult(wf1[1], temp);
	dist = L_mac(dist, temp, temp);

	temp = add(lsf_r2[0],  *p_dico++ );
	temp = mult(wf2[0], temp);
	dist = L_mac(dist, temp, temp);

	temp = add(lsf_r2[1],  *p_dico++ );
	temp = mult(wf2[1], temp);
	dist = L_mac(dist, temp, temp);


	if (L_sub(dist, dist_min) < (int)0)
	{   
	    dist_min = dist;
	    index = i;
	    sign = 1;
	}
    }



    p_dico =  &dico[shl(index, 2)];

    if (sign == 0)
    {   
	lsf_r1[0] =  *p_dico++ ;
	lsf_r1[1] =  *p_dico++ ;
	lsf_r2[0] =  *p_dico++ ;
	lsf_r2[1] =  *p_dico++ ;
    }
    else 
    {   
	lsf_r1[0] = negate( *p_dico++ );
	lsf_r1[1] = negate( *p_dico++ );
	lsf_r2[0] = negate( *p_dico++ );
	lsf_r2[1] = negate( *p_dico++ );
    }

    index = shl(index, 1);
    index = add(index, sign);

    return index;
}

#line 208 "src/lp_analysis/q_plsf_5.sc"
void Q_Plsf_5::aver_lsf_history(
    short int lsf_old[7][10], 
    short int lsf1[10], 
    short int lsf2[10], 
    short int lsf_aver[10])

{   
    int i; int j;
    int L_temp;

    for(j = 0; j < 10; j++ )
    {   
	L_temp = L_mult(16383, lsf1[j]);
	L_temp = L_mac(L_temp, 16383, lsf2[j]);
	L_temp = L_mult((32767 / (7 + 1)), extract_h(L_temp));

	for(i = 0; i < 7; i++ )
	{   
	    L_temp = L_mac(L_temp, (32767 / (7 + 1)), lsf_old[i][j]);
	}

	lsf_aver[j] = extract_h(L_temp);
    }

    return ;
}

#line 66 "src/lp_analysis/q_plsf_5.sc"
void Q_Plsf_5::init(void)
{   
    int i;

    for(i = 0; i < 10; i++ )
    {   
	past_r2_q[i] = 0;
    }

    for(i = 0; i < 7; i++ )
    {   
	lsf_old_tx[i][0] = 1384;
	lsf_old_tx[i][1] = 2077;
	lsf_old_tx[i][2] = 3420;
	lsf_old_tx[i][3] = 5108;
	lsf_old_tx[i][4] = 6742;
	lsf_old_tx[i][5] = 8122;
	lsf_old_tx[i][6] = 9863;
	lsf_old_tx[i][7] = 11092;
	lsf_old_tx[i][8] = 12714;
	lsf_old_tx[i][9] = 13701;
    }
}

#line 484 "src/lp_analysis/q_plsf_5.sc"
void Q_Plsf_5::lsf_lsp(
    short int lsf[], 
    short int *lsp, 
    short int m)

{   
    int i; int ind;
    short int offset;
    int L_tmp;

    for(i = 0; i < m; i++ )
    {   
	ind = shr(lsf[i], 8);
	offset = lsf[i] & 255;



	L_tmp = L_mult(sub(table[ind + 1], table[ind]), offset);
	lsp[i] = add(table[ind], extract_l(L_shr(L_tmp, 9)));
    }

    return ;
}

void Q_Plsf_5::lsp_lsf(
    short int lsp[], 
    short int *lsf, 
    short int m)

{   
    int i; int ind;
    int L_tmp;

    ind = 63;

    for(i = m - 1; i >= 0; i-- )
    {   


	while(sub(table[ind], lsp[i]) < 0)
	{   
	    ind-- ;
	}

#line 532 "src/lp_analysis/q_plsf_5.sc"
	L_tmp = L_mult(sub(lsp[i], table[ind]), slope[ind]);

	lsf[i] = round(L_shl(L_tmp, 3));
	lsf[i] = add(lsf[i], shl(ind, 8));
    }
    return ;
}

#line 578 "src/lp_analysis/q_plsf_5.sc"
void Q_Plsf_5::main(void)
{   
    int i;
    short int lsf1[10]; short int lsf2[10]; short int lsf_p[10]; short int lsf_r1[10]; short int lsf_r2[10]; short int wf1[10]; short int wf2[10];
    short int lsf1_q[10]; short int lsf2_q[10];
    short int lsf_aver[10];
    static short int lsf_p_CN[10];

#line 6496 "vocoderPam.cc"
    _specc::waitfor(293533333ull);

#line 586 "src/lp_analysis/q_plsf_5.sc"
    if (reset_flag) init();



    lsp_lsf(lsp1, lsf1, 10);
    lsp_lsf(lsp2, lsf2, 10);




    if ((txdtx_ctrl & 1) == 0 && 
	(txdtx_ctrl & 8) != 0)
    {   
	update_lsf_p_CN(lsf_old_tx, lsf_p_CN);
    }

    if ((txdtx_ctrl & 16) != 0)
    {   



	aver_lsf_history(lsf_old_tx, lsf1, lsf2, lsf_aver);
    }




    if ((txdtx_ctrl & 1) == 0)
    {   
	update_lsf_history(lsf1, lsf2, lsf_old_tx);
    }

    if ((txdtx_ctrl & 16) != 0)
    {   




	Lsf_wt(lsf_aver, wf2);
	for(i = 0; i < 10; i++ )
	{   
	    wf1[i] = 0;
	    lsf1[i] = lsf_aver[i];
	    lsf2[i] = lsf_aver[i];
	}
    }
    else 
    {   


	Lsf_wt(lsf1, wf1);
	Lsf_wt(lsf2, wf2);
    }




    if ((txdtx_ctrl & 1) != 0)
    {   
	for(i = 0; i < 10; i++ )
	{   
	    lsf_p[i] = add(mean_lsf[i], mult(past_r2_q[i], 21299));

	    lsf_r1[i] = sub(lsf1[i], lsf_p[i]);
	    lsf_r2[i] = sub(lsf2[i], lsf_p[i]);
	}
    }
    else 
    {   
	for(i = 0; i < 10; i++ )
	{   
	    lsf_r1[i] = sub(lsf1[i], lsf_p_CN[i]);
	    lsf_r2[i] = sub(lsf2[i], lsf_p_CN[i]);
	}
    }



    indice[0] = Vq_subvec( &lsf_r1[0],  &lsf_r2[0], dico1_lsf,  &
	wf1[0],  &wf2[0], 128);


    indice[1] = Vq_subvec( &lsf_r1[2],  &lsf_r2[2], dico2_lsf,  &
	wf1[2],  &wf2[2], 256);


    indice[2] = Vq_subvec_s( &lsf_r1[4],  &lsf_r2[4], dico3_lsf,  &
	wf1[4],  &wf2[4], 256);


    indice[3] = Vq_subvec( &lsf_r1[6],  &lsf_r2[6], dico4_lsf,  &
	wf1[6],  &wf2[6], 256);


    indice[4] = Vq_subvec( &lsf_r1[8],  &lsf_r2[8], dico5_lsf,  &
	wf1[8],  &wf2[8], 64);

#line 689 "src/lp_analysis/q_plsf_5.sc"
    if ((txdtx_ctrl & 1) != 0)
    {   
	for(i = 0; i < 10; i++ )
	{   
	    lsf1_q[i] = add(lsf_r1[i], lsf_p[i]);
	    lsf2_q[i] = add(lsf_r2[i], lsf_p[i]);
	    past_r2_q[i] = lsf_r2[i];
	}



	reorder_lsf(lsf1_q, 205, 10);
	reorder_lsf(lsf2_q, 205, 10);

#line 707 "src/lp_analysis/q_plsf_5.sc"
	if ((txdtx_ctrl & 4) != 0)
	{   
	    update_lsf_history(lsf1_q, lsf2_q, lsf_old_tx);
	}


	lsf_lsp(lsf1_q,  &lsp1_q[0], 10);
	lsf_lsp(lsf2_q,  &lsp2_q[0], 10);
    }
    else 
    {   
	for(i = 0; i < 10; i++ )
	{   
	    past_r2_q[i] = 0;
	}
    }
}

#line 554 "src/lp_analysis/q_plsf_5.sc"
void Q_Plsf_5::reorder_lsf(
    short int *lsf, 
    short int min_dist, 
    short int n)

{   
    int i;
    short int lsf_min;

    lsf_min = min_dist;
    for(i = 0; i < n; i++ )
    {   

	if (sub(lsf[i], lsf_min) < 0)
	{   
	    lsf[i] = lsf_min;
	}
	lsf_min = add(lsf[i], min_dist);
    }
}

#line 91 "src/lp_analysis/q_plsf_5.sc"
void Q_Plsf_5::reset(void)
{   
    init();
}

#line 119 "src/lp_analysis/q_plsf_5.sc"
void Q_Plsf_5::update_lsf_history(
    short int lsf1[10], 
    short int lsf2[10], 
    short int lsf_old[7][10])

{   
    int i; int j;
    short int temp;




    for(i = 7 - 1; i > 0; i-- )
    {   
	for(j = 0; j < 10; j++ )
	{   
	    lsf_old[i][j] = lsf_old[i - 1][j];
	}
    }



    for(i = 0; i < 10; i++ )
    {   
	temp = add(shr(lsf1[i], 1), shr(lsf2[i], 1));
	lsf_old[0][i] = temp;
    }

    return ;
}

#line 167 "src/lp_analysis/q_plsf_5.sc"
void Q_Plsf_5::update_lsf_p_CN(
    short int lsf_old[7][10], 
    short int lsf_p_CN[10])

{   
    int i; int j;
    int L_temp;

    for(j = 0; j < 10; j++ )
    {   
	L_temp = L_mult((32767 / 7), lsf_old[0][j]);
	for(i = 1; i < 7; i++ )
	{   
	    L_temp = L_mac(L_temp, (32767 / 7), lsf_old[i][j]);
	}
	lsf_p_CN[j] = round(L_temp);
    }

    return ;
}

#line 6713 "vocoderPam.cc"
Q_Plsf_And_Intlpc::Q_Plsf_And_Intlpc(unsigned int _idcnt, short int (&Aq_t)[4][11], short int (&lsp_old)[10], short int (&lsp_mid)[10], short int (&lsp_new)[10], short int (&lsp_old_q)[10], short int (&lsp_mid_q)[10], short int (&lsp_new_q)[10], short int (&ana)[57], short int (&txdtx_ctrl), bool (&reset_flag))
    : _specc::behavior(_idcnt), Aq_t(Aq_t), lsp_old(lsp_old), lsp_mid(lsp_mid), lsp_new(lsp_new), lsp_old_q(lsp_old_q), lsp_mid_q(lsp_mid_q), lsp_new_q(lsp_new_q), ana(ana), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag),
    int_lpc(_IDcnt, lsp_old_q, lsp_mid_q, lsp_new_q, Aq_t),
    q_plsf_5(_IDcnt, lsp_mid, lsp_new, lsp_mid_q, lsp_new_q, ana, txdtx_ctrl, reset_flag)
{   
}

Q_Plsf_And_Intlpc::~Q_Plsf_And_Intlpc(void)
{   
}

#line 37 "src/lp_analysis/q_plsf_and_intlpc.sc"
void Q_Plsf_And_Intlpc::main(void)
{   
    { enum { _scc_state_0, _scc_state_q_plsf_5, _scc_state_int_lpc } _scc_next_state = _scc_state_q_plsf_5; do switch(_scc_next_state) {


	    case _scc_state_q_plsf_5: { q_plsf_5.main(); if ((txdtx_ctrl & 1) == 0) { _scc_next_state = _scc_state_0; break; } }



	    case _scc_state_int_lpc: { int_lpc.main(); { _scc_next_state = _scc_state_0; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

#line 31 "src/lp_analysis/q_plsf_and_intlpc.sc"
void Q_Plsf_And_Intlpc::reset(void)
{   
    q_plsf_5.reset();
}

#line 6745 "vocoderPam.cc"
TX_Dtx::TX_Dtx(unsigned int _idcnt, bool (&VAD_flag), short int (&txdtx_ctrl), int (&L_pn_seed_tx), bool (&reset_flag))
    : _specc::behavior(_idcnt), VAD_flag(VAD_flag), txdtx_ctrl(txdtx_ctrl), L_pn_seed_tx(L_pn_seed_tx), reset_flag(reset_flag)
{   
}

TX_Dtx::~TX_Dtx(void)
{   
}

#line 66 "src/lp_analysis/tx_dtx.sc"
void TX_Dtx::init(void)
{   
    txdtx_hangover = 7;
    txdtx_N_elapsed = 32767;

    L_pn_seed_tx = 1887529304l;
}

#line 79 "src/lp_analysis/tx_dtx.sc"
void TX_Dtx::main(void)
{   

#line 6768 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 81 "src/lp_analysis/tx_dtx.sc"
    if (reset_flag) init();




    txdtx_N_elapsed = add(txdtx_N_elapsed, 1);




    if (sub(VAD_flag, 1) == 0)
    {   
	txdtx_hangover = 7;
	txdtx_ctrl = 1 | 2;
    }
    else 
    {   

	if (txdtx_hangover == 0)
	{   


	    txdtx_N_elapsed = 0;



	    if ((txdtx_ctrl & 4) != 0)
	    {   
		txdtx_ctrl = 8 | 
		16;
		L_pn_seed_tx = 1887529304l;
	    }
	    else 
	    {   
		txdtx_ctrl = 16;
	    }
	}
	else 
	{   

	    txdtx_hangover = sub(txdtx_hangover, 1);

#line 131 "src/lp_analysis/tx_dtx.sc"
	    if (sub(add(txdtx_N_elapsed, txdtx_hangover), 
		    (24 + 7 - 1)) < 0)
	    {   

		txdtx_ctrl = 32;
	    }
	    else 
	    {   

		if ((txdtx_ctrl & 4) != 0)
		{   
		    txdtx_ctrl = 8 | 
		    4 | 
		    1;
		}
		else 
		{   
		    txdtx_ctrl = 4 | 
		    1;
		}
	    }
	}
    }
}

#line 74 "src/lp_analysis/tx_dtx.sc"
void TX_Dtx::reset(void)
{   
    init();
}

#line 6846 "vocoderPam.cc"
VAD_Computation::VAD_Computation(unsigned int _idcnt, short int (&r_h)[11], short int (&r_l)[11], short int (&scal_acf), short int (&rc)[4], bool (&ptch), bool (&vad), bool (&reset_flag))
    : _specc::behavior(_idcnt), r_h(r_h), r_l(r_l), scal_acf(scal_acf), rc(rc), ptch(ptch), vad(vad), reset_flag(reset_flag)
{   
}

VAD_Computation::~VAD_Computation(void)
{   
}

#line 271 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::Acf_averaging(
    short int Aa_r_h[], 
    short int Aa_r_l[], 
    short int Aa_scal_acf, 
    int L_av0[], 
    int L_av1[])

{   
    int L_temp;
    short int scale;
    int i;

    scale = add(9, Aa_scal_acf);

    for(i = 0; i <= 8; i++ )
    {   
	L_temp = L_shr(L_Comp(Aa_r_h[i], Aa_r_l[i]), scale);
	L_av0[i] = L_add(L_sacf[i], L_temp);
	L_av0[i] = L_add(L_sacf[i + 9], L_av0[i]);
	L_av0[i] = L_add(L_sacf[i + 18], L_av0[i]);
	L_sacf[pt_sacf + i] = L_temp;
	L_av1[i] = L_sav0[pt_sav0 + i];
	L_sav0[pt_sav0 + i] = L_av0[i];
    }




    if (sub(pt_sacf, 18) == 0)
    {   
	pt_sacf = 0;
    }
    else 
    {   
	pt_sacf = add(pt_sacf, 9);
    }


    if (sub(pt_sav0, 27) == 0)
    {   
	pt_sav0 = 0;
    }
    else 
    {   
	pt_sav0 = add(pt_sav0, 9);
    }

    return ;
}

#line 492 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::Compute_rav1(
    short int aav1[], 
    short int rav1[], 
    short int *scal_rav1)

{   
    int L_work[9];
    int i; int k;



    for(i = 0; i <= 8; i++ )
    {   
	L_work[i] = 0l;

	for(k = 0; k <= 8 - i; k++ )
	{   
	    L_work[i] = L_mac(L_work[i], aav1[k], aav1[k + i]);
	}
    }


    if (L_work[0] == 0l)
    {   
	 *scal_rav1 = 0;
    }
    else 
    {   
	 *scal_rav1 = norm_l(L_work[0]);
    }

    for(i = 0; i <= 8; i++ )
    {   
	rav1[i] = extract_h(L_shl(L_work[i],  *scal_rav1));
    }

    return ;
}

#line 207 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::Energy_computation(
    short int Ec_r_h[], 
    short int Ec_scal_acf, 
    struct _fp *acf0, 
    struct _fp *pvad)

{   
    int i;
    short int norm_prod; short int temp;
    int L_temp;

#line 222 "src/lp_analysis/vad_comp.sc"
    acf0->e = sub(32, Ec_scal_acf);
    acf0->m = Ec_r_h[0] & 32760;



    pvad->e = add(acf0->e, 14);
    pvad->e = sub(pvad->e, scal_rvad);

    L_temp = 0l;

    for(i = 1; i <= 8; i++ )
    {   
	temp = shr(Ec_r_h[i], 3);
	L_temp = L_mac(L_temp, temp, rvad[i]);
    }

    temp = shr(Ec_r_h[0], 3);
    L_temp = L_add(L_temp, L_shr(L_mult(temp, rvad[0]), 1));


    if (L_temp <= 0l)
    {   
	L_temp = 1l;
    }
    norm_prod = norm_l(L_temp);
    pvad->e = sub(pvad->e, norm_prod);
    pvad->m = extract_h(L_shl(L_temp, norm_prod));


    return ;
}

#line 549 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::Predictor_values(
    int L_av1[], 
    short int rav1[], 
    short int *scal_rav1)

{   
    short int aav1[9]; short int vpar[8];

    Schur_recursion(L_av1, vpar);
    Step_up(8, vpar, aav1);
    Compute_rav1(aav1, rav1, scal_rav1);

    return ;
}

#line 335 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::Schur_recursion(
    int L_av1[], 
    short int vpar[])

{   
    short int acf[9]; short int kk[9]; short int pp[9]; short int temp;
    int i; int k; int m; int n;




    if (L_av1[0] == 0)
    {   
	for(i = 0; i < 8; i++ )
	{   
	    vpar[i] = 0;
	}
	return ;
    }
    temp = norm_l(L_av1[0]);

    for(k = 0; k <= 8; k++ )
    {   
	acf[k] = extract_h(L_shl(L_av1[k], temp));
    }



    for(i = 1; i <= 7; i++ )
    {   
	kk[9 - i] = acf[i];
    }

    for(i = 0; i <= 8; i++ )
    {   
	pp[i] = acf[i];
    }



    for(n = 0; n < 8; n++ )
    {   

	if ((pp[0] == 0) || 
	    (sub(pp[0], abs_s(pp[1])) < 0))
	{   
	    for(i = n; i < 8; i++ )
	    {   
		vpar[i] = 0;
	    }
	    return ;
	}
	vpar[n] = div_s(abs_s(pp[1]), pp[0]);


	if (pp[1] > 0)
	{   
	    vpar[n] = negate(vpar[n]);
	}

	if (n == 7)
	{   
	    return ;
	}


	pp[0] = add(pp[0], mult_r(pp[1], vpar[n]));

	for(m = 1; m <= 7 - n; m++ )
	{   
	    pp[m] = add(pp[1 + m], mult_r(kk[9 - m], vpar[n]));

	    kk[9 - m] = add(kk[9 - m], mult_r(pp[1 + m], vpar[n]));
	}
    }


    return ;
}

#line 584 "src/lp_analysis/vad_comp.sc"
bool VAD_Computation::Spectral_comparison(
    short int rav1[], 
    short int scal_rav1, 
    int L_av0[])

{   
    int L_dm; int L_sump; int L_temp;
    short int divshift; short int sav0[9]; short int shift; short int temp;
    bool stat;
    int i;




    if (L_av0[0] == 0l)
    {   
	for(i = 0; i <= 8; i++ )
	{   
	    sav0[i] = 4095;
	}
    }
    else 
    {   
	shift = sub(norm_l(L_av0[0]), 3);
	for(i = 0; i <= 8; i++ )
	{   
	    sav0[i] = extract_h(L_shl(L_av0[i], shift));
	}
    }



    L_sump = 0l;
    for(i = 1; i <= 8; i++ )
    {   
	L_sump = L_mac(L_sump, rav1[i], sav0[i]);
    }




    if (L_sump < 0l)
    {   
	L_temp = L_negate(L_sump);
    }
    else 
    {   
	L_temp = L_sump;
    }


    if (L_temp == 0l)
    {   
	L_dm = 0l;
	shift = 0;
    }
    else 
    {   
	sav0[0] = shl(sav0[0], 3);
	shift = norm_l(L_temp);
	temp = extract_h(L_shl(L_temp, shift));


	if (sub(sav0[0], temp) >= 0)
	{   
	    divshift = 0;
	    temp = div_s(temp, sav0[0]);
	}
	else 
	{   
	    divshift = 1;
	    temp = sub(temp, sav0[0]);
	    temp = div_s(temp, sav0[0]);
	}


	if (sub(divshift, 1) == 0)
	{   
	    L_dm = 32768l;
	}
	else 
	{   
	    L_dm = 0l;
	}

	L_dm = L_shl(L_add(L_dm, L_deposit_l(temp)), 1);


	if (L_sump < 0l)
	{   
	    L_dm = L_negate(L_dm);
	}
    }



    L_dm = L_shl(L_dm, 14);
    L_dm = L_shr(L_dm, shift);
    L_dm = L_add(L_dm, L_shl(L_deposit_l(rav1[0]), 11));
    L_dm = L_shr(L_dm, scal_rav1);



    L_temp = L_sub(L_dm, L_lastdm);
    L_lastdm = L_dm;


    if (L_temp < 0l)
    {   
	L_temp = L_negate(L_temp);
    }


    L_temp = L_sub(L_temp, 3670l);


    if (L_temp < 0l)
    {   
	stat = 1;
    }
    else 
    {   
	stat = 0;
    }

    return stat;
}

#line 432 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::Step_up(
    short int np, 
    short int vpar[], 
    short int aav1[])

{   
    int L_coef[9]; int L_work[9];
    short int temp;
    int i; int m;



    L_coef[0] = 536870912l;
    L_coef[1] = L_shl(L_deposit_l(vpar[0]), 14);



    for(m = 2; m <= np; m++ )
    {   
	for(i = 1; i < m; i++ )
	{   
	    temp = extract_h(L_coef[m - i]);
	    L_work[i] = L_mac(L_coef[i], vpar[m - 1], temp);
	}

	for(i = 1; i < m; i++ )
	{   
	    L_coef[i] = L_work[i];
	}

	L_coef[m] = L_shl(L_deposit_l(vpar[m - 1]), 14);
    }



    for(i = 0; i <= np; i++ )
    {   
	aav1[i] = extract_h(L_shr(L_coef[i], 3));
    }

    return ;
}

#line 737 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::Threshold_adaptation(
    bool stat, 
    bool Ta_ptch, 
    bool tone, 
    short int rav1[], 
    short int scal_rav1, 
    struct _fp pvad, 
    struct _fp acf0)

{   
    bool comp; bool comp2;
    int L_temp;
    short int temp;
    struct _fp p_temp;
    int i;

    comp = 0;




    if (sub(acf0.e, 17) < 0)
    {   
	comp = 1;
    }

    if ((sub(acf0.e, 17) == 0) && (sub(acf0.m, 32500) < 0))
    {   
	comp = 1;
    }

    if (comp == 1)
    {   
	thvad.e = 19;
	thvad.m = 21667;

	return ;
    }



    if (Ta_ptch == 1)
    {   
	comp = 1;
    }

    if (stat == 0)
    {   
	comp = 1;
    }

    if (tone == 1)
    {   
	comp = 1;
    }

    if (comp == 1)
    {   
	adaptcount = 0;
	return ;
    }


    adaptcount = add(adaptcount, 1);

    if (sub(adaptcount, 8) <= 0)
    {   
	return ;
    }


    thvad.m = sub(thvad.m, shr(thvad.m, 5));


    if (sub(thvad.m, 16384) < 0)
    {   
	thvad.m = shl(thvad.m, 1);
	thvad.e = sub(thvad.e, 1);
    }


    L_temp = L_mult(pvad.m, 17203);
    L_temp = L_shr(L_temp, 15);
    p_temp.e = add(pvad.e, 1);


    if (L_temp > 32767l)
    {   
	L_temp = L_shr(L_temp, 1);
	p_temp.e = add(p_temp.e, 1);
    }
    p_temp.m = extract_l(L_temp);




    if (sub(thvad.e, p_temp.e) < 0)
    {   
	comp = 1;
    }

    if ((sub(thvad.e, p_temp.e) == 0) && 
	(sub(thvad.m, p_temp.m) < 0))
    {   
	comp = 1;
    }



    if (comp == 1)
    {   


	L_temp = L_add(L_deposit_l(thvad.m), 
	    L_deposit_l(shr(thvad.m, 4)));


	if (L_sub(L_temp, 32767l) > 0)
	{   
	    thvad.m = extract_l(L_shr(L_temp, 1));
	    thvad.e = add(thvad.e, 1);
	}
	else 
	{   
	    thvad.m = extract_l(L_temp);
	}

	comp2 = 0;


	if (sub(p_temp.e, thvad.e) < 0)
	{   
	    comp2 = 1;
	}

	if ((sub(p_temp.e, thvad.e) == 0) && 
	    (sub(p_temp.m, thvad.m) < 0))
	{   
	    comp2 = 1;
	}

	if (comp2 == 1)
	{   
	    thvad.e = p_temp.e;
	    thvad.m = p_temp.m;
	}
    }



    if (sub(pvad.e, 27) == 0)
    {   
	L_temp = L_add(L_deposit_l(pvad.m), L_deposit_l(16927));
	p_temp.m = extract_l(L_shr(L_temp, 1));
	p_temp.e = add(pvad.e, 1);
    }
    else 
    {   

	if (sub(pvad.e, 27) > 0)
	{   
	    temp = sub(pvad.e, 27);
	    temp = shr(16927, temp);
	    L_temp = L_add(L_deposit_l(pvad.m), L_deposit_l(temp));


	    if (L_sub(L_temp, 32767l) > 0)
	    {   
		p_temp.e = add(pvad.e, 1);
		p_temp.m = extract_l(L_shr(L_temp, 1));
	    }
	    else 

	    {   
		p_temp.e = pvad.e;
		p_temp.m = extract_l(L_temp);
	    }
	}
	else 
	{   
	    temp = sub(27, pvad.e);
	    temp = shr(pvad.m, temp);
	    L_temp = L_add(L_deposit_l(16927), L_deposit_l(temp));


	    if (L_sub(L_temp, 32767l) > 0)
	    {   
		p_temp.e = add(27, 1);
		p_temp.m = extract_l(L_shr(L_temp, 1));
	    }
	    else 

	    {   
		p_temp.e = 27;
		p_temp.m = extract_l(L_temp);
	    }
	}
    }



    comp = 0;


    if (sub(thvad.e, p_temp.e) > 0)
    {   
	comp = 1;
    }

    if ((sub(thvad.e, p_temp.e) == 0) && 
	(sub(thvad.m, p_temp.m) > 0))
    {   
	comp = 1;
    }

    if (comp == 1)
    {   
	thvad.e = p_temp.e;
	thvad.m = p_temp.m;
    }


    scal_rvad = scal_rav1;

    for(i = 0; i <= 8; i++ )
    {   
	rvad[i] = rav1[i];
    }



    adaptcount = 9;

    return ;
}

#line 990 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::Tone_detection(
    short int Td_rc[], 
    bool *tone)

{   
    int L_den; int L_num; int L_temp;
    short int a[3]; short int prederr; short int temp;
    int i;

     *tone = 0;



    Step_up(2, Td_rc, a);



    temp = shl(a[1], 3);
    L_den = L_mult(temp, temp);



    L_temp = L_shl(L_deposit_h(a[2]), 3);
    L_num = L_sub(L_temp, L_den);




    if (L_num <= 0)
    {   
	return ;
    }

    if (a[1] < 0)
    {   
	temp = extract_h(L_den);
	L_den = L_mult(temp, 3189);

	L_temp = L_sub(L_num, L_den);


	if (L_temp < 0)
	{   
	    return ;
	}
    }


    prederr = 32767;

    for(i = 0; i < 4; i++ )
    {   
	temp = mult(Td_rc[i], Td_rc[i]);
	temp = sub(32767, temp);
	prederr = mult(prederr, temp);
    }



    temp = sub(prederr, 1464);


    if (temp < 0)
    {   
	 *tone = 1;
    }
    return ;
}

#line 1076 "src/lp_analysis/vad_comp.sc"
bool VAD_Computation::Vad_decision(
    struct _fp pvad)

{   
    bool vvad;


    if (sub(pvad.e, thvad.e) > 0)
    {   
	vvad = 1;
    }
    else  if ((sub(pvad.e, thvad.e) == 0) && 
	    (sub(pvad.m, thvad.m) > 0))
	{   
	    vvad = 1;
	}
	else 
	{   
	    vvad = 0;
	}

    return vvad;
}

#line 1116 "src/lp_analysis/vad_comp.sc"
bool VAD_Computation::Vad_hangover(
    bool vvad)

{   

    if (vvad == 1)
    {   
	burstcount = add(burstcount, 1);
    }
    else 
    {   
	burstcount = 0;
    }


    if (sub(burstcount, 3) >= 0)
    {   
	hangcount = 10;
	burstcount = 3;
    }

    if (hangcount >= 0)
    {   
	hangcount = sub(hangcount, 1);
	return 1;
    }
    return vvad;
}

#line 142 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::init(void)
{   
    int i;


    rvad[0] = 24576;
    for(i = 1; i < 9; i++ )
    {   
	rvad[i] = 0;
    }
    scal_rvad = 7;


    thvad.e = 20;
    thvad.m = 27083;


    for(i = 0; i < 27; i++ )
    {   
	L_sacf[i] = 0l;
    }
    for(i = 0; i < 36; i++ )
    {   
	L_sav0[i] = 0l;
    }
    pt_sacf = 0;
    pt_sav0 = 0;


    L_lastdm = 0l;


    adaptcount = 0;


    burstcount = 0;
    hangcount =  -1;
}

#line 1148 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::main(void)
{   
    int L_av0[9]; int L_av1[9];
    short int rav1[9]; short int scal_rav1;
    bool stat; bool tone;
    bool vvad;
    struct _fp acf0; struct _fp pvad;

#line 7673 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 1156 "src/lp_analysis/vad_comp.sc"
    if (reset_flag) init();

    Energy_computation(r_h, scal_acf,  &acf0,  &pvad);
    Acf_averaging(r_h, r_l, scal_acf, L_av0, L_av1);
    Predictor_values(L_av1, rav1,  &scal_rav1);
    stat = Spectral_comparison(rav1, scal_rav1, L_av0);
    Tone_detection(rc,  &tone);
    Threshold_adaptation(stat, ptch, tone, rav1, scal_rav1, pvad, acf0);
    vvad = Vad_decision(pvad);
    vad = Vad_hangover(vvad);
}

#line 182 "src/lp_analysis/vad_comp.sc"
void VAD_Computation::reset(void)
{   
    init();
}

#line 7695 "vocoderPam.cc"
Vad_Lp::Vad_Lp(unsigned int _idcnt, short int (&r_l)[11], short int (&r_h)[11], short int (&scal_fac), short int (&rc)[4], bool (&ptch), short int (&txdtx_ctrl), bool (&dtx_mode), int (&L_pn_seed_tx), bool (&reset_flag))
    : _specc::behavior(_idcnt), r_l(r_l), r_h(r_h), scal_fac(scal_fac), rc(rc), ptch(ptch), txdtx_ctrl(txdtx_ctrl), dtx_mode(dtx_mode), L_pn_seed_tx(L_pn_seed_tx), reset_flag(reset_flag),
    nodtx_setflags(_IDcnt, VAD_flag, txdtx_ctrl),
    nop(_IDcnt),
    tx_dtx(_IDcnt, VAD_flag, txdtx_ctrl, L_pn_seed_tx, reset_flag),
    vad_computation(_IDcnt, r_h, r_l, scal_fac, rc, ptch, VAD_flag, reset_flag)
{   
}

Vad_Lp::~Vad_Lp(void)
{   
}

#line 43 "src/lp_analysis/vad_lp.sc"
void Vad_Lp::main(void)
{   

    { enum { _scc_state_0, _scc_state_nop, _scc_state_nodtx_setflags, _scc_state_vad_computation, _scc_state_tx_dtx } _scc_next_state = _scc_state_nop; do switch(_scc_next_state) {


	    case _scc_state_nop: { nop.main(); if (dtx_mode == 1) { _scc_next_state = _scc_state_vad_computation; break; } }

#line 56 "src/lp_analysis/vad_lp.sc"
	    case _scc_state_nodtx_setflags: { nodtx_setflags.main(); { _scc_next_state = _scc_state_0; break; } }


	    case _scc_state_vad_computation: { vad_computation.main(); { _scc_next_state = _scc_state_tx_dtx; break; } }




	    case _scc_state_tx_dtx: { tx_dtx.main(); { _scc_next_state = _scc_state_0; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

#line 36 "src/lp_analysis/vad_lp.sc"
void Vad_Lp::reset(void)
{   
    vad_computation.reset();
    tx_dtx.reset();
}

#line 7738 "vocoderPam.cc"
Encoder_Monitor::Encoder_Monitor(unsigned int _idcnt, i_receiver (&serial_bits), i_receiver (&c_txdtx_ctrl))
    : _specc::behavior(_idcnt), serial_bits(serial_bits), c_txdtx_ctrl(c_txdtx_ctrl)
{   
}

Encoder_Monitor::~Encoder_Monitor(void)
{   
}

#line 56 "src/monitor.sc"
void Encoder_Monitor::main(void)
{   
    unsigned long long int f_start = 0ull;

    int i;



    short int tmp[244];
    short int txdtx_ctrl;

#line 72 "src/monitor.sc"
    while(true)
    {   

#line 83 "src/monitor.sc"
	serial_bits.receive(tmp, sizeof (tmp));
	c_txdtx_ctrl.receive( &txdtx_ctrl, sizeof (txdtx_ctrl));

#line 93 "src/monitor.sc"
	f_start += 20000000000ull;

#line 100 "src/monitor.sc"
	printf("\t\t encoding delay = %2.2f ms", (double)
	    (now() - f_start) / (double)1.000000000000000e+09);




	for(i = 0; i < 244; i++ )
	    fprintf(f_serial, "%d", tmp[i]);



	fprintf(f_serial, "%d", (int)((txdtx_ctrl & 2) != 0));
	fprintf(f_serial, "%d", (int)((txdtx_ctrl & 1) != 0));
	fprintf(f_serial, "\n");
    }
}

#line 42 "src/monitor.sc"
int Encoder_Monitor::open_serial_outfile(char *serialfile_name)
{   

    if ((f_serial = fopen(serialfile_name, "w")) == 0)
    {   
	printf("Error opening output bitstream file %s !!\n", 
	    serialfile_name);
	return (0);
    }
    printf(" Output bitstream file:  %s\n", serialfile_name);
    return (1);
}

#line 7803 "vocoderPam.cc"
Get_Minmax::Get_Minmax(unsigned int _idcnt, short int (&T_op), short int (&T0_min), short int (&T0_max), short int (&txdtx_ctrl))
    : _specc::behavior(_idcnt), T_op(T_op), T0_min(T0_min), T0_max(T0_max), txdtx_ctrl(txdtx_ctrl)
{   
}

Get_Minmax::~Get_Minmax(void)
{   
}

#line 15 "src/open_loop/get_minmax.sc"
void Get_Minmax::main(void)
{   
    short int max; short int min;

#line 7818 "vocoderPam.cc"
    _specc::waitfor(66666ull);

#line 19 "src/open_loop/get_minmax.sc"
    if ((txdtx_ctrl & 1) != 0)
    {   


	min = sub(T_op, 3);

	if (sub(min, 18) < 0)
	{   
	    min = 18;
	}

	max = add(min, 6);

	if (sub(max, 143) > 0)
	{   
	    max = 143;
	    min = sub(max, 6);
	}

	T0_min = min;
	T0_max = max;
    }
}

#line 7846 "vocoderPam.cc"
Ol_Lag_Est_Seq1::Ol_Lag_Est_Seq1(unsigned int _idcnt, short int *(&wsp), short int *(&p_wsp_1), short int *(&p_wsp_2))
    : _specc::behavior(_idcnt), wsp(wsp), p_wsp_1(p_wsp_1), p_wsp_2(p_wsp_2)
{   
}

Ol_Lag_Est_Seq1::~Ol_Lag_Est_Seq1(void)
{   
}

#line 16 "src/open_loop/ol_lag_est.sc"
void Ol_Lag_Est_Seq1::main(void)
{   

#line 7860 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 18 "src/open_loop/ol_lag_est.sc"
    p_wsp_1 = wsp;
    p_wsp_2 = wsp + 80;
}

#line 7868 "vocoderPam.cc"
Ol_Lag_Est_Seq2::Ol_Lag_Est_Seq2(unsigned int _idcnt, short int *(&p_wsp_1), short int *(&p_wsp_2), short int (&T_op_1), short int (&T_op_2))
    : _specc::behavior(_idcnt), p_wsp_1(p_wsp_1), p_wsp_2(p_wsp_2), T_op_1(T_op_1), T_op_2(T_op_2),
    pitch_ol_1(_IDcnt, p_wsp_1, T_op_1),
    pitch_ol_2(_IDcnt, p_wsp_2, T_op_2)
{   
}

Ol_Lag_Est_Seq2::~Ol_Lag_Est_Seq2(void)
{   
}

void Ol_Lag_Est_Seq2::main(void)
{   
    pitch_ol_1.main();
    pitch_ol_2.main();
}

Ol_Lag_Est_Seq3::Ol_Lag_Est_Seq3(unsigned int _idcnt, short int (&T_op_1), short int (&T_op_2), short int (&T0_min_1), short int (&T0_max_1), short int (&T0_min_2), short int (&T0_max_2), short int (&txdtx_ctrl))
    : _specc::behavior(_idcnt), T_op_1(T_op_1), T_op_2(T_op_2), T0_min_1(T0_min_1), T0_max_1(T0_max_1), T0_min_2(T0_min_2), T0_max_2(T0_max_2), txdtx_ctrl(txdtx_ctrl),
    minmax_1(_IDcnt, T_op_1, T0_min_1, T0_max_1, txdtx_ctrl),
    minmax_2(_IDcnt, T_op_2, T0_min_2, T0_max_2, txdtx_ctrl)
{   
}

Ol_Lag_Est_Seq3::~Ol_Lag_Est_Seq3(void)
{   
}

void Ol_Lag_Est_Seq3::main(void)
{   
    minmax_1.main();
    minmax_2.main();
}

Ol_Lag_Est_Seq4::Ol_Lag_Est_Seq4(unsigned int _idcnt, short int (&lags)[2], short int (&T_op_1))
    : _specc::behavior(_idcnt), lags(lags), T_op_1(T_op_1)
{   
}

Ol_Lag_Est_Seq4::~Ol_Lag_Est_Seq4(void)
{   
}

#line 69 "src/open_loop/ol_lag_est.sc"
void Ol_Lag_Est_Seq4::main(void)
{   

#line 7916 "vocoderPam.cc"
    _specc::waitfor(16666ull);

#line 71 "src/open_loop/ol_lag_est.sc"
    lags[0] = T_op_1;
}

#line 7923 "vocoderPam.cc"
Ol_Lag_Est_Seq5::Ol_Lag_Est_Seq5(unsigned int _idcnt, short int (&lags)[2], short int (&T_op_2))
    : _specc::behavior(_idcnt), lags(lags), T_op_2(T_op_2)
{   
}

Ol_Lag_Est_Seq5::~Ol_Lag_Est_Seq5(void)
{   
}

#line 78 "src/open_loop/ol_lag_est.sc"
void Ol_Lag_Est_Seq5::main(void)
{   

#line 7937 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 80 "src/open_loop/ol_lag_est.sc"
    lags[1] = T_op_2;
}

#line 7944 "vocoderPam.cc"
Ol_Lag_Est::Ol_Lag_Est(unsigned int _idcnt, short int *(&wsp), short int (&T0_min_1), short int (&T0_max_1), short int (&T0_min_2), short int (&T0_max_2), bool (&ptch), short int (&txdtx_ctrl), bool (&dtx_mode), bool (&reset_flag))
    : _specc::behavior(_idcnt), wsp(wsp), T0_min_1(T0_min_1), T0_max_1(T0_max_1), T0_min_2(T0_min_2), T0_max_2(T0_max_2), ptch(ptch), txdtx_ctrl(txdtx_ctrl), dtx_mode(dtx_mode), reset_flag(reset_flag),
    periodicity_update(_IDcnt, lags, ptch, dtx_mode, reset_flag),
    seq1(_IDcnt, wsp, p_wsp_1, p_wsp_2),
    seq2(_IDcnt, p_wsp_1, p_wsp_2, T_op_1, T_op_2),
    seq3(_IDcnt, T_op_1, T_op_2, T0_min_1, T0_max_1, T0_min_2, T0_max_2, txdtx_ctrl),
    seq4(_IDcnt, lags, T_op_1),
    seq5(_IDcnt, lags, T_op_2)
{   
}

Ol_Lag_Est::~Ol_Lag_Est(void)
{   
}

#line 121 "src/open_loop/ol_lag_est.sc"
void Ol_Lag_Est::main(void)
{   
    { enum { _scc_state_0, _scc_state_seq1, _scc_state_seq2, _scc_state_seq3, _scc_state_seq4, _scc_state_seq5, _scc_state_periodicity_update } _scc_next_state = _scc_state_seq1; do switch(_scc_next_state) {

	    case _scc_state_seq1: { seq1.main(); { _scc_next_state = _scc_state_seq2; break; } }

	    case _scc_state_seq2: { seq2.main(); { _scc_next_state = _scc_state_seq3; break; } }

	    case _scc_state_seq3: { seq3.main(); { _scc_next_state = _scc_state_seq4; break; } }


	    case _scc_state_seq4: { seq4.main(); if (dtx_mode == 1) { _scc_next_state = _scc_state_seq5; break; }
		{ _scc_next_state = _scc_state_periodicity_update; break; } }


	    case _scc_state_seq5: { seq5.main(); { _scc_next_state = _scc_state_periodicity_update; break; } }

	    case _scc_state_periodicity_update: { periodicity_update.main(); { _scc_next_state = _scc_state_0; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

#line 115 "src/open_loop/ol_lag_est.sc"
void Ol_Lag_Est::reset(void)
{   
    periodicity_update.reset();
}

#line 7988 "vocoderPam.cc"
Open_Loop_Init::Open_Loop_Init(unsigned int _idcnt, int (&i), bool (&reset_flag), short int (&mem_w)[10])
    : _specc::behavior(_idcnt), i(i), reset_flag(reset_flag), mem_w(mem_w)
{   
}

Open_Loop_Init::~Open_Loop_Init(void)
{   
}

#line 21 "src/open_loop/open_loop.sc"
void Open_Loop_Init::init(void)
{   
    Set_zero(mem_w, 10);
}

#line 31 "src/open_loop/open_loop.sc"
void Open_Loop_Init::main(void)
{   

#line 8008 "vocoderPam.cc"
    _specc::waitfor(366666ull);

#line 33 "src/open_loop/open_loop.sc"
    if (reset_flag) init();

    i = 0;
}

#line 26 "src/open_loop/open_loop.sc"
void Open_Loop_Init::reset(void)
{   
    init();
}

#line 8023 "vocoderPam.cc"
Open_Loop_Body1::Open_Loop_Body1(unsigned int _idcnt, short int (&A_t)[4][11], short int *(&p_speech), int (&i), short int (&A_t_i)[11], short int *(&p_speech_i))
    : _specc::behavior(_idcnt), A_t(A_t), p_speech(p_speech), i(i), A_t_i(A_t_i), p_speech_i(p_speech_i)
{   
}

Open_Loop_Body1::~Open_Loop_Body1(void)
{   
}

#line 48 "src/open_loop/open_loop.sc"
void Open_Loop_Body1::main(void)
{   

#line 8037 "vocoderPam.cc"
    _specc::waitfor(33333ull);

#line 50 "src/open_loop/open_loop.sc"
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<11;_scc_index_0++) (A_t_i)[_scc_index_0] = (A_t[i])[_scc_index_0]; }
    p_speech_i = p_speech + i * 40;
}

#line 8045 "vocoderPam.cc"
Open_Loop_Body2::Open_Loop_Body2(unsigned int _idcnt, short int (&A_t_i)[11], short int (&ap1)[11], short int (&ap2)[11])
    : _specc::behavior(_idcnt), A_t_i(A_t_i), ap1(ap1), ap2(ap2),
    weight_ai_1(_IDcnt, A_t_i, F_gamma1, ap1),
    weight_ai_2(_IDcnt, A_t_i, F_gamma2, ap2)
{   
}

Open_Loop_Body2::~Open_Loop_Body2(void)
{   
}

void Open_Loop_Body2::main(void)
{   
    weight_ai_1.main();
    weight_ai_2.main();
}

Open_Loop_End::Open_Loop_End(unsigned int _idcnt, int (&i), short int (&wsp_i)[40], short int *(&wsp))
    : _specc::behavior(_idcnt), i(i), wsp_i(wsp_i), wsp(wsp)
{   
}

Open_Loop_End::~Open_Loop_End(void)
{   
}

#line 81 "src/open_loop/open_loop.sc"
void Open_Loop_End::main(void)
{   

#line 8076 "vocoderPam.cc"
    _specc::waitfor(50000ull);

#line 83 "src/open_loop/open_loop.sc"
    Copy(wsp_i, (short int *)wsp + i * 40, 40);
    i++ ;
}

#line 8084 "vocoderPam.cc"
Period_Upd::Period_Upd(unsigned int _idcnt, short int (&lags)[2], bool (&ptch), bool (&dtx_mode), bool (&reset_flag))
    : _specc::behavior(_idcnt), lags(lags), ptch(ptch), dtx_mode(dtx_mode), reset_flag(reset_flag)
{   
}

Period_Upd::~Period_Upd(void)
{   
}

#line 42 "src/open_loop/period_upd.sc"
void Period_Upd::init(void)
{   

    oldlagcount = 0;
    veryoldlagcount = 0;
    oldlag = 18;
}

#line 55 "src/open_loop/period_upd.sc"
void Period_Upd::main(void)
{   
    short int lagcount; short int maxlag; short int minlag; short int temp;
    int i;

#line 8109 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 60 "src/open_loop/period_upd.sc"
    if (reset_flag) init();

    if (dtx_mode != 1) return ;



    lagcount = 0;

    for(i = 0; i <= 1; i++ )
    {   



	if (sub(oldlag, lags[i]) > 0)
	{   
	    minlag = lags[i];
	    maxlag = oldlag;
	}
	else 
	{   
	    minlag = oldlag;
	    maxlag = lags[i];
	}

	temp = sub(maxlag, minlag);


	if (sub(temp, 2) < 0)
	{   
	    lagcount = add(lagcount, 1);
	}


	oldlag = lags[i];
    }



    veryoldlagcount = oldlagcount;

    oldlagcount = lagcount;



    temp = add(oldlagcount, veryoldlagcount);


    if (sub(temp, 4) >= 0)
    {   
	ptch = 1;
    }
    else 
    {   
	ptch = 0;
    }
}

#line 50 "src/open_loop/period_upd.sc"
void Period_Upd::reset(void)
{   
    init();
}

#line 8176 "vocoderPam.cc"
Pitch_Ol::Pitch_Ol(unsigned int _idcnt, short int *(&sig), short int (&p_max1))
    : _specc::behavior(_idcnt), sig(sig), p_max1(p_max1)
{   
}

Pitch_Ol::~Pitch_Ol(void)
{   
}

#line 56 "src/open_loop/pitch_ol.sc"
short int Pitch_Ol::Lag_max(
    short int scal_sig[], 
    short int scal_fac, 
    short int L_frame, 
    short int lag_max, 
    short int lag_min, 
    short int *cor_max)
{   
    int i; int j;
    short int *p; short int *p1;
    int max; int t0;
    short int ener_h; short int ener_l; short int max_h; short int max_l;
    short int p_max;

    max = (int)2147483648ul;

    for(i = lag_max; i >= lag_min; i-- )
    {   
	p = scal_sig;
	p1 =  &scal_sig[ -i];
	t0 = 0;

	for(j = 0; j < L_frame; j++  , p++  , p1++ )
	{   
	    t0 = L_mac(t0,  *p,  *p1);
	}

	if (L_sub(t0, max) >= 0)
	{   
	    max = t0;
	    p_max = i;
	}
    }



    t0 = 0;
    p =  &scal_sig[ -p_max];
    for(i = 0; i < L_frame; i++  , p++ )
    {   
	t0 = L_mac(t0,  *p,  *p);
    }


    t0 = Inv_sqrt(t0);
    t0 = L_shl(t0, 1);



    L_Extract(max,  &max_h,  &max_l);
    L_Extract(t0,  &ener_h,  &ener_l);

    t0 = Mpy_32(max_h, max_l, ener_h, ener_l);
    t0 = L_shr(t0, scal_fac);

     *cor_max = extract_h(L_shl(t0, 15));

    return (p_max);
}



void Pitch_Ol::main(void)
{   
    int i; int j;
    short int max1; short int max2; short int max3;
    short int p_max2; short int p_max3;
    int t0;




    short int scaled_signal[512];
    short int scal_fac; short int *scal_sig;

#line 8262 "vocoderPam.cc"
    _specc::waitfor(552633333ull);

#line 131 "src/open_loop/pitch_ol.sc"
    scal_sig =  &scaled_signal[143];

    t0 = 0l;
    for(i =  -143; i < 80; i++ )
    {   
	t0 = L_mac(t0, sig[i], sig[i]);
    }

#line 151 "src/open_loop/pitch_ol.sc"
    if (L_sub(t0, (int)2147483647l) == 0l)
    {   
	for(i =  -143; i < 80; i++ )
	{   
	    scal_sig[i] = shr(sig[i], 3);
	}
	scal_fac = 3;
    }
    else  if (L_sub(t0, (int)1048576l) < (int)0)

	{   
	    for(i =  -143; i < 80; i++ )
	    {   
		scal_sig[i] = shl(sig[i], 3);
	    }
	    scal_fac =  -3;
	}
	else 
	{   
	    for(i =  -143; i < 80; i++ )
	    {   
		scal_sig[i] = sig[i];
	    }
	    scal_fac = 0;
	}

#line 188 "src/open_loop/pitch_ol.sc"
    j = shl(18, 2);
    p_max1 = Lag_max(scal_sig, scal_fac, 80, 143, j,  &max1);

    i = sub(j, 1);
    j = shl(18, 1);
    p_max2 = Lag_max(scal_sig, scal_fac, 80, i, j,  &max2);

    i = sub(j, 1);
    p_max3 = Lag_max(scal_sig, scal_fac, 80, i, 18,  &max3);

#line 203 "src/open_loop/pitch_ol.sc"
    if (sub(mult(max1, 27853), max2) < 0)
    {   
	max1 = max2;
	p_max1 = p_max2;
    }

    if (sub(mult(max1, 27853), max3) < 0)
    {   
	p_max1 = p_max3;
    }
}

#line 8325 "vocoderPam.cc"
Cn_Encoder::Cn_Encoder(unsigned int _idcnt, short int (&paramsi)[57], short int (&paramso)[57], short int (&txdtx_ctrl), bool (&reset_flag))
    : _specc::behavior(_idcnt), paramsi(paramsi), paramso(paramso), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag)
{   
}

Cn_Encoder::~Cn_Encoder(void)
{   
}

#line 42 "src/processing/cn_encoding.sc"
void Cn_Encoder::init(void)
{   
    int i;

    for(i = 0; i < 6; i++ )
    {   
	old_CN_mem_tx[i] = 0;
    }
}

#line 57 "src/processing/cn_encoding.sc"
void Cn_Encoder::main(void)
{   
    int i;

#line 8351 "vocoderPam.cc"
    _specc::waitfor(0ull);

#line 61 "src/processing/cn_encoding.sc"
    if (reset_flag) init();

    if ((txdtx_ctrl & 1) == 0)
    {   
	if ((txdtx_ctrl & 16) != 0)
	{   




	    for(i = 0; i < 5; i++ )
	    {   
		old_CN_mem_tx[i] = paramsi[i];
	    }

	    old_CN_mem_tx[5] = paramsi[56];
	}
	if ((txdtx_ctrl & 32) != 0)
	{   

	    for(i = 0; i < 5; i++ )
	    {   
		paramso[i] = old_CN_mem_tx[i];
	    }
	    paramso[17] = old_CN_mem_tx[5];
	    paramso[30] = old_CN_mem_tx[5];
	    paramso[43] = old_CN_mem_tx[5];
	    paramso[56] = old_CN_mem_tx[5];
	}


	for(i = 0; i < 12; i++ )
	{   
	    paramso[i + 5] = 0;
	    paramso[i + 18] = 0;
	    paramso[i + 31] = 0;
	    paramso[i + 44] = 0;
	}
    }
    else  {
	{ unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<57;_scc_index_0++) (paramso)[_scc_index_0] = (paramsi)[_scc_index_0]; }
    }
}

#line 52 "src/processing/cn_encoding.sc"
void Cn_Encoder::reset(void)
{   
    init();
}

#line 8405 "vocoderPam.cc"
Filter_And_Scale::Filter_And_Scale(unsigned int _idcnt, bool (&reset_flag), short int (&input_frame)[160], short int (&sig_out)[160])
    : _specc::behavior(_idcnt), reset_flag(reset_flag), input_frame(input_frame), sig_out(sig_out)
{   
}

Filter_And_Scale::~Filter_And_Scale(void)
{   
}

#line 43 "src/processing/filter_and_scale.sc"
void Filter_And_Scale::init(void)
{   
    y2_hi = 0;
    y2_lo = 0;
    y1_hi = 0;
    y1_lo = 0;
    x0 = 0;
    x1 = 0;
}

#line 70 "src/processing/filter_and_scale.sc"
void Filter_And_Scale::main(void)
{   
    int i;
    short int x2;
    int L_tmp;


    const short int b[3] = { ((short int)1899),((short int)-3798),((short int)1899) };
    const short int a[3] = { ((short int)4096),((short int)7807),((short int)-3733) };

#line 8437 "vocoderPam.cc"
    _specc::waitfor(40033333ull);

#line 80 "src/processing/filter_and_scale.sc"
    if (reset_flag) init();


    for(i = 0; i < 160; i++ )
    {   
	x2 = x1;
	x1 = x0;

	x0 = (input_frame[i] << 3);

#line 97 "src/processing/filter_and_scale.sc"
	L_tmp = Mpy_32_16(y1_hi, y1_lo, a[1]);
	L_tmp = L_add(L_tmp, Mpy_32_16(y2_hi, y2_lo, a[2]));
	L_tmp = L_mac(L_tmp, x0, b[0]);
	L_tmp = L_mac(L_tmp, x1, b[1]);
	L_tmp = L_mac(L_tmp, x2, b[2]);
	L_tmp = L_shl(L_tmp, 3);
	sig_out[i] = round(L_tmp);

	y2_hi = y1_hi;
	y2_lo = y1_lo;
	L_Extract(L_tmp,  &y1_hi,  &y1_lo);
    }
}

#line 53 "src/processing/filter_and_scale.sc"
void Filter_And_Scale::reset(void)
{   
    init();
}

#line 8472 "vocoderPam.cc"
Encoder_Homingframe_Test::Encoder_Homingframe_Test(unsigned int _idcnt, short int (&input_frame)[160], bool (&j))
    : _specc::behavior(_idcnt), input_frame(input_frame), j(j)
{   
}

Encoder_Homingframe_Test::~Encoder_Homingframe_Test(void)
{   
}

#line 47 "src/processing/homing_test.sc"
void Encoder_Homingframe_Test::main(void)
{   
    bool f;
    int i;

#line 8488 "vocoderPam.cc"
    _specc::waitfor(83333ull);

#line 53 "src/processing/homing_test.sc"
    for(i = 0; i < 160; i++ )
    {   
	if ( !(f = input_frame[i] == 1))
	    break;
    }

    j = f;
}

#line 8501 "vocoderPam.cc"
Decoder_Homingframe_Test::Decoder_Homingframe_Test(unsigned int _idcnt, short int *(&parm), int (&nbr_of_params), bool (&res))
    : _specc::behavior(_idcnt), parm(parm), nbr_of_params(nbr_of_params), res(res)
{   
}

Decoder_Homingframe_Test::~Decoder_Homingframe_Test(void)
{   
}

#line 153 "src/processing/homing_test.sc"
void Decoder_Homingframe_Test::main(void)
{   
    short int i; short int j;

    const short int dhf_mask[57] = { 

      ((short int)4),
      ((short int)47),
      ((short int)180),
      ((short int)144),
      ((short int)62),

      ((short int)342),
      ((short int)11),
      ((short int)0),
      ((short int)1),
      ((short int)15),
      ((short int)1),
      ((short int)13),
      ((short int)0),
      ((short int)3),
      ((short int)0),
      ((short int)3),
      ((short int)0),
      ((short int)3),

      ((short int)54),
      ((short int)1),
      ((short int)8),
      ((short int)8),
      ((short int)5),
      ((short int)8),
      ((short int)1),
      ((short int)0),
      ((short int)0),
      ((short int)1),
      ((short int)1),
      ((short int)0),
      ((short int)0),

      ((short int)342),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),

      ((short int)54),
      ((short int)11),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0),
      ((short int)0) };

    for(i = 0; i < nbr_of_params; i++ )
    {   
	j = parm[i] ^ dhf_mask[i];

	if (j)
	    break;
    }

    res =  !j;
}

#line 8591 "vocoderPam.cc"
Post_Process_Seq1::Post_Process_Seq1(unsigned int _idcnt, short int (&txdtx_ctrl), short int (&local_serial)[244], i_sender (&txdtx_ctrl_out), i_sender (&serial))
    : _specc::behavior(_idcnt), txdtx_ctrl(txdtx_ctrl), local_serial(local_serial), txdtx_ctrl_out(txdtx_ctrl_out), serial(serial)
{   
}

Post_Process_Seq1::~Post_Process_Seq1(void)
{   
}

#line 30 "src/processing/post_process.sc"
void Post_Process_Seq1::main(void)
{   

#line 8605 "vocoderPam.cc"
    _specc::waitfor(33333ull);

#line 43 "src/processing/post_process.sc"
    serial.send(local_serial, sizeof (local_serial));
    txdtx_ctrl_out.send( &txdtx_ctrl, sizeof (txdtx_ctrl));
}

#line 8613 "vocoderPam.cc"
Pre_Process_Seq1::Pre_Process_Seq1(unsigned int _idcnt, bool (&reset_next), bool (&reset_flag), bool (&reset_flag_1), bool (&reset_flag_2), i_receiver (&speech_frame), i_receiver (&dtx_mode), short int (&local_speech_frame)[160], bool (&local_dtx_mode))
    : _specc::behavior(_idcnt), reset_next(reset_next), reset_flag(reset_flag), reset_flag_1(reset_flag_1), reset_flag_2(reset_flag_2), speech_frame(speech_frame), dtx_mode(dtx_mode), local_speech_frame(local_speech_frame), local_dtx_mode(local_dtx_mode)
{   
}

Pre_Process_Seq1::~Pre_Process_Seq1(void)
{   
}

#line 42 "src/processing/pre_process.sc"
void Pre_Process_Seq1::main(void)
{   

    static bool First = true;

#line 8629 "vocoderPam.cc"
    _specc::waitfor(66666ull);

#line 52 "src/processing/pre_process.sc"
    reset_flag_1 = reset_flag = reset_next;
    reset_flag_2 = reset_flag;

    if (reset_next == 1)
    {   

#line 62 "src/processing/pre_process.sc"
	reset_next = 0;
    }

#line 73 "src/processing/pre_process.sc"
    if (First)
    {   
	dtx_mode.receive( &local_dtx_mode, sizeof (local_dtx_mode));
	First = false;
    }

#line 93 "src/processing/pre_process.sc"
    speech_frame.receive(local_speech_frame, sizeof (local_speech_frame));
}

#line 8654 "vocoderPam.cc"
Prm2bits_12k2::Prm2bits_12k2(unsigned int _idcnt, short int (&prm)[57], short int (&serial)[244])
    : _specc::behavior(_idcnt), prm(prm), serial(serial)
{   
}

Prm2bits_12k2::~Prm2bits_12k2(void)
{   
}

#line 57 "src/processing/prm2bits.sc"
void Prm2bits_12k2::Int2bin(
    short int value, 
    short int no_of_bits, 
    short int *bitstream)

{   
    short int *pt_bitstream;
    short int bt; short int i;

    pt_bitstream =  &bitstream[no_of_bits];

    for(i = 0; i < no_of_bits; i++ )
    {   
	bt = value & 1;

	if (bt == 0)
	{   
	     * --pt_bitstream = 0;
	}
	else 
	{   
	     * --pt_bitstream = 1;
	}
	value = shr(value, 1);
    }
}


void Prm2bits_12k2::main(void)
{   




    short int i;
    short int *p_bits;

    short int bits[244];

    static const short int bitno[57] = { 

      ((short int)7),((short int)8),((short int)9),((short int)8),((short int)6),
      ((short int)9),((short int)4),((short int)4),((short int)4),((short int)4),((short int)4),((short int)4),((short int)3),((short int)3),((short int)3),((short int)3),((short int)3),((short int)5),
      ((short int)6),((short int)4),((short int)4),((short int)4),((short int)4),((short int)4),((short int)4),((short int)3),((short int)3),((short int)3),((short int)3),((short int)3),((short int)5),
      ((short int)9),((short int)4),((short int)4),((short int)4),((short int)4),((short int)4),((short int)4),((short int)3),((short int)3),((short int)3),((short int)3),((short int)3),((short int)5),
      ((short int)6),((short int)4),((short int)4),((short int)4),((short int)4),((short int)4),((short int)4),((short int)3),((short int)3),((short int)3),((short int)3),((short int)3),((short int)5) };

#line 8712 "vocoderPam.cc"
    _specc::waitfor(40466666ull);

#line 105 "src/processing/prm2bits.sc"
    p_bits = bits;

    for(i = 0; i < 57; i++ )
    {   
	Int2bin(prm[i], bitno[i], p_bits);
	p_bits += bitno[i];
    }

    for(i = 0; i < (244); i++ )
    {   
	serial[i] = bits[i];
    }
}

#line 8730 "vocoderPam.cc"
Sid_Codeword_Encoder::Sid_Codeword_Encoder(unsigned int _idcnt, short int (&ser1)[244], short int (&txdtx_ctrl), short int (&ser2)[244])
    : _specc::behavior(_idcnt), ser1(ser1), txdtx_ctrl(txdtx_ctrl), ser2(ser2)
{   
}

Sid_Codeword_Encoder::~Sid_Codeword_Encoder(void)
{   
}

#line 37 "src/processing/sid_codeword_encode.sc"
void Sid_Codeword_Encoder::main(void)
{   
    int i;


    const short int SID_codeword_bit_idx[95] = { 

      ((short int)45),((short int)46),((short int)48),((short int)49),((short int)50),((short int)51),((short int)52),((short int)53),((short int)54),((short int)55),
      ((short int)56),((short int)57),((short int)58),((short int)59),((short int)60),((short int)61),((short int)62),((short int)63),((short int)64),((short int)65),
      ((short int)66),((short int)67),((short int)68),((short int)94),((short int)95),((short int)96),((short int)98),((short int)99),((short int)100),((short int)101),
      ((short int)102),((short int)103),((short int)104),((short int)105),((short int)106),((short int)107),((short int)108),((short int)109),((short int)110),((short int)111),
      ((short int)112),((short int)113),((short int)114),((short int)115),((short int)116),((short int)117),((short int)118),((short int)148),((short int)149),((short int)150),
      ((short int)151),((short int)152),((short int)153),((short int)154),((short int)155),((short int)156),((short int)157),((short int)158),((short int)159),((short int)160),
      ((short int)161),((short int)162),((short int)163),((short int)164),((short int)165),((short int)166),((short int)167),((short int)168),((short int)169),((short int)170),
      ((short int)171),((short int)196),((short int)197),((short int)198),((short int)199),((short int)200),((short int)201),((short int)202),((short int)203),((short int)204),
      ((short int)205),((short int)206),((short int)207),((short int)208),((short int)209),((short int)212),((short int)213),((short int)214),((short int)215),((short int)216),
      ((short int)217),((short int)218),((short int)219),((short int)220),((short int)221) };

#line 8759 "vocoderPam.cc"
    _specc::waitfor(12233333ull);

#line 58 "src/processing/sid_codeword_encode.sc"
    for(i = 0; i < 244; i++ )
	ser2[i] = ser1[i];

#line 66 "src/processing/sid_codeword_encode.sc"
    if ((txdtx_ctrl & 1) == 0)
    {   
	for(i = 0; i < 95; i++ )
	{   
	    ser2[SID_codeword_bit_idx[i]] = 1;
	}
    }
}

#line 8776 "vocoderPam.cc"
Encoder_Stimulus::Encoder_Stimulus(unsigned int _idcnt, i_sender (&speech_samples), i_sender (&dtx_mode))
    : _specc::behavior(_idcnt), speech_samples(speech_samples), dtx_mode(dtx_mode),
    f_speech(0)
{   
}

Encoder_Stimulus::~Encoder_Stimulus(void)
{   
}

#line 66 "src/stimulus.sc"
void Encoder_Stimulus::main()
{   
    int frame_count = 0;
    int sample_count;
    unsigned long long int f_start = 0ull;


    short int samples[160];


    short int tmp[160];

#line 85 "src/stimulus.sc"
    dtx_mode.send( &local_dtx_mode, sizeof (local_dtx_mode));



    f_start = now();


    while(fread(samples, sizeof(short int), 160, f_speech) == 160)
    {   

	_specc::waitfor(20000000000ull - ((now() - f_start) % 20000000000ull));
	f_start = now();




	printf("\nframe=%3d ",  ++frame_count);




	for(sample_count = 0; sample_count < 160; sample_count++ ) {
	    samples[sample_count] = order_bytes(samples[sample_count]);

	    tmp[sample_count] = ((short)((_bit(samples[sample_count])(15,3))).toInt());
	}

#line 122 "src/stimulus.sc"
	speech_samples.send(tmp, sizeof (tmp));
    }

#line 130 "src/stimulus.sc"
    fclose(f_speech);
    f_speech = 0;

#line 151 "src/stimulus.sc"
    _specc::waitfor(20000000000ull);



    printf("\n\ndone, %d frames encoded\n\n", frame_count);


    exit(0);
}

#line 45 "src/stimulus.sc"
int Encoder_Stimulus::open_speech_infile(char *speechfile_name, bool dtx)
{   
    struct _IO_FILE *f;

    local_dtx_mode = dtx;

#line 56 "src/stimulus.sc"
    if ((f = fopen(speechfile_name, "rb")) == 0)
    {   
	printf("Error opening input file  %s !!\n", speechfile_name);
	return (0);
    }
    printf(" Input speech file:  %s\n", speechfile_name);
    f_speech = f;
    return (1);
}

#line 8865 "vocoderPam.cc"
Ex_Syn_Upd_Sh_Init::Ex_Syn_Upd_Sh_Init(unsigned int _idcnt, bool (&reset_flag), short int (&mem_syn)[10])
    : _specc::behavior(_idcnt), reset_flag(reset_flag), mem_syn(mem_syn)
{   
}

Ex_Syn_Upd_Sh_Init::~Ex_Syn_Upd_Sh_Init(void)
{   
}

#line 24 "src/update/ex_syn_upd_sh.sc"
void Ex_Syn_Upd_Sh_Init::init(void)
{   
    Set_zero((short int *)mem_syn, 10);
}

#line 34 "src/update/ex_syn_upd_sh.sc"
void Ex_Syn_Upd_Sh_Init::main(void)
{   

#line 8885 "vocoderPam.cc"
    _specc::waitfor(83333ull);

#line 36 "src/update/ex_syn_upd_sh.sc"
    if (reset_flag) init();
}

#line 29 "src/update/ex_syn_upd_sh.sc"
void Ex_Syn_Upd_Sh_Init::reset(void)
{   
    init();
}

#line 8898 "vocoderPam.cc"
Ex_Syn_Upd_Sh::Ex_Syn_Upd_Sh(unsigned int _idcnt, short int (&gain_pit), short int (&gain_code), short int (&exc_i)[40], short int (&speech_i)[40], short int (&synth_i)[40], short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], short int (&code)[40], short int (&Aq)[11], short int (&mem_err)[10], short int (&mem_w0)[10], short int (&txdtx_ctrl), bool (&reset_flag))
    : _specc::behavior(_idcnt), gain_pit(gain_pit), gain_code(gain_code), exc_i(exc_i), speech_i(speech_i), synth_i(synth_i), xn(xn), y1(y1), y2(y2), code(code), Aq(Aq), mem_err(mem_err), mem_w0(mem_w0), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag),
    _scc_const_port_0(true),
    copy(_IDcnt, synth, synth_i),
    excitation(_IDcnt, gain_pit, gain_code, code, exc_i),
    init(_IDcnt, reset_flag, mem_syn),
    syn_filt(_IDcnt, Aq, exc_i, synth, mem_syn, _scc_const_port_0),
    upd_mem(_IDcnt, speech_i, synth, xn, y1, y2, gain_pit, gain_code, mem_err, mem_w0, txdtx_ctrl)
{   
}

Ex_Syn_Upd_Sh::~Ex_Syn_Upd_Sh(void)
{   
}

#line 80 "src/update/ex_syn_upd_sh.sc"
void Ex_Syn_Upd_Sh::main(void)
{   
    init.main();

    excitation.main();

    syn_filt.main();
    upd_mem.main();

    copy.main();
}

#line 74 "src/update/ex_syn_upd_sh.sc"
void Ex_Syn_Upd_Sh::reset(void)
{   
    init.reset();
}

#line 8933 "vocoderPam.cc"
Excitation::Excitation(unsigned int _idcnt, short int (&gain_pit), short int (&gain_code), short int (&code)[40], short int (&exc_i)[40])
    : _specc::behavior(_idcnt), gain_pit(gain_pit), gain_code(gain_code), code(code), exc_i(exc_i)
{   
}

Excitation::~Excitation(void)
{   
}

#line 17 "src/update/excitation.sc"
void Excitation::main(void)
{   
    int i;
    int L_temp;

#line 8949 "vocoderPam.cc"
    _specc::waitfor(4033333ull);

#line 30 "src/update/excitation.sc"
    for(i = 0; i < 40; i++ )
    {   


	L_temp = L_mult(exc_i[i], gain_pit);
	L_temp = L_mac(L_temp, code[i], gain_code);
	L_temp = L_shl(L_temp, 3);
	exc_i[i] = round(L_temp);
    }
}

#line 8964 "vocoderPam.cc"
Q_Gain_Code::Q_Gain_Code(unsigned int _idcnt, int (&i_subfr), short int (&code)[40], short int (&gain), short int (&qgain), short int (&txdtx_ctrl), short int (&CN_excitation_gain), short int (&index), bool (&reset_flag))
    : _specc::behavior(_idcnt), i_subfr(i_subfr), code(code), gain(gain), qgain(qgain), txdtx_ctrl(txdtx_ctrl), CN_excitation_gain(CN_excitation_gain), index(index), reset_flag(reset_flag)
{   
}

Q_Gain_Code::~Q_Gain_Code(void)
{   
}

#line 149 "src/update/q_gain_code.sc"
short int Q_Gain_Code::Aver_gain_code_history(
    short int CN_exc_gain, 
    short int gain_code_old[28])

{   
    int i;
    int L_ret;

    L_ret = L_mult(1136, CN_exc_gain);

    for(i = 0; i < (4 * 7); i++ )
    {   
	L_ret = L_mac(L_ret, 1136, gain_code_old[i]);
    }
    return extract_h(L_ret);
}

#line 105 "src/update/q_gain_code.sc"
void Q_Gain_Code::Update_gain_code_history_tx(
    short int new_gain_code)

{   


    gain_code_old_tx[buf_p_tx] = new_gain_code;


    if (sub(buf_p_tx, (4 * 7 - 1)) == 0)
    {   
	buf_p_tx = 0;
    }
    else 
    {   
	buf_p_tx = add(buf_p_tx, 1);
    }

    return ;
}

#line 54 "src/update/q_gain_code.sc"
void Q_Gain_Code::init(void)
{   
    int i;

    for(i = 0; i < 4; i++ )
    {   
	past_qua_en[i] =  -2381;
    }
    pred[0] = 44;
    pred[1] = 37;
    pred[2] = 22;
    pred[3] = 12;

    for(i = 0; i < 4 * 7; i++ )
    {   
	gain_code_old_tx[i] = 0;
    }

    buf_p_tx = 0;
}

#line 210 "src/update/q_gain_code.sc"
void Q_Gain_Code::main(void)
{   
    int i;
    short int err; short int err_min; short int exp; short int frac; short int gcode0;
    int ener; int ener_code;
    short int aver_gain;
    static short int gcode0_CN;

#line 222 "src/update/q_gain_code.sc"
    const short int qua_gain_code[32] = { 

      ((short int)159),((short int)206),((short int)268),((short int)349),((short int)419),((short int)482),((short int)554),((short int)637),
      ((short int)733),((short int)842),((short int)969),((short int)1114),((short int)1281),((short int)1473),((short int)1694),((short int)1948),
      ((short int)2241),((short int)2577),((short int)2963),((short int)3408),((short int)3919),((short int)4507),((short int)5183),((short int)5960),
      ((short int)6855),((short int)7883),((short int)9065),((short int)10425),((short int)12510),((short int)16263),((short int)21142),((short int)27485) };

#line 9053 "vocoderPam.cc"
    _specc::waitfor(4733333ull);

#line 230 "src/update/q_gain_code.sc"
    if (reset_flag) init();

    if ((txdtx_ctrl & 1) != 0)
    {   

#line 244 "src/update/q_gain_code.sc"
	ener_code = 0;
	for(i = 0; i < 40; i++ )
	{   
	    ener_code = L_mac(ener_code, code[i], code[i]);
	}

	ener_code = L_mult(round(ener_code), 26214);


	Log2(ener_code,  &exp,  &frac);
	ener_code = L_Comp(sub(exp, 30), frac);



	ener = 783741l;
	for(i = 0; i < 4; i++ )
	{   
	    ener = L_mac(ener, past_qua_en[i], pred[i]);
	}

#line 272 "src/update/q_gain_code.sc"
	ener = L_shr(L_sub(ener, ener_code), 1);
	L_Extract(ener,  &exp,  &frac);

	gcode0 = extract_l(Pow2(exp, frac));

	gcode0 = shl(gcode0, 4);

#line 283 "src/update/q_gain_code.sc"
	err_min = abs_s(sub(gain, mult(gcode0, qua_gain_code[0])));
	index = 0;

	for(i = 1; i < 32; i++ )
	{   
	    err = abs_s(sub(gain, mult(gcode0, qua_gain_code[i])));


	    if (sub(err, err_min) < 0)
	    {   
		err_min = err;
		index = i;
	    }
	}

	qgain = gcode0 = mult(gcode0, qua_gain_code[index]);

#line 309 "src/update/q_gain_code.sc"
	for(i = 3; i > 0; i-- )
	{   
	    past_qua_en[i] = past_qua_en[i - 1];
	}
	Log2(L_deposit_l(qua_gain_code[index]),  &exp,  &frac);

	past_qua_en[0] = shr(frac, 5);
	past_qua_en[0] = add(past_qua_en[0], shl(sub(exp, 11), 10));


	Update_gain_code_history_tx(gcode0);
    }
    else 
    {   

	if ((txdtx_ctrl & 8) != 0 && (i_subfr == 0))
	{   
	    gcode0_CN = update_gcode0_CN(gain_code_old_tx);
	    gcode0_CN = shl(gcode0_CN, 4);
	}
	qgain = gcode0 = CN_excitation_gain;


	if ((txdtx_ctrl & 16) != 0)
	{   
	    aver_gain = Aver_gain_code_history(CN_excitation_gain, 
		gain_code_old_tx);

#line 341 "src/update/q_gain_code.sc"
	    err_min = abs_s(sub(aver_gain, 
		    mult(gcode0_CN, qua_gain_code[0])));
	    index = 0;

	    for(i = 1; i < 32; i++ )
	    {   
		err = abs_s(sub(aver_gain, 
			mult(gcode0_CN, qua_gain_code[i])));


		if (sub(err, err_min) < 0)
		{   
		    err_min = err;
		    index = i;
		}
	    }
	}
	Update_gain_code_history_tx(gcode0);

#line 365 "src/update/q_gain_code.sc"
	for(i = 0; i < 4; i++ )
	{   
	    past_qua_en[i] =  -2381;
	}
    }
}

#line 77 "src/update/q_gain_code.sc"
void Q_Gain_Code::reset(void)
{   
    init();
}

#line 186 "src/update/q_gain_code.sc"
short int Q_Gain_Code::update_gcode0_CN(
    short int gain_code_old[28])

{   
    int i; int j;
    int L_ret; int L_temp;

    L_ret = 0l;
    for(i = 0; i < 7; i++ )
    {   
	L_temp = L_mult(8191, gain_code_old[4 * i]);
	for(j = 1; j < 4; j++ )
	{   
	    L_temp = L_mac(L_temp, 8191, gain_code_old[4 * i + j]);
	}
	L_ret = L_mac(L_ret, (32767 / 7), extract_h(L_temp));
    }

    return extract_h(L_ret);
}

#line 9194 "vocoderPam.cc"
Upd_Mem::Upd_Mem(unsigned int _idcnt, short int (&speech)[40], short int (&synth)[40], short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], short int (&gain_pit), short int (&gain_code), short int (&mem_err)[10], short int (&mem_w0)[10], short int (&txdtx_ctrl))
    : _specc::behavior(_idcnt), speech(speech), synth(synth), xn(xn), y1(y1), y2(y2), gain_pit(gain_pit), gain_code(gain_code), mem_err(mem_err), mem_w0(mem_w0), txdtx_ctrl(txdtx_ctrl)
{   
}

Upd_Mem::~Upd_Mem(void)
{   
}

#line 22 "src/update/upd_mem.sc"
void Upd_Mem::main(void)
{   
    int i; int j;
    short int k;
    short int temp;

#line 9211 "vocoderPam.cc"
    _specc::waitfor(1233333ull);

#line 28 "src/update/upd_mem.sc"
    if ((txdtx_ctrl & 1) != 0)
    {   

	for(i = 40 - 10 , j = 0; i < 40; i++  , j++ )
	{   
	    mem_err[j] = sub(speech[i], synth[i]);

	    temp = extract_h(L_shl(L_mult(y1[i], gain_pit), 3));
	    k = extract_h(L_shl(L_mult(y2[i], gain_code), 5));
	    mem_w0[j] = sub(xn[i], add(temp, k));
	}
    }
    else 
    {   
	for(j = 0; j < 10; j++ )
	{   
	    mem_err[j] = 0;
	    mem_w0[j] = 0;
	}
    }
}

#line 9237 "vocoderPam.cc"
SpeechIn::SpeechIn(unsigned int _idcnt, i_receiver (&speech_in), i_sender (&speech), i_receiver (&dtx_mode_in), i_sender (&dtx_mode))
    : _specc::behavior(_idcnt), speech_in(speech_in), speech(speech), dtx_mode_in(dtx_mode_in), dtx_mode(dtx_mode)
{   
}

SpeechIn::~SpeechIn(void)
{   
}

#line 287 "src/vocoder.sc"
void SpeechIn::main(void)
{   
    short int samples[160];
    bool mode;

    dtx_mode_in.receive( &mode, sizeof (mode));
    dtx_mode.send( &mode, sizeof (mode));

    while(true) {
	speech_in.receive(samples, sizeof (samples));
	speech.send(samples, sizeof (samples));
    }
}

#line 9262 "vocoderPam.cc"
SerialOut::SerialOut(unsigned int _idcnt, i_receiver (&serial), i_sender (&serial_out), i_receiver (&txdtx), i_sender (&txdtx_out))
    : _specc::behavior(_idcnt), serial(serial), serial_out(serial_out), txdtx(txdtx), txdtx_out(txdtx_out)
{   
}

SerialOut::~SerialOut(void)
{   
}

#line 305 "src/vocoder.sc"
void SerialOut::main(void)
{   
    short int data[244];
    short int txdtx_ctrl;

    while(true) {
	serial.receive(data, sizeof (data));
	txdtx.receive( &txdtx_ctrl, sizeof (txdtx_ctrl));
	serial_out.send(data, sizeof (data));
	txdtx_out.send( &txdtx_ctrl, sizeof (txdtx_ctrl));
    }
}

#line 9286 "vocoderPam.cc"
Vocoder::Vocoder(unsigned int _idcnt, i_receiver (&samples_in), i_receiver (&dtx_mode_in), i_sender (&serial_bits_out), i_sender (&txdtx_ctrl_out))
    : _specc::behavior(_idcnt), samples_in(samples_in), dtx_mode_in(dtx_mode_in), serial_bits_out(serial_bits_out), txdtx_ctrl_out(txdtx_ctrl_out),
    coder(++_IDcnt, speech_samples, dtx_mode, serial_bits, txdtx_ctrl),
    dtx_mode(),
    serial(++_IDcnt, serial_bits, serial_bits_out, txdtx_ctrl, txdtx_ctrl_out),
    serial_bits(),
    speech(++_IDcnt, samples_in, speech_samples, dtx_mode_in, dtx_mode),
    speech_samples(),
    txdtx_ctrl()
{   
}

Vocoder::~Vocoder(void)
{   
}

#line 376 "src/vocoder.sc"
void Vocoder::main(void)
{   
    { _specc::fork _scc_fork_0(&speech), _scc_fork_1(&coder), _scc_fork_2(&serial); _specc::par(

#line 9308 "vocoderPam.cc"
	    &_scc_fork_0, &_scc_fork_1, &_scc_fork_2, ((_specc::fork*)0));
    }
}

#line 371 "src/vocoder.sc"
void Vocoder::reset(void)
{   

#line 9317 "vocoderPam.cc"
    coder.reset();
}

GSM_Vocoder::GSM_Vocoder(unsigned int _idcnt)
    : _specc::behavior(_idcnt),
    local_dtx_mode(),
    monitor(++_IDcnt, serial_bits, txdtx_ctrl),
    serial_bits(),
    speech_samples(),
    stimulus(++_IDcnt, speech_samples, local_dtx_mode),
    txdtx_ctrl(),
    vocoder(++_IDcnt, speech_samples, local_dtx_mode, serial_bits, txdtx_ctrl)
{   
}

GSM_Vocoder::~GSM_Vocoder(void)
{   
}

#line 474 "src/vocoder.sc"
void GSM_Vocoder::main(void)
{   
    { _specc::fork _scc_fork_0(&stimulus), _scc_fork_1(&vocoder), _scc_fork_2(&monitor); _specc::par(

	    &_scc_fork_0, 

	    &_scc_fork_1, 

#line 487 "src/vocoder.sc"
	    &_scc_fork_2, ((_specc::fork*)0));
    }
}

#line 461 "src/vocoder.sc"
int GSM_Vocoder::open_serial_outfile(char *serialfile_name) {
    return monitor.open_serial_outfile(serialfile_name);
}

#line 429 "src/vocoder.sc"
int GSM_Vocoder::open_speech_infile(char *speechfile_name, bool dtx_mode) {
    return stimulus.open_speech_infile(speechfile_name, dtx_mode);
}

#line 465 "src/vocoder.sc"
void GSM_Vocoder::reset(void)
{   

    vocoder.reset();
}

#line 9368 "vocoderPam.cc"
Main::Main(unsigned int _idcnt)
    : _specc::class_type(_idcnt),
    testbench(_IDcnt)
{   
}

Main::~Main(void)
{   
}

#line 62 "testbench.sc"
int Main::main(int argc, char *argv[])
{   
    char *speech_in_file_name;
    char *serial_out_file_name;

#line 76 "testbench.sc"
    dtx_mode = arg_handler(argc, argv,  &speech_in_file_name,  &
	serial_out_file_name);




    if ( !testbench.open_speech_infile(speech_in_file_name, dtx_mode)) exit(1);



    if ( !testbench.open_serial_outfile(serial_out_file_name)) exit(1);

#line 92 "testbench.sc"
    testbench.reset();

#line 99 "testbench.sc"
    testbench.main();

    return (0);
}

#line 9407 "vocoderPam.cc"
Main _scc_main(_IDcnt);

int main(int argc, char *argv[])
{   
    int _scc_main_return;
    
    _specc::start();
    _scc_main_return = _scc_main.main(argc, argv);
    _specc::end();
    return(_scc_main_return);
}

AR_FORK_Codebook::AR_FORK_Codebook(unsigned int _idcnt, short int (&T0), short int (&code)[40], short int (&exc_i)[40], short int (&gain_pit), short int (&h1)[40], short int (&res2)[40], short int (&xn)[40], short int (&y1)[40], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__receiver (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW))
    : _specc::behavior(_idcnt), T0(T0), code(code), exc_i(exc_i), gain_pit(gain_pit), h1(h1), res2(res2), xn(xn), y1(y1), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW)
{   
}

AR_FORK_Codebook::~AR_FORK_Codebook(void)
{   
}

void AR_FORK_Codebook::main(void)
{   
    ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW.receive( &T0, 
	 &code,  &exc_i,  &gain_pit,  &h1,  &res2,  &xn,  &y1);
}

AR_FORK_Codebook_DSP::AR_FORK_Codebook_DSP(unsigned int _idcnt, short int (&T0), short int (&code)[40], short int (&exc_i)[40], short int (&gain_pit), short int (&h1)[40], short int (&res2)[40], short int (&xn)[40], short int (&y1)[40], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__sender (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW))
    : _specc::behavior(_idcnt), T0(T0), code(code), exc_i(exc_i), gain_pit(gain_pit), h1(h1), res2(res2), xn(xn), y1(y1), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW)
{   
}

AR_FORK_Codebook_DSP::~AR_FORK_Codebook_DSP(void)
{   
}

void AR_FORK_Codebook_DSP::main(void)
{   
    ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW.send(T0, 
	code, exc_i, gain_pit, h1, res2, xn, y1);
}

AR_JOIN_Codebook::AR_JOIN_Codebook(unsigned int _idcnt, short int (&cb_ana)[10], short int (&code)[40], short int (&gain_code), short int (&y2)[40], i_short_int__10__short_int__40__short_int_short_int__40__sender (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), cb_ana(cb_ana), code(code), gain_code(gain_code), y2(y2), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP)
{   
}

AR_JOIN_Codebook::~AR_JOIN_Codebook(void)
{   
}

void AR_JOIN_Codebook::main(void)
{   
    ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP.send(cb_ana, 
	code, gain_code, y2);
}

AR_JOIN_Codebook_DSP::AR_JOIN_Codebook_DSP(unsigned int _idcnt, short int (&cb_ana)[10], short int (&code)[40], short int (&gain_code), short int (&y2)[40], i_short_int__10__short_int__40__short_int_short_int__40__receiver (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), cb_ana(cb_ana), code(code), gain_code(gain_code), y2(y2), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP)
{   
}

AR_JOIN_Codebook_DSP::~AR_JOIN_Codebook_DSP(void)
{   
}

void AR_JOIN_Codebook_DSP::main(void)
{   
    ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP.receive( &cb_ana, 
	 &code,  &gain_code,  &y2);
}

AR_RECV_int::AR_RECV_int(unsigned int _idcnt, i_int_receiver (&ch), int (&data))
    : _specc::behavior(_idcnt), ch(ch), data(data)
{   
}

AR_RECV_int::~AR_RECV_int(void)
{   
}

void AR_RECV_int::main(void)
{   
    ch.receive( &data);
}

AR_SEND_int::AR_SEND_int(unsigned int _idcnt, i_int_sender (&ch), int (&data))
    : _specc::behavior(_idcnt), ch(ch), data(data)
{   
}

AR_SEND_int::~AR_SEND_int(void)
{   
}

void AR_SEND_int::main(void)
{   
    ch.send(data);
}

AR_SEND_int_0::AR_SEND_int_0(unsigned int _idcnt, i_int_sender (&ch), int (&data))
    : _specc::behavior(_idcnt), ch(ch), data(data)
{   
}

AR_SEND_int_0::~AR_SEND_int_0(void)
{   
}

void AR_SEND_int_0::main(void)
{   
    ch.send(data);
}

AR_SEND_int_1::AR_SEND_int_1(unsigned int _idcnt, i_int_sender (&ch), int (&data))
    : _specc::behavior(_idcnt), ch(ch), data(data)
{   
}

AR_SEND_int_1::~AR_SEND_int_1(void)
{   
}

void AR_SEND_int_1::main(void)
{   
    ch.send(data);
}

AR_SEND_int_2::AR_SEND_int_2(unsigned int _idcnt, i_int_sender (&ch), int (&data))
    : _specc::behavior(_idcnt), ch(ch), data(data)
{   
}

AR_SEND_int_2::~AR_SEND_int_2(void)
{   
}

void AR_SEND_int_2::main(void)
{   
    ch.send(data);
}

AR_SEND_int_3::AR_SEND_int_3(unsigned int _idcnt, i_int_sender (&ch), int (&data))
    : _specc::behavior(_idcnt), ch(ch), data(data)
{   
}

AR_SEND_int_3::~AR_SEND_int_3(void)
{   
}

void AR_SEND_int_3::main(void)
{   
    ch.send(data);
}

AR_SEND_int_4::AR_SEND_int_4(unsigned int _idcnt, i_int_sender (&ch), int (&data))
    : _specc::behavior(_idcnt), ch(ch), data(data)
{   
}

AR_SEND_int_4::~AR_SEND_int_4(void)
{   
}

void AR_SEND_int_4::main(void)
{   
    ch.send(data);
}

AR_SEND_int_5::AR_SEND_int_5(unsigned int _idcnt, i_int_sender (&ch), int (&data))
    : _specc::behavior(_idcnt), ch(ch), data(data)
{   
}

AR_SEND_int_5::~AR_SEND_int_5(void)
{   
}

void AR_SEND_int_5::main(void)
{   
    ch.send(data);
}

AR_WR_Codebook::AR_WR_Codebook(unsigned int _idcnt, short int (&xn)[40], short int (&y1)[40], short int (&gain_pit), short int (&exc)[40], short int (&h1)[40], short int (&T0), short int (&res2)[40], short int (&code)[40], short int (&y2)[40], short int (&gain_code), short int (&ana)[10], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__receiver (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), i_short_int__10__short_int__40__short_int_short_int__40__sender (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), xn(xn), y1(y1), gain_pit(gain_pit), exc(exc), h1(h1), T0(T0), res2(res2), code(code), y2(y2), gain_code(gain_code), ana(ana), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    ar_fork_codebook(_IDcnt, T0, code, exc, gain_pit, h1, res2, xn, y1, ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW),
    ar_join_codebook(_IDcnt, ana, code, gain_code, y2, ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    codebook(_IDcnt, xn, y1, gain_pit, exc, h1, T0, res2, code, y2, gain_code, ana)
{   
}

AR_WR_Codebook::~AR_WR_Codebook(void)
{   
}

void AR_WR_Codebook::main(void)
{   
    ar_fork_codebook.main();
    codebook.main();
    ar_join_codebook.main();
}

AR_WR_Codebook_CN::AR_WR_Codebook_CN(unsigned int _idcnt, short int (&code)[40], short int (&txdtx_ctrl), int (&L_pn_seed_tx), i_int_sender (&ar_cc__ar_tid_Subframes__DSP__HW), i_int_sender (&ar_cc__ar_tid_Codebook_CN__DSP__HW), short int (&T0), short int (&cb_ana)[10], short int (&exc_i)[40], short int (&gain_code), short int (&gain_pit), short int (&h1)[40], short int (&res2)[40], short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__sender (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), i_short_int__10__short_int__40__short_int_short_int__40__receiver (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), code(code), txdtx_ctrl(txdtx_ctrl), L_pn_seed_tx(L_pn_seed_tx), ar_cc__ar_tid_Subframes__DSP__HW(ar_cc__ar_tid_Subframes__DSP__HW), ar_cc__ar_tid_Codebook_CN__DSP__HW(ar_cc__ar_tid_Codebook_CN__DSP__HW), T0(T0), cb_ana(cb_ana), exc_i(exc_i), gain_code(gain_code), gain_pit(gain_pit), h1(h1), res2(res2), xn(xn), y1(y1), y2(y2), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    _scc_const_port_0(79),
    ar_cb__ar_tid__DSP__HW(_IDcnt, ar_cc__ar_tid_Subframes__DSP__HW, _scc_const_port_0),
    codebook_cn(_IDcnt, code, txdtx_ctrl, L_pn_seed_tx, ar_cc__ar_tid_Codebook_CN__DSP__HW, T0, cb_ana, exc_i, gain_code, gain_pit, h1, res2, xn, y1, y2, ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW, ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP)
{   
}

AR_WR_Codebook_CN::~AR_WR_Codebook_CN(void)
{   
}

void AR_WR_Codebook_CN::main(void)
{   
    ar_cb__ar_tid__DSP__HW.main();
    codebook_cn.main();
}

AR_WR_Codebook_DSP::AR_WR_Codebook_DSP(unsigned int _idcnt, i_int_sender (&ar_cc__ar_tid_Codebook_CN__DSP__HW), short int (&T0), short int (&cb_ana)[10], short int (&code)[40], short int (&exc_i)[40], short int (&gain_code), short int (&gain_pit), short int (&h1)[40], short int (&res2)[40], short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__sender (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), i_short_int__10__short_int__40__short_int_short_int__40__receiver (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), ar_cc__ar_tid_Codebook_CN__DSP__HW(ar_cc__ar_tid_Codebook_CN__DSP__HW), T0(T0), cb_ana(cb_ana), code(code), exc_i(exc_i), gain_code(gain_code), gain_pit(gain_pit), h1(h1), res2(res2), xn(xn), y1(y1), y2(y2), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    _scc_const_port_0(81),
    ar_cb__ar_tid__DSP__HW(_IDcnt, ar_cc__ar_tid_Codebook_CN__DSP__HW, _scc_const_port_0),
    ar_fork_codebook(_IDcnt, T0, code, exc_i, gain_pit, h1, res2, xn, y1, ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW),
    ar_join_codebook(_IDcnt, cb_ana, code, gain_code, y2, ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP)
{   
}

AR_WR_Codebook_DSP::~AR_WR_Codebook_DSP(void)
{   
}

void AR_WR_Codebook_DSP::main(void)
{   
    ar_cb__ar_tid__DSP__HW.main();
    ar_fork_codebook.main();
    ar_join_codebook.main();
}

AR_WR_Coder_12k2::AR_WR_Coder_12k2(unsigned int _idcnt, short int (&speech_proc)[160], short int (&ana)[57], short int (&synth)[160], bool (&dtx_mode), short int (&txdtx_ctrl), bool (&reset_flag), i_int_sender (&ar_cc__ar_tid_Coder__DSP__HW), i_int_sender (&ar_cc__ar_tid_Subframes__DSP__HW), i_int_sender (&ar_cc__ar_tid_Codebook_CN__DSP__HW), short int (&T0), short int (&cb_ana)[10], short int (&code)[40], short int (&exc_i)[40], short int (&gain_code), short int (&gain_pit), short int (&h1)[40], short int (&res2)[40], short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__sender (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), i_short_int__10__short_int__40__short_int_short_int__40__receiver (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), speech_proc(speech_proc), ana(ana), synth(synth), dtx_mode(dtx_mode), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag), ar_cc__ar_tid_Coder__DSP__HW(ar_cc__ar_tid_Coder__DSP__HW), ar_cc__ar_tid_Subframes__DSP__HW(ar_cc__ar_tid_Subframes__DSP__HW), ar_cc__ar_tid_Codebook_CN__DSP__HW(ar_cc__ar_tid_Codebook_CN__DSP__HW), T0(T0), cb_ana(cb_ana), code(code), exc_i(exc_i), gain_code(gain_code), gain_pit(gain_pit), h1(h1), res2(res2), xn(xn), y1(y1), y2(y2), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    _scc_const_port_0(1),
    ar_cb__ar_tid__DSP__HW(_IDcnt, ar_cc__ar_tid_Coder__DSP__HW, _scc_const_port_0),
    coder_12k2(_IDcnt, speech_proc, ana, synth, dtx_mode, txdtx_ctrl, reset_flag, ar_cc__ar_tid_Subframes__DSP__HW, ar_cc__ar_tid_Codebook_CN__DSP__HW, T0, cb_ana, code, exc_i, gain_code, gain_pit, h1, res2, xn, y1, y2, ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW, ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP)
{   
}

AR_WR_Coder_12k2::~AR_WR_Coder_12k2(void)
{   
}

void AR_WR_Coder_12k2::main(void)
{   
    ar_cb__ar_tid__DSP__HW.main();
    coder_12k2.main();
}

void AR_WR_Coder_12k2::reset(void)
{   
    coder_12k2.reset();
}

AR_WR_Post_Process::AR_WR_Post_Process(unsigned int _idcnt, short int (&prm)[57], short int (&txdtx_ctrl), bool (&reset_flag), i_sender (&serial), i_sender (&txdtx_ctrl_out), i_int_sender (&ar_cc__ar_tid_Coder__DSP__HW))
    : _specc::behavior(_idcnt), prm(prm), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag), serial(serial), txdtx_ctrl_out(txdtx_ctrl_out), ar_cc__ar_tid_Coder__DSP__HW(ar_cc__ar_tid_Coder__DSP__HW),
    _scc_const_port_0(110),
    ar_cb__ar_tid__DSP__HW(_IDcnt, ar_cc__ar_tid_Coder__DSP__HW, _scc_const_port_0),
    post_process(_IDcnt, prm, txdtx_ctrl, reset_flag, serial, txdtx_ctrl_out)
{   
}

AR_WR_Post_Process::~AR_WR_Post_Process(void)
{   
}

void AR_WR_Post_Process::main(void)
{   
    ar_cb__ar_tid__DSP__HW.main();
    post_process.main();
}

void AR_WR_Post_Process::reset(void)
{   
    post_process.reset();
}

AR_WR_Post_Process_HW::AR_WR_Post_Process_HW(unsigned int _idcnt)
    : _specc::behavior(_idcnt)
{   
}

AR_WR_Post_Process_HW::~AR_WR_Post_Process_HW(void)
{   
}

void AR_WR_Post_Process_HW::main(void)
{   
}

AR_WR_Pre_Process::AR_WR_Pre_Process(unsigned int _idcnt, i_receiver (&speech_frame), i_receiver (&dtx_mode), short int (&speech_frame_filtered)[160], bool (&reset_flag_1), bool (&reset_flag_2), bool (&local_dtx_mode), i_int_sender (&ar_cc__ar_tid_Coder__DSP__HW))
    : _specc::behavior(_idcnt), speech_frame(speech_frame), dtx_mode(dtx_mode), speech_frame_filtered(speech_frame_filtered), reset_flag_1(reset_flag_1), reset_flag_2(reset_flag_2), local_dtx_mode(local_dtx_mode), ar_cc__ar_tid_Coder__DSP__HW(ar_cc__ar_tid_Coder__DSP__HW),
    _scc_const_port_0(115),
    ar_cb__ar_tid__DSP__HW(_IDcnt, ar_cc__ar_tid_Coder__DSP__HW, _scc_const_port_0),
    pre_process(_IDcnt, speech_frame, dtx_mode, speech_frame_filtered, reset_flag_1, reset_flag_2, local_dtx_mode)
{   
}

AR_WR_Pre_Process::~AR_WR_Pre_Process(void)
{   
}

void AR_WR_Pre_Process::main(void)
{   
    ar_cb__ar_tid__DSP__HW.main();
    pre_process.main();
}

void AR_WR_Pre_Process::reset(void)
{   
    pre_process.reset();
}

AR_WR_Pre_Process_HW::AR_WR_Pre_Process_HW(unsigned int _idcnt)
    : _specc::behavior(_idcnt)
{   
}

AR_WR_Pre_Process_HW::~AR_WR_Pre_Process_HW(void)
{   
}

void AR_WR_Pre_Process_HW::main(void)
{   
}

Autocorr_0::Autocorr_0(unsigned int _idcnt, short int *(&x), short int (&wind)[240], short int (&r_h)[11], short int (&r_l)[11], short int (&norm))
    : _specc::behavior(_idcnt), x(x), wind(wind), r_h(r_h), r_l(r_l), norm(norm)
{   
}

Autocorr_0::~Autocorr_0(void)
{   
}

void Autocorr_0::main(void)
{   
    int i;
    int j;
    short int n;
    bool overfl;
    short int overfl_shft;
    int sum;
    short int y[240];

    _specc::waitfor(220816666ull);
    for(i = 0; i < 240; i++ )
    {   
	y[i] = mult_r(x[i], wind[i]);
    }
    overfl_shft = 0;
    do 
    {   
	overfl = 0;
	sum = 0l;
	for(i = 0; i < 240; i++ )
	{   
	    sum = L_mac(sum, y[i], y[i]);
	}
	if (L_sub(sum, (int)2147483647l) == 0l)
	{   
	    overfl_shft = add(overfl_shft, 4);
	    overfl = 1;
	    for(i = 0; i < 240; i++ )
	    {   
		y[i] = shr(y[i], 2);
	    }
	}
    }
    while(overfl != 0);
    sum = L_add(sum, 1l);
    n = norm_l(sum);
    sum = L_shl(sum, n);
    L_Extract(sum,  &r_h[0],  &r_l[0]);
    for(i = 1; i <= 10; i++ )
    {   
	sum = 0;
	for(j = 0; j < 240 - i; j++ )
	{   
	    sum = L_mac(sum, y[j], y[j + i]);
	}
	sum = L_shl(sum, n);
	L_Extract(sum,  &r_h[i],  &r_l[i]);
    }
    norm = sub(n, overfl_shft);
}

Az_Lsp_0::Az_Lsp_0(unsigned int _idcnt, short int (&a)[11], short int (&lsp)[10], short int (&old_lsp)[10])
    : _specc::behavior(_idcnt), a(a), lsp(lsp), old_lsp(old_lsp)
{   
}

Az_Lsp_0::~Az_Lsp_0(void)
{   
}

short int Az_Lsp_0::Chebps(short int x, short int f[], short int n)
{   
    short int b0_h;
    short int b0_l;
    short int b1_h;
    short int b1_l;
    short int b2_h;
    short int b2_l;
    short int cheb;
    int i;
    int t0;

    b2_h = 256;
    b2_l = 0;
    t0 = L_mult(x, 512);
    t0 = L_mac(t0, f[1], 8192);
    L_Extract(t0,  &b1_h,  &b1_l);
    for(i = 2; i < n; i++ )
    {   
	t0 = Mpy_32_16(b1_h, b1_l, x);
	t0 = L_shl(t0, 1);
	t0 = L_mac(t0, b2_h, (short int)32768);
	t0 = L_msu(t0, b2_l, 1);
	t0 = L_mac(t0, f[i], 8192);
	L_Extract(t0,  &b0_h,  &b0_l);
	b2_l = b1_l;
	b2_h = b1_h;
	b1_l = b0_l;
	b1_h = b0_h;
    }
    t0 = Mpy_32_16(b1_h, b1_l, x);
    t0 = L_mac(t0, b2_h, (short int)32768);
    t0 = L_msu(t0, b2_l, 1);
    t0 = L_mac(t0, f[i], 4096);
    t0 = L_shl(t0, 6);
    cheb = extract_h(t0);
    return (cheb);
}

void Az_Lsp_0::main(void)
{   
    short int *coef;
    short int exp;
    short int f1[6];
    short int f2[6];
    const short int grid[61] = 
    { ((short int)32760),((short int)32723),((short int)32588),((short int)32364),
      ((short int)32051),((short int)31651),((short int)31164),((short int)30591),
      ((short int)29935),((short int)29196),((short int)28377),((short int)27481),
      ((short int)26509),((short int)25465),((short int)24351),((short int)23170),
      ((short int)21926),((short int)20621),((short int)19260),((short int)17846),
      ((short int)16384),((short int)14876),((short int)13327),((short int)11743),
      ((short int)10125),((short int)8480),((short int)6812),((short int)5126),
      ((short int)3425),((short int)1714),((short int)0),((short int)-1714),
      ((short int)-3425),((short int)-5126),((short int)-6812),((short int)-8480),
      ((short int)-10125),((short int)-11743),((short int)-13327),((short int)-14876),
      ((short int)-16384),((short int)-17846),((short int)-19260),((short int)-20621),
      ((short int)-21926),((short int)-23170),((short int)-24351),((short int)-25465),
      ((short int)-26509),((short int)-27481),((short int)-28377),((short int)-29196),
      ((short int)-29935),((short int)-30591),((short int)-31164),((short int)-31651),
      ((short int)-32051),((short int)-32364),((short int)-32588),((short int)-32723),
      ((short int)-32760) };
    int i;
    int ip;
    int j;
    int nf;
    short int sign;
    int t0;
    short int x;
    short int xhigh;
    short int xint;
    short int xlow;
    short int xmid;
    short int y;
    short int yhigh;
    short int ylow;
    short int ymid;

    _specc::waitfor(154333333ull);
    f1[0] = 1024;
    f2[0] = 1024;
    for(i = 0; i < 10 / 2; i++ )
    {   
	t0 = L_mult(a[i + 1], 8192);
	t0 = L_mac(t0, a[10 - i], 8192);
	x = extract_h(t0);
	f1[i + 1] = sub(x, f1[i]);
	t0 = L_mult(a[i + 1], 8192);
	t0 = L_msu(t0, a[10 - i], 8192);
	x = extract_h(t0);
	f2[i + 1] = add(x, f2[i]);
    }
    nf = 0;
    ip = 0;
    coef = f1;
    xlow = grid[0];
    ylow = Chebps(xlow, coef, 10 / 2);
    j = 0;
    while((sub(nf, 10) < 0) && (sub(j, 60) < 0))
    {   
	j++ ;
	xhigh = xlow;
	yhigh = ylow;
	xlow = grid[j];
	ylow = Chebps(xlow, coef, 10 / 2);
	if (L_mult(ylow, yhigh) <= (int)0l)
	{   
	    for(i = 0; i < 4; i++ )
	    {   
		xmid = add(shr(xlow, 1), shr(xhigh, 1));
		ymid = Chebps(xmid, coef, 10 / 2);
		if (L_mult(ylow, ymid) <= (int)0l)
		{   
		    yhigh = ymid;
		    xhigh = xmid;
		}
		else 
		{   
		    ylow = ymid;
		    xlow = xmid;
		}
	    }
	    x = sub(xhigh, xlow);
	    y = sub(yhigh, ylow);
	    if (y == 0)
	    {   
		xint = xlow;
	    }
	    else 
	    {   
		sign = y;
		y = abs_s(y);
		exp = norm_s(y);
		y = shl(y, exp);
		y = div_s((short int)16383, y);
		t0 = L_mult(x, y);
		t0 = L_shr(t0, sub(20, exp));
		y = extract_l(t0);
		if (sign < 0)
		    y = negate(y);
		t0 = L_mult(ylow, y);
		t0 = L_shr(t0, 11);
		xint = sub(xlow, extract_l(t0));
	    }
	    lsp[nf] = xint;
	    xlow = xint;
	    nf++ ;
	    if (ip == 0)
	    {   
		ip = 1;
		coef = f2;
	    }
	    else 
	    {   
		ip = 0;
		coef = f1;
	    }
	    ylow = Chebps(xlow, coef, 10 / 2);
	}
    }
    if (sub(nf, 10) < 0)
    {   
	for(i = 0; i < 10; i++ )
	{   
	    lsp[i] = old_lsp[i];
	}
    }
}

Build_CN_Code::Build_CN_Code(unsigned int _idcnt, short int (&cod)[40], int (&seed))
    : _specc::behavior(_idcnt), cod(cod), seed(seed)
{   
}

Build_CN_Code::~Build_CN_Code(void)
{   
}

void Build_CN_Code::main(void)
{   
    short int i;
    short int j;
    int k;

    _specc::waitfor(0ull);
    for(k = 0; k < 40; k++ )
    {   
	cod[k] = 0;
    }
    for(k = 0; k < 10; k++ )
    {   
	i = pseudonoise(2);
	i = shr(extract_l(L_mult(i, 10)), 1);
	i = add(i, k);
	j = pseudonoise(1);
	if (j > 0)
	{   
	    cod[i] = 4096;
	}
	else 
	{   
	    cod[i] =  -4096;
	}
    }
}

short int Build_CN_Code::pseudonoise(short int no_bits)
{   
    short int Sn;
    int i;
    short int noise_bits;

    noise_bits = 0;
    for(i = 0; i < no_bits; i++ )
    {   
	if ((seed & 1l) != 0)
	{   
	    Sn = 1;
	}
	else 
	{   
	    Sn = 0;
	}
	if ((seed & 268435456l) != 0)
	{   
	    Sn = Sn ^ 1;
	}
	else 
	{   
	    Sn = Sn ^ 0;
	}
	noise_bits = shl(noise_bits, 1);
	noise_bits = noise_bits | (extract_l(seed) & 1);
	seed = L_shr(seed, 1);
	if (Sn & 1)
	{   
	    seed = seed | 1073741824l;
	}
    }
    return noise_bits;
}

Closed_Loop::Closed_Loop(unsigned int _idcnt, int (&i_subfr), short int (&A)[11], short int (&Aq)[11], short int (&h1)[40], short int *(&p_speech), short int (&res2)[40], short int *(&p_exc), short int (&xn)[40], short int (&mem_err)[10], short int (&mem_w0)[10], short int (&t0_min), short int (&t0_max), short int (&t0_min_2), short int (&t0_max_2), short int (&t0), short int (&ana)[2], short int (&y1)[40], short int (&gain_pit), short int (&txdtx_ctrl), short int (&CN_excitation_gain), bool (&reset_flag))
    : _specc::behavior(_idcnt), i_subfr(i_subfr), A(A), Aq(Aq), h1(h1), p_speech(p_speech), res2(res2), p_exc(p_exc), xn(xn), mem_err(mem_err), mem_w0(mem_w0), t0_min(t0_min), t0_max(t0_max), t0_min_2(t0_min_2), t0_max_2(t0_max_2), t0(t0), ana(ana), y1(y1), gain_pit(gain_pit), txdtx_ctrl(txdtx_ctrl), CN_excitation_gain(CN_excitation_gain), reset_flag(reset_flag),
    convolve(_IDcnt, p_exc_i, p_h1, y1b),
    enc_lag6(_IDcnt, T0, T0_frac, t0_min, t0_max, pit_flag, ana_content),
    g_pitch(_IDcnt, xn, y1b, gain_pitch),
    par_weight(_IDcnt, A, Ap1, Ap2),
    pitch_fr6(_IDcnt, p_exc_i, xn, p_h1, t0_min, t0_max, pit_flag, T0_frac, T0),
    pred_lt_6(_IDcnt, p_exc_i, T0, T0_frac),
    q_gain_pitch(_IDcnt, gain_pitch, ana_content),
    seq1(_IDcnt, i_subfr, h1, p_exc, p_speech, p_h1, p_exc_i, p_speech_i),
    seq2(_IDcnt, Aq, Ap1, Ap2, h1, p_speech_i, res2, p_exc_i, xn, mem_err, mem_w0, txdtx_ctrl, CN_excitation_gain, reset_flag),
    seq3(_IDcnt, i_subfr, pit_flag, t0_min_2, t0_max_2, t0_min, t0_max),
    seq4(_IDcnt, ana_content, T0, ana, t0),
    seq5(_IDcnt, gain_pit),
    seq6(_IDcnt, y1b, gain_pitch, ana_content, y1, gain_pit, ana)
{   
}

Closed_Loop::~Closed_Loop(void)
{   
}

void Closed_Loop::main(void)
{   
    { enum { _scc_state_0, _scc_state_seq1, _scc_state_par_weight, _scc_state_seq2, _scc_state_seq3, _scc_state_pitch_fr6, _scc_state_enc_lag6, _scc_state_seq4, _scc_state_seq5, _scc_state_pred_lt_6, _scc_state_convolve, _scc_state_g_pitch, _scc_state_q_gain_pitch, _scc_state_seq6 } _scc_next_state = _scc_state_seq1; do switch(_scc_next_state) {
	    case _scc_state_seq1: { seq1.main(); if ((txdtx_ctrl & 1) != 
		    0) { _scc_next_state = _scc_state_par_weight; break; }
		{ _scc_next_state = _scc_state_seq2; break; } }
	    case _scc_state_par_weight: { par_weight.main(); { _scc_next_state = _scc_state_seq2; break; } }
	    case _scc_state_seq2: { seq2.main(); if ((txdtx_ctrl & 1) != 
		    0) { _scc_next_state = _scc_state_seq3; break; }
		{ _scc_next_state = _scc_state_seq5; break; } }
	    case _scc_state_seq3: { seq3.main(); { _scc_next_state = _scc_state_pitch_fr6; break; } }
	    case _scc_state_pitch_fr6: { pitch_fr6.main(); { _scc_next_state = _scc_state_enc_lag6; break; } }
	    case _scc_state_enc_lag6: { enc_lag6.main(); { _scc_next_state = _scc_state_seq4; break; } }
	    case _scc_state_seq4: { seq4.main(); if ((txdtx_ctrl & 1) != 
		    0) { _scc_next_state = _scc_state_pred_lt_6; break; }
		{ _scc_next_state = _scc_state_0; break; } }
	    case _scc_state_seq5: { seq5.main(); if ((txdtx_ctrl & 1) != 
		    0) { _scc_next_state = _scc_state_pred_lt_6; break; }
		{ _scc_next_state = _scc_state_0; break; } }
	    case _scc_state_pred_lt_6: { pred_lt_6.main(); { _scc_next_state = _scc_state_convolve; break; } }
	    case _scc_state_convolve: { convolve.main(); { _scc_next_state = _scc_state_g_pitch; break; } }
	    case _scc_state_g_pitch: { g_pitch.main(); { _scc_next_state = _scc_state_q_gain_pitch; break; } }
	    case _scc_state_q_gain_pitch: { q_gain_pitch.main(); { _scc_next_state = _scc_state_seq6; break; } }
	    case _scc_state_seq6: { seq6.main(); { _scc_next_state = _scc_state_0; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

void Closed_Loop::reset(void)
{   
    seq2.reset();
}

Codebook::Codebook(unsigned int _idcnt, short int (&xn)[40], short int (&y1)[40], short int (&gain_pit), short int (&exc)[40], short int (&h1)[40], short int (&T0), short int (&res2)[40], short int (&code)[40], short int (&y2)[40], short int (&gain_code), short int (&ana)[10])
    : _specc::behavior(_idcnt), xn(xn), y1(y1), gain_pit(gain_pit), exc(exc), h1(h1), T0(T0), res2(res2), code(code), y2(y2), gain_code(gain_code), ana(ana),
    code_10i40(_IDcnt, xn2, res2b, h1b, codeb, y2, ana),
    seq1(_IDcnt, xn, y1, gain_pit, exc, h1, T0, res2, xn2, h1b, res2b),
    seq2(_IDcnt, T0, gain_pit, codeb, xn2, y2, code, gain_code)
{   
}

Codebook::~Codebook(void)
{   
}

void Codebook::main(void)
{   
    seq1.main();
    code_10i40.main();
    seq2.main();
}

Codebook_CN::Codebook_CN(unsigned int _idcnt, short int (&code)[40], short int (&txdtx_ctrl), int (&L_pn_seed_tx), i_int_sender (&ar_cc__ar_tid_Codebook_CN__DSP__HW), short int (&T0), short int (&cb_ana)[10], short int (&exc_i)[40], short int (&gain_code), short int (&gain_pit), short int (&h1)[40], short int (&res2)[40], short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__sender (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), i_short_int__10__short_int__40__short_int_short_int__40__receiver (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), code(code), txdtx_ctrl(txdtx_ctrl), L_pn_seed_tx(L_pn_seed_tx), ar_cc__ar_tid_Codebook_CN__DSP__HW(ar_cc__ar_tid_Codebook_CN__DSP__HW), T0(T0), cb_ana(cb_ana), exc_i(exc_i), gain_code(gain_code), gain_pit(gain_pit), h1(h1), res2(res2), xn(xn), y1(y1), y2(y2), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    _scc_const_port_0(-1),
    ar_cb__ar_stop__DSP__HW(_IDcnt, ar_cc__ar_tid_Codebook_CN__DSP__HW, _scc_const_port_0),
    build_cn_code(_IDcnt, code, L_pn_seed_tx),
    nop(_IDcnt),
    wr_codebook(_IDcnt, ar_cc__ar_tid_Codebook_CN__DSP__HW, T0, cb_ana, code, exc_i, gain_code, gain_pit, h1, res2, xn, y1, y2, ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW, ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP)
{   
}

Codebook_CN::~Codebook_CN(void)
{   
}

void Codebook_CN::main(void)
{   
    { enum { _scc_state_0, _scc_state_nop, _scc_state_wr_codebook, _scc_state_build_cn_code, _scc_state_ar_cb__ar_stop__DSP__HW } _scc_next_state = _scc_state_nop; do switch(_scc_next_state) {
	    case _scc_state_nop: { nop.main(); if ((txdtx_ctrl & 1) != 
		    0) { _scc_next_state = _scc_state_wr_codebook; break; }
		{ _scc_next_state = _scc_state_build_cn_code; break; } }
	    case _scc_state_wr_codebook: { wr_codebook.main(); { _scc_next_state = _scc_state_ar_cb__ar_stop__DSP__HW; break; } }
	    case _scc_state_build_cn_code: { build_cn_code.main(); { _scc_next_state = _scc_state_ar_cb__ar_stop__DSP__HW; break; } }
	    case _scc_state_ar_cb__ar_stop__DSP__HW: { ar_cb__ar_stop__DSP__HW.main(); { _scc_next_state = _scc_state_0; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

Codebook_CN_HW::Codebook_CN_HW(unsigned int _idcnt, short int (&xn)[40], short int (&y1)[40], short int (&gain_pit), short int (&exc)[40], short int (&h1)[40], short int (&T0), short int (&res2)[40], short int (&code)[40], short int (&y2)[40], short int (&gain_code), short int (&ana)[10], i_int_receiver (&ar_cc__ar_tid_Codebook_CN__DSP__HW), i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__receiver (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), i_short_int__10__short_int__40__short_int_short_int__40__sender (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), xn(xn), y1(y1), gain_pit(gain_pit), exc(exc), h1(h1), T0(T0), res2(res2), code(code), y2(y2), gain_code(gain_code), ana(ana), ar_cc__ar_tid_Codebook_CN__DSP__HW(ar_cc__ar_tid_Codebook_CN__DSP__HW), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    ar_cb__ar_tid__DSP__HW(_IDcnt, ar_cc__ar_tid_Codebook_CN__DSP__HW, ar_tid),
    wr_codebook(_IDcnt, xn, y1, gain_pit, exc, h1, T0, res2, code, y2, gain_code, ana, ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW, ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP)
{   
}

Codebook_CN_HW::~Codebook_CN_HW(void)
{   
}

void Codebook_CN_HW::main(void)
{   
    { enum { _scc_state_0, _scc_state_ar_cb__ar_tid__DSP__HW, _scc_state_wr_codebook } _scc_next_state = _scc_state_ar_cb__ar_tid__DSP__HW; do switch(_scc_next_state) {
	    case _scc_state_ar_cb__ar_tid__DSP__HW: { ar_cb__ar_tid__DSP__HW.main(); if (ar_tid == 
		    81) { _scc_next_state = _scc_state_wr_codebook; break; }
		{ _scc_next_state = _scc_state_0; break; } }
	    case _scc_state_wr_codebook: { wr_codebook.main(); { _scc_next_state = _scc_state_ar_cb__ar_tid__DSP__HW; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

Coder::Coder(unsigned int _idcnt, i_receiver (&speech_samples), i_receiver (&dtx_mode), i_sender (&serial), i_sender (&txdtx_ctrl))
    : _specc::behavior(_idcnt), speech_samples(speech_samples), dtx_mode(dtx_mode), serial(serial), txdtx_ctrl(txdtx_ctrl),
    Bus0_MCS(bit<1,true>("0")),
    Bus0_intA(bit<1,true>("0")),
    Bus0_intB(bit<1,true>("0")),
    Bus0_intC(bit<1,true>("0")),
    Bus0_intD(bit<1,true>("0")),
    Bus0_nRD(bit<1,true>("1")),
    Bus0_nWR(bit<1,true>("1")),
    DSP(++_IDcnt, Bus0_A, Bus0_D, Bus0_MCS, Bus0_nRD, Bus0_nWR, Bus0_intA, Bus0_intB, Bus0_intC, Bus0_intD, speech_samples, dtx_mode, serial, txdtx_ctrl),
    HW(++_IDcnt, Bus0_A, Bus0_D, Bus0_MCS, Bus0_nRD, Bus0_nWR, Bus0_intA)
{   
}

Coder::~Coder(void)
{   
}

void Coder::main(void)
{   
    { _specc::fork _scc_fork_0(&DSP), _scc_fork_1(&HW); _specc::par(&_scc_fork_0, &_scc_fork_1, ((_specc::fork*)0));
    }
}

void Coder::reset(void)
{   
    DSP.reset();
}

Coder_12k2::Coder_12k2(unsigned int _idcnt, short int (&speech_proc)[160], short int (&ana)[57], short int (&synth)[160], bool (&dtx_mode), short int (&txdtx_ctrl), bool (&reset_flag), i_int_sender (&ar_cc__ar_tid_Subframes__DSP__HW), i_int_sender (&ar_cc__ar_tid_Codebook_CN__DSP__HW), short int (&T0), short int (&cb_ana)[10], short int (&code)[40], short int (&exc_i)[40], short int (&gain_code), short int (&gain_pit), short int (&h1)[40], short int (&res2)[40], short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__sender (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), i_short_int__10__short_int__40__short_int_short_int__40__receiver (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), speech_proc(speech_proc), ana(ana), synth(synth), dtx_mode(dtx_mode), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag), ar_cc__ar_tid_Subframes__DSP__HW(ar_cc__ar_tid_Subframes__DSP__HW), ar_cc__ar_tid_Codebook_CN__DSP__HW(ar_cc__ar_tid_Codebook_CN__DSP__HW), T0(T0), cb_ana(cb_ana), code(code), exc_i(exc_i), gain_code(gain_code), gain_pit(gain_pit), h1(h1), res2(res2), xn(xn), y1(y1), y2(y2), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    lp_analysis(_IDcnt, p_window, A_t, Aq_t, ana, ptch, txdtx_ctrl_cur, dtx_mode, L_pn_seed_tx, reset_flag),
    open_loop(_IDcnt, speech, A_t, wsp, T0_min_1, T0_max_1, T0_min_2, T0_max_2, ptch, txdtx_ctrl_cur, dtx_mode, reset_flag),
    seq1(_IDcnt, speech_proc, old_speech, speech, p_window, old_wsp, wsp, old_exc, exc, ptch, txdtx_ctrl_cur, reset_flag),
    shift_signals(_IDcnt, old_speech, old_wsp, old_exc, txdtx_ctrl_cur, txdtx_ctrl),
    subframes(_IDcnt, A_t, Aq_t, speech, exc, T0_min_1, T0_max_1, T0_min_2, T0_max_2, ana, synth, txdtx_ctrl_cur, L_pn_seed_tx, reset_flag, ar_cc__ar_tid_Subframes__DSP__HW, ar_cc__ar_tid_Codebook_CN__DSP__HW, T0, cb_ana, code, exc_i, gain_code, gain_pit, h1, res2, xn, y1, y2, ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW, ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP)
{   
}

Coder_12k2::~Coder_12k2(void)
{   
}

void Coder_12k2::main(void)
{   
    seq1.main();
    lp_analysis.main();
    open_loop.main();
    subframes.main();
    shift_signals.main();
}

void Coder_12k2::reset(void)
{   
    seq1.reset();
    lp_analysis.reset();
    open_loop.reset();
    subframes.reset();
}

Coder_12k2_Seq1::Coder_12k2_Seq1(unsigned int _idcnt, short int (&speech_proc)[160], short int (&old_speech)[320], short int *(&speech), short int *(&p_window), short int (&old_wsp)[303], short int *(&wsp), short int (&old_exc)[314], short int *(&exc), bool (&ptch), short int (&txdtx_ctrl), bool (&reset_flag))
    : _specc::behavior(_idcnt), speech_proc(speech_proc), old_speech(old_speech), speech(speech), p_window(p_window), old_wsp(old_wsp), wsp(wsp), old_exc(old_exc), exc(exc), ptch(ptch), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag)
{   
}

Coder_12k2_Seq1::~Coder_12k2_Seq1(void)
{   
}

void Coder_12k2_Seq1::init(void)
{   
    speech = old_speech + 320 - 160;
    p_window = old_speech + 320 - 240;
    wsp = old_wsp + 143;
    exc = old_exc + 143 + (10 + 1);
    Set_zero(old_speech, 320);
    Set_zero(old_exc, 143 + (10 + 1));
    Set_zero(old_wsp, 143);
    txdtx_ctrl = 1 | 2;
    ptch = 1;
}

void Coder_12k2_Seq1::main(void)
{   
    _specc::waitfor(1083333ull);
    if (reset_flag == true)
    {   
	init();
    }
    Copy(speech_proc, speech, 160);
}

void Coder_12k2_Seq1::reset(void)
{   
    init();
}

Find_Az_0::Find_Az_0(unsigned int _idcnt, short int *(&x), short int (&wind)[240], short int (&r_h)[11], short int (&r_l)[11], short int (&old_A)[11], short int (&scal_fac), short int (&A_t)[11], short int (&rc)[4])
    : _specc::behavior(_idcnt), x(x), wind(wind), r_h(r_h), r_l(r_l), old_A(old_A), scal_fac(scal_fac), A_t(A_t), rc(rc),
    autocorr(_IDcnt, x, wind, r_h, r_l, scal_fac),
    lag_window(_IDcnt, r_h, r_l),
    levinson(_IDcnt, r_h, r_l, old_A, A_t, rc)
{   
}

Find_Az_0::~Find_Az_0(void)
{   
}

void Find_Az_0::main(void)
{   
    autocorr.main();
    lag_window.main();
    levinson.main();
}

Get_Minmax_0::Get_Minmax_0(unsigned int _idcnt, short int (&T_op), short int (&T0_min), short int (&T0_max), short int (&txdtx_ctrl))
    : _specc::behavior(_idcnt), T_op(T_op), T0_min(T0_min), T0_max(T0_max), txdtx_ctrl(txdtx_ctrl)
{   
}

Get_Minmax_0::~Get_Minmax_0(void)
{   
}

void Get_Minmax_0::main(void)
{   
    short int max;
    short int min;

    _specc::waitfor(66666ull);
    if ((txdtx_ctrl & 1) != 0)
    {   
	min = sub(T_op, 3);
	if (sub(min, 18) < 0)
	{   
	    min = 18;
	}
	max = add(min, 6);
	if (sub(max, 143) > 0)
	{   
	    max = 143;
	    min = sub(max, 6);
	}
	T0_min = min;
	T0_max = max;
    }
}

HW_Standard_HW::HW_Standard_HW(unsigned int _idcnt, i_tranceiver (&c_stream_0))
    : _specc::behavior(_idcnt), c_stream_0(c_stream_0),
    _app(_IDcnt, pre3, pre5, pre1, T0, cb_ana, code, exc_i, gain_code, gain_pit, h1, res2, xn, y1, y2, pre9, pre6),
    pack0(c_stream_0),
    pre1(pack0),
    pre3(pack0),
    pre5(pack0),
    pre6(pack0),
    pre9(pack0)
{   
}

HW_Standard_HW::~HW_Standard_HW(void)
{   
}

void HW_Standard_HW::main(void)
{   
    while(1)
    {   
	_app.main();
    }
}

HW_Standard_HW_App::HW_Standard_HW_App(unsigned int _idcnt, i_int_receiver (&ar_cc__ar_tid_Coder__DSP__HW), i_int_receiver (&ar_cc__ar_tid_Subframes__DSP__HW), i_int_receiver (&ar_cc__ar_tid_Codebook_CN__DSP__HW), short int (&T0), short int (&cb_ana)[10], short int (&code)[40], short int (&exc_i)[40], short int (&gain_code), short int (&gain_pit), short int (&h1)[40], short int (&res2)[40], short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__receiver (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), i_short_int__10__short_int__40__short_int_short_int__40__sender (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), ar_cc__ar_tid_Coder__DSP__HW(ar_cc__ar_tid_Coder__DSP__HW), ar_cc__ar_tid_Subframes__DSP__HW(ar_cc__ar_tid_Subframes__DSP__HW), ar_cc__ar_tid_Codebook_CN__DSP__HW(ar_cc__ar_tid_Codebook_CN__DSP__HW), T0(T0), cb_ana(cb_ana), code(code), exc_i(exc_i), gain_code(gain_code), gain_pit(gain_pit), h1(h1), res2(res2), xn(xn), y1(y1), y2(y2), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    ar_cb__ar_tid__DSP__HW(_IDcnt, ar_cc__ar_tid_Coder__DSP__HW, ar_tid),
    subframes(_IDcnt, ar_cc__ar_tid_Subframes__DSP__HW, ar_cc__ar_tid_Codebook_CN__DSP__HW, T0, cb_ana, code, exc_i, gain_code, gain_pit, h1, res2, xn, y1, y2, ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW, ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    wr_post_process(_IDcnt),
    wr_pre_process(_IDcnt)
{   
}

HW_Standard_HW_App::~HW_Standard_HW_App(void)
{   
}

void HW_Standard_HW_App::main(void)
{   
    { enum { _scc_state_0, _scc_state_ar_cb__ar_tid__DSP__HW, _scc_state_wr_post_process, _scc_state_wr_pre_process, _scc_state_subframes } _scc_next_state = _scc_state_ar_cb__ar_tid__DSP__HW; do switch(_scc_next_state) {
	    case _scc_state_ar_cb__ar_tid__DSP__HW: { ar_cb__ar_tid__DSP__HW.main(); if (ar_tid == 
		    110) { _scc_next_state = _scc_state_wr_post_process; break; }
		if (ar_tid == 115) { _scc_next_state = _scc_state_wr_pre_process; break; }
		if (ar_tid == 1) { _scc_next_state = _scc_state_subframes; break; }
		{ _scc_next_state = _scc_state_0; break; } }
	    case _scc_state_wr_post_process: { wr_post_process.main(); { _scc_next_state = _scc_state_ar_cb__ar_tid__DSP__HW; break; } }
	    case _scc_state_wr_pre_process: { wr_pre_process.main(); { _scc_next_state = _scc_state_ar_cb__ar_tid__DSP__HW; break; } }
	    case _scc_state_subframes: { subframes.main(); { _scc_next_state = _scc_state_ar_cb__ar_tid__DSP__HW; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

HW_Standard_HW_BF::HW_Standard_HW_BF(unsigned int _idcnt, _specc::signal<bit<_BITLEN(15,0),true> > (&Port0_A), _specc::signal<bit<_BITLEN(23,0),true> > (&Port0_D), _specc::signal<bit<_BITLEN(0,0),true> > (&Port0_MCS), _specc::signal<bit<_BITLEN(0,0),true> > (&Port0_nRD), _specc::signal<bit<_BITLEN(0,0),true> > (&Port0_nWR), _specc::signal<bit<_BITLEN(0,0),true> > (&Bus0_intA))
    : _specc::behavior(_idcnt), Port0_A(Port0_A), Port0_D(Port0_D), Port0_MCS(Port0_MCS), Port0_nRD(Port0_nRD), Port0_nWR(Port0_nWR), Bus0_intA(Bus0_intA),
    _scc_const_port_0(((unsigned short int)32768)),
    HW(_IDcnt, linkDSP2HW__Bus0, intrGen__HW__Bus0),
    Port0_mac_s(Port0_proto_s),
    Port0_proto_s(Port0_A, Port0_D, Port0_MCS, Port0_nRD, Port0_nWR),
    intrGen__HW__Bus0(Bus0_intA),
    linkDSP2HW__Bus0(Port0_mac_s, _scc_const_port_0)
{   
}

HW_Standard_HW_BF::~HW_Standard_HW_BF(void)
{   
}

void HW_Standard_HW_BF::main(void)
{   
    HW.main();
}

HW_Standard_HW_opt::HW_Standard_HW_opt(unsigned int _idcnt, i_tranceiver (&c_stream_0), i_send (&intrGen__HW__Bus0))
    : _specc::behavior(_idcnt), c_stream_0(c_stream_0), intrGen__HW__Bus0(intrGen__HW__Bus0),
    _app(_IDcnt, pre3, pre5, pre1, T0, cb_ana, code, exc_i, gain_code, gain_pit, h1, res2, xn, y1, y2, pre9, pre6),
    pre1(c_stream_0, intrGen__HW__Bus0),
    pre3(c_stream_0, intrGen__HW__Bus0),
    pre5(c_stream_0, intrGen__HW__Bus0),
    pre6(c_stream_0, intrGen__HW__Bus0),
    pre9(c_stream_0, intrGen__HW__Bus0)
{   
}

HW_Standard_HW_opt::~HW_Standard_HW_opt(void)
{   
}

void HW_Standard_HW_opt::main(void)
{   
    while(1)
    {   
	_app.main();
    }
}

IntrDetect_Motorola_DSP56600_PortA_2_0::IntrDetect_Motorola_DSP56600_PortA_2_0(unsigned int _idcnt, i_receive (&intr), i_send (&flag))
    : _specc::behavior(_idcnt), intr(intr), flag(flag)
{   
}

IntrDetect_Motorola_DSP56600_PortA_2_0::~IntrDetect_Motorola_DSP56600_PortA_2_0(void)
{   
}

void IntrDetect_Motorola_DSP56600_PortA_2_0::main(void)
{   
    while(true)
    {   
	intr.receive();
	flag.send();
    }
}

LP_Analysis::LP_Analysis(unsigned int _idcnt, short int *(&p_window), short int (&A_t)[4][11], short int (&Aq_t)[4][11], short int (&ana)[57], bool (&ptch), short int (&txdtx_ctrl), bool (&dtx_mode), int (&L_pn_seed_tx), bool (&reset_flag))
    : _specc::behavior(_idcnt), p_window(p_window), A_t(A_t), Aq_t(Aq_t), ana(ana), ptch(ptch), txdtx_ctrl(txdtx_ctrl), dtx_mode(dtx_mode), L_pn_seed_tx(L_pn_seed_tx), reset_flag(reset_flag),
    az_lsp_1(_IDcnt, A_t_1, lsp_mid, lsp_old),
    az_lsp_2(_IDcnt, A_t_3, lsp_new, lsp_mid),
    copy1(_IDcnt, A_t_1, A_t_3, A),
    copy2(_IDcnt, A, A_t),
    init(_IDcnt, reset_flag, old_A, lsp_old, lsp_old_q),
    no_speech_upd(_IDcnt, A, Aq_t, lsp_old, lsp_new, lsp_old_q, lsp_new_q, txdtx_ctrl),
    seq1(_IDcnt, p_window, r_h, r_l, old_A, scal_fac, A_t_1, A_t_3, rc),
    seq2(_IDcnt, lsp_old, lsp_mid, lsp_new, lsp_old_q, lsp_mid_q, lsp_new_q, A, Aq_t, ana, txdtx_ctrl, reset_flag),
    vad_lp(_IDcnt, r_l, r_h, scal_fac, rc, ptch, txdtx_ctrl, dtx_mode, L_pn_seed_tx, reset_flag)
{   
}

LP_Analysis::~LP_Analysis(void)
{   
}

void LP_Analysis::main(void)
{   
    init.main();
    seq1.main();
    az_lsp_1.main();
    az_lsp_2.main();
    copy1.main();
    vad_lp.main();
    seq2.main();
    no_speech_upd.main();
    copy2.main();
}

void LP_Analysis::reset(void)
{   
    init.reset();
    seq2.reset();
    vad_lp.reset();
}

Lag_Window_0::Lag_Window_0(unsigned int _idcnt, short int (&r_h)[11], short int (&r_l)[11])
    : _specc::behavior(_idcnt), r_h(r_h), r_l(r_l)
{   
}

Lag_Window_0::~Lag_Window_0(void)
{   
}

void Lag_Window_0::main(void)
{   
    int i;
    const short int lag_h[10] = 
    { ((short int)32728),((short int)32619),((short int)32438),((short int)32187),
      ((short int)31867),((short int)31480),((short int)31029),((short int)30517),
      ((short int)29946),((short int)29321) };
    const short int lag_l[10] = 
    { ((short int)11904),((short int)17280),((short int)30720),((short int)25856),
      ((short int)24192),((short int)28992),((short int)24384),((short int)7360),
      ((short int)19520),((short int)14784) };
    int x;

    _specc::waitfor(866666ull);
    for(i = 1; i <= 10; i++ )
    {   
	x = Mpy_32(r_h[i], r_l[i], lag_h[i - 1], lag_l[i - 1]);
	L_Extract(x,  &r_h[i],  &r_l[i]);
    }
}

Levinson_0::Levinson_0(unsigned int _idcnt, short int (&Rh)[11], short int (&Rl)[11], short int (&old_A)[11], short int (&A)[11], short int (&rc)[4])
    : _specc::behavior(_idcnt), Rh(Rh), Rl(Rl), old_A(old_A), A(A), rc(rc)
{   
}

Levinson_0::~Levinson_0(void)
{   
}

void Levinson_0::main(void)
{   
    short int Ah[11];
    short int Al[11];
    short int Anh[11];
    short int Anl[11];
    short int Kh;
    short int Kl;
    short int alp_exp;
    short int alp_h;
    short int alp_l;
    short int hi;
    int i;
    int j;
    short int lo;
    int t0;
    short int t0_n;
    int t1;
    int t2;

    _specc::waitfor(17333333ull);
    t1 = L_Comp(Rh[1], Rl[1]);
    t2 = L_abs(t1);
    t0 = Div_32(t2, Rh[0], Rl[0]);
    if (t1 > 0)
	t0 = L_negate(t0);
    L_Extract(t0,  &Kh,  &Kl);
    rc[0] = round(t0);
    t0 = L_shr(t0, 4);
    L_Extract(t0,  &Ah[1],  &Al[1]);
    t0 = Mpy_32(Kh, Kl, Kh, Kl);
    t0 = L_abs(t0);
    t0 = L_sub((int)2147483647l, t0);
    L_Extract(t0,  &hi,  &lo);
    t0 = Mpy_32(Rh[0], Rl[0], hi, lo);
    alp_exp = norm_l(t0);
    t0 = L_shl(t0, alp_exp);
    L_Extract(t0,  &alp_h,  &alp_l);
    for(i = 2; i <= 10; i++ )
    {   
	t0 = 0;
	for(j = 1; j < i; j++ )
	{   
	    t0 = L_add(t0, Mpy_32(Rh[j], Rl[j], Ah[i - j], Al[i - j]));
	}
	t0 = L_shl(t0, 4);
	t1 = L_Comp(Rh[i], Rl[i]);
	t0 = L_add(t0, t1);
	t1 = L_abs(t0);
	t2 = Div_32(t1, alp_h, alp_l);
	if (t0 > 0)
	    t2 = L_negate(t2);
	t2 = L_shl(t2, alp_exp);
	L_Extract(t2,  &Kh,  &Kl);
	if (sub(i, 5) < 0)
	{   
	    rc[i - 1] = round(t2);
	}
	if (sub(abs_s(Kh), 32750) > 0)
	{   
	    for(j = 0; j <= 10; j++ )
	    {   
		A[j] = old_A[j];
	    }
	    for(j = 0; j < 4; j++ )
	    {   
		rc[j] = 0;
	    }
	    return ;
	}
	for(j = 1; j < i; j++ )
	{   
	    t0 = Mpy_32(Kh, Kl, Ah[i - j], Al[i - j]);
	    t0 = L_mac(t0, Ah[j], 32767);
	    t0 = L_mac(t0, Al[j], 1);
	    L_Extract(t0,  &Anh[j],  &Anl[j]);
	}
	t2 = L_shr(t2, 4);
	L_Extract(t2,  &Anh[i],  &Anl[i]);
	t0 = Mpy_32(Kh, Kl, Kh, Kl);
	t0 = L_abs(t0);
	t0 = L_sub((int)2147483647l, t0);
	L_Extract(t0,  &hi,  &lo);
	t0 = Mpy_32(alp_h, alp_l, hi, lo);
	t0_n = norm_l(t0);
	t0 = L_shl(t0, t0_n);
	L_Extract(t0,  &alp_h,  &alp_l);
	alp_exp = add(alp_exp, t0_n);
	for(j = 1; j <= i; j++ )
	{   
	    Ah[j] = Anh[j];
	    Al[j] = Anl[j];
	}
    }
    A[0] = 4096;
    for(i = 1; i <= 10; i++ )
    {   
	t0 = L_Comp(Ah[i], Al[i]);
	A[i] = old_A[i] = round(L_shl(t0, 1));
    }
}

Motorola_DSP56600_0_DSP::Motorola_DSP56600_0_DSP(unsigned int _idcnt, i_receiver (&speech_samples), i_receiver (&dtx_mode), i_sender (&serial), i_sender (&txdtx_ctrl), OSAPI (&os), i_tranceiver (&c_stream_0))
    : _specc::behavior(_idcnt), speech_samples(speech_samples), dtx_mode(dtx_mode), serial(serial), txdtx_ctrl(txdtx_ctrl), os(os), c_stream_0(c_stream_0),
    pre0(c_stream_0),
    pre2(c_stream_0),
    pre4(c_stream_0),
    pre7(c_stream_0),
    pre8(c_stream_0),
    wr_coder_12k2(_IDcnt, speech_frame, prm, syn, local_dtx_mode, txdtx_ctrl_val, reset_flag_1, pre2, pre4, pre0, T0, cb_ana, code, exc_i, gain_code, gain_pit, h1, res2, xn, y1, y2, pre8, pre7),
    wr_post_process(_IDcnt, prm, txdtx_ctrl_val, reset_flag_2, serial, txdtx_ctrl, pre2),
    wr_pre_process(_IDcnt, speech_samples, dtx_mode, speech_frame, reset_flag_1, reset_flag_2, local_dtx_mode, pre2)
{   
}

Motorola_DSP56600_0_DSP::~Motorola_DSP56600_0_DSP(void)
{   
}

void Motorola_DSP56600_0_DSP::main(void)
{   
    { enum { _scc_state_0, _scc_state_wr_pre_process, _scc_state_wr_coder_12k2, _scc_state_wr_post_process } _scc_next_state = _scc_state_wr_pre_process; do switch(_scc_next_state) {
	    case _scc_state_wr_pre_process: { wr_pre_process.main(); { _scc_next_state = _scc_state_wr_coder_12k2; break; } }
	    case _scc_state_wr_coder_12k2: { wr_coder_12k2.main(); { _scc_next_state = _scc_state_wr_post_process; break; } }
	    case _scc_state_wr_post_process: { wr_post_process.main(); { _scc_next_state = _scc_state_wr_pre_process; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

void Motorola_DSP56600_0_DSP::reset(void)
{   
    wr_pre_process.reset();
    wr_coder_12k2.reset();
    wr_post_process.reset();
}

Motorola_DSP56600_0_DSP_opt::Motorola_DSP56600_0_DSP_opt(unsigned int _idcnt, i_receiver (&speech_samples), i_receiver (&dtx_mode), i_sender (&serial), i_sender (&txdtx_ctrl), OSAPI (&os), i_tranceiver (&c_stream_0), i_receive (&flag__DSP__HW))
    : _specc::behavior(_idcnt), speech_samples(speech_samples), dtx_mode(dtx_mode), serial(serial), txdtx_ctrl(txdtx_ctrl), os(os), c_stream_0(c_stream_0), flag__DSP__HW(flag__DSP__HW),
    pre0(c_stream_0, flag__DSP__HW),
    pre2(c_stream_0, flag__DSP__HW),
    pre4(c_stream_0, flag__DSP__HW),
    pre7(c_stream_0, flag__DSP__HW),
    pre8(c_stream_0, flag__DSP__HW),
    wr_coder_12k2(_IDcnt, speech_frame, prm, syn, local_dtx_mode, txdtx_ctrl_val, reset_flag_1, pre2, pre4, pre0, T0, cb_ana, code, exc_i, gain_code, gain_pit, h1, res2, xn, y1, y2, pre8, pre7),
    wr_post_process(_IDcnt, prm, txdtx_ctrl_val, reset_flag_2, serial, txdtx_ctrl, pre2),
    wr_pre_process(_IDcnt, speech_samples, dtx_mode, speech_frame, reset_flag_1, reset_flag_2, local_dtx_mode, pre2)
{   
}

Motorola_DSP56600_0_DSP_opt::~Motorola_DSP56600_0_DSP_opt(void)
{   
}

void Motorola_DSP56600_0_DSP_opt::main(void)
{   
    { enum { _scc_state_0, _scc_state_wr_pre_process, _scc_state_wr_coder_12k2, _scc_state_wr_post_process } _scc_next_state = _scc_state_wr_pre_process; do switch(_scc_next_state) {
	    case _scc_state_wr_pre_process: { wr_pre_process.main(); { _scc_next_state = _scc_state_wr_coder_12k2; break; } }
	    case _scc_state_wr_coder_12k2: { wr_coder_12k2.main(); { _scc_next_state = _scc_state_wr_post_process; break; } }
	    case _scc_state_wr_post_process: { wr_post_process.main(); { _scc_next_state = _scc_state_wr_pre_process; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

void Motorola_DSP56600_0_DSP_opt::reset(void)
{   
    wr_pre_process.reset();
    wr_coder_12k2.reset();
    wr_post_process.reset();
}

Motorola_DSP56600_BF_0::Motorola_DSP56600_BF_0(unsigned int _idcnt, _specc::signal<bit<_BITLEN(15,0),true> > (&A), _specc::signal<bit<_BITLEN(23,0),true> > (&D), _specc::signal<bit<_BITLEN(0,0),true> > (&MCS), _specc::signal<bit<_BITLEN(0,0),true> > (&nRD), _specc::signal<bit<_BITLEN(0,0),true> > (&nWR), _specc::signal<bit<_BITLEN(0,0),true> > (&intA), _specc::signal<bit<_BITLEN(0,0),true> > (&intB), _specc::signal<bit<_BITLEN(0,0),true> > (&intC), _specc::signal<bit<_BITLEN(0,0),true> > (&intD))
    : _specc::behavior(_idcnt), A(A), D(D), MCS(MCS), nRD(nRD), nWR(nWR), intA(intA), intB(intB), intC(intC), intD(intD),
    core(++_IDcnt, A, D, MCS, nRD, nWR, intA, intB, intC, intD)
{   
}

Motorola_DSP56600_BF_0::~Motorola_DSP56600_BF_0(void)
{   
}

#line 467 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
void Motorola_DSP56600_BF_0::main(void)
{   
    { _specc::fork _scc_fork_0(&core); _specc::par(
	    &_scc_fork_0, ((_specc::fork*)0));
    }
}

#line 10700 "vocoderPam.cc"
Motorola_DSP56600_BF_0_DSP::Motorola_DSP56600_BF_0_DSP(unsigned int _idcnt, _specc::signal<bit<_BITLEN(15,0),true> > (&A), _specc::signal<bit<_BITLEN(23,0),true> > (&D), _specc::signal<bit<_BITLEN(0,0),true> > (&MCS), _specc::signal<bit<_BITLEN(0,0),true> > (&nRD), _specc::signal<bit<_BITLEN(0,0),true> > (&nWR), _specc::signal<bit<_BITLEN(0,0),true> > (&intA), _specc::signal<bit<_BITLEN(0,0),true> > (&intB), _specc::signal<bit<_BITLEN(0,0),true> > (&intC), _specc::signal<bit<_BITLEN(0,0),true> > (&intD), i_receiver (&speech_samples), i_receiver (&dtx_mode), i_sender (&serial), i_sender (&txdtx_ctrl))
    : _specc::behavior(_idcnt), A(A), D(D), MCS(MCS), nRD(nRD), nWR(nWR), intA(intA), intB(intB), intC(intC), intD(intD), speech_samples(speech_samples), dtx_mode(dtx_mode), serial(serial), txdtx_ctrl(txdtx_ctrl),
    core(++_IDcnt, A, D, MCS, nRD, nWR, intA, intB, intC, intD, speech_samples, dtx_mode, serial, txdtx_ctrl)
{   
}

Motorola_DSP56600_BF_0_DSP::~Motorola_DSP56600_BF_0_DSP(void)
{   
}

void Motorola_DSP56600_BF_0_DSP::main(void)
{   
    { _specc::fork _scc_fork_0(&core); _specc::par(&_scc_fork_0, ((_specc::fork*)0));
    }
}

void Motorola_DSP56600_BF_0_DSP::reset(void)
{   
    core.reset();
}

Motorola_DSP56600_Core_0::Motorola_DSP56600_Core_0(unsigned int _idcnt, _specc::signal<bit<_BITLEN(15,0),true> > (&A), _specc::signal<bit<_BITLEN(23,0),true> > (&D), _specc::signal<bit<_BITLEN(0,0),true> > (&MCS), _specc::signal<bit<_BITLEN(0,0),true> > (&nRD), _specc::signal<bit<_BITLEN(0,0),true> > (&nWR), _specc::signal<bit<_BITLEN(0,0),true> > (&intA), _specc::signal<bit<_BITLEN(0,0),true> > (&intB), _specc::signal<bit<_BITLEN(0,0),true> > (&intC), _specc::signal<bit<_BITLEN(0,0),true> > (&intD))
    : _specc::behavior(_idcnt), A(A), D(D), MCS(MCS), nRD(nRD), nWR(nWR), intA(intA), intB(intB), intC(intC), intD(intD),
    INTR(bit<1,true>("0")),
    hw(++_IDcnt, A, D, MCS, nRD, nWR, INTR),
    pic(++_IDcnt, A, D, MCS, nRD, nWR, INTR, intA, intB, intC, intD)
{   
}

Motorola_DSP56600_Core_0::~Motorola_DSP56600_Core_0(void)
{   
}

#line 430 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
void Motorola_DSP56600_Core_0::main(void)
{   
    { _specc::fork _scc_fork_0(&hw), _scc_fork_1(&pic); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, ((_specc::fork*)0));
    }
}

#line 10743 "vocoderPam.cc"
Motorola_DSP56600_Core_0_DSP::Motorola_DSP56600_Core_0_DSP(unsigned int _idcnt, _specc::signal<bit<_BITLEN(15,0),true> > (&A), _specc::signal<bit<_BITLEN(23,0),true> > (&D), _specc::signal<bit<_BITLEN(0,0),true> > (&MCS), _specc::signal<bit<_BITLEN(0,0),true> > (&nRD), _specc::signal<bit<_BITLEN(0,0),true> > (&nWR), _specc::signal<bit<_BITLEN(0,0),true> > (&intA), _specc::signal<bit<_BITLEN(0,0),true> > (&intB), _specc::signal<bit<_BITLEN(0,0),true> > (&intC), _specc::signal<bit<_BITLEN(0,0),true> > (&intD), i_receiver (&speech_samples), i_receiver (&dtx_mode), i_sender (&serial), i_sender (&txdtx_ctrl))
    : _specc::behavior(_idcnt), A(A), D(D), MCS(MCS), nRD(nRD), nWR(nWR), intA(intA), intB(intB), intC(intC), intD(intD), speech_samples(speech_samples), dtx_mode(dtx_mode), serial(serial), txdtx_ctrl(txdtx_ctrl),
    INTR(bit<1,true>("0")),
    hw(++_IDcnt, A, D, MCS, nRD, nWR, INTR, speech_samples, dtx_mode, serial, txdtx_ctrl),
    pic(++_IDcnt, A, D, MCS, nRD, nWR, INTR, intA, intB, intC, intD)
{   
}

Motorola_DSP56600_Core_0_DSP::~Motorola_DSP56600_Core_0_DSP(void)
{   
}

void Motorola_DSP56600_Core_0_DSP::main(void)
{   
    { _specc::fork _scc_fork_0(&hw), _scc_fork_1(&pic); _specc::par(&_scc_fork_0, &_scc_fork_1, ((_specc::fork*)0));
    }
}

void Motorola_DSP56600_Core_0_DSP::reset(void)
{   
    hw.reset();
}

Motorola_DSP56600_HAL_0::Motorola_DSP56600_HAL_0(unsigned int _idcnt, IDSP56600MasterProtocol_2_0 (&protocol))
    : _specc::behavior(_idcnt), protocol(protocol),
    link(protocol),
    mem(protocol)
{   
}

Motorola_DSP56600_HAL_0::~Motorola_DSP56600_HAL_0(void)
{   
}

#line 82 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
void Motorola_DSP56600_HAL_0::intAhandler(void)
{   
}

void Motorola_DSP56600_HAL_0::intBhandler(void)
{   
}

void Motorola_DSP56600_HAL_0::intChandler(void)
{   
}

void Motorola_DSP56600_HAL_0::intDhandler(void)
{   
}


void Motorola_DSP56600_HAL_0::main(void)
{   
}

#line 10800 "vocoderPam.cc"
Motorola_DSP56600_HAL_0_DSP::Motorola_DSP56600_HAL_0_DSP(unsigned int _idcnt, IDSP56600MasterProtocol_2_0 (&protocol), i_receiver (&speech_samples), i_receiver (&dtx_mode), i_sender (&serial), i_sender (&txdtx_ctrl))
    : _specc::behavior(_idcnt), protocol(protocol), speech_samples(speech_samples), dtx_mode(dtx_mode), serial(serial), txdtx_ctrl(txdtx_ctrl),
    DSP(_IDcnt, speech_samples, dtx_mode, serial, txdtx_ctrl, link, mem),
    link(protocol),
    mem(protocol)
{   
}

Motorola_DSP56600_HAL_0_DSP::~Motorola_DSP56600_HAL_0_DSP(void)
{   
}

void Motorola_DSP56600_HAL_0_DSP::intAhandler(void)
{   
    DSP.intHandler__intA();
}

void Motorola_DSP56600_HAL_0_DSP::intBhandler(void)
{   
    DSP.intHandler();
}

void Motorola_DSP56600_HAL_0_DSP::intChandler(void)
{   
    DSP.intHandler();
}

void Motorola_DSP56600_HAL_0_DSP::intDhandler(void)
{   
    DSP.intHandler();
}

void Motorola_DSP56600_HAL_0_DSP::main(void)
{   
    DSP.main();
}

void Motorola_DSP56600_HAL_0_DSP::reset(void)
{   
    DSP.reset();
}

Motorola_DSP56600_HW_0::Motorola_DSP56600_HW_0(unsigned int _idcnt, _specc::signal<bit<_BITLEN(15,0),true> > (&A), _specc::signal<bit<_BITLEN(23,0),true> > (&D), _specc::signal<bit<_BITLEN(0,0),true> > (&MCS), _specc::signal<bit<_BITLEN(0,0),true> > (&nRD), _specc::signal<bit<_BITLEN(0,0),true> > (&nWR), _specc::signal<bit<_BITLEN(0,0),true> > (&INTR))
    : _specc::behavior(_idcnt), A(A), D(D), MCS(MCS), nRD(nRD), nWR(nWR), INTR(INTR),
    INTR_MASKED(bit<1,true>("0")),
    bus(protocol, INTR_MASKED),
    hal(_IDcnt, bus),
    intr(_IDcnt, protocol, INTR, INTR_MASKED, hal),
    protocol(A, D, MCS, nRD, nWR)
{   
}

Motorola_DSP56600_HW_0::~Motorola_DSP56600_HW_0(void)
{   
}

#line 243 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
void Motorola_DSP56600_HW_0::main(void)
{   
    { _specc::try_block _scc_try_hal(&hal); _specc::exception_block _scc_exception_0(false, &intr, event(&INTR), event(&INTR_MASKED), ((void*)0)); _specc::tryTrapInterrupt(&_scc_try_hal,


	    &_scc_exception_0, ((_specc::exception_block*)0));
    }
}

#line 10867 "vocoderPam.cc"
Motorola_DSP56600_HW_0_DSP::Motorola_DSP56600_HW_0_DSP(unsigned int _idcnt, _specc::signal<bit<_BITLEN(15,0),true> > (&A), _specc::signal<bit<_BITLEN(23,0),true> > (&D), _specc::signal<bit<_BITLEN(0,0),true> > (&MCS), _specc::signal<bit<_BITLEN(0,0),true> > (&nRD), _specc::signal<bit<_BITLEN(0,0),true> > (&nWR), _specc::signal<bit<_BITLEN(0,0),true> > (&INTR), i_receiver (&speech_samples), i_receiver (&dtx_mode), i_sender (&serial), i_sender (&txdtx_ctrl))
    : _specc::behavior(_idcnt), A(A), D(D), MCS(MCS), nRD(nRD), nWR(nWR), INTR(INTR), speech_samples(speech_samples), dtx_mode(dtx_mode), serial(serial), txdtx_ctrl(txdtx_ctrl),
    INTR_MASKED(bit<1,true>("0")),
    bus(protocol, INTR_MASKED),
    hal(_IDcnt, bus, speech_samples, dtx_mode, serial, txdtx_ctrl),
    intr(_IDcnt, protocol, INTR, INTR_MASKED, hal),
    protocol(A, D, MCS, nRD, nWR)
{   
}

Motorola_DSP56600_HW_0_DSP::~Motorola_DSP56600_HW_0_DSP(void)
{   
}

void Motorola_DSP56600_HW_0_DSP::main(void)
{   
    { _specc::try_block _scc_try_hal(&hal); _specc::exception_block _scc_exception_0(false, &intr, event(&INTR), event(&INTR_MASKED), ((void*)0)); _specc::tryTrapInterrupt(&_scc_try_hal,
	    &_scc_exception_0, ((_specc::exception_block*)0));
    }
}

void Motorola_DSP56600_HW_0_DSP::reset(void)
{   
    hal.reset();
}

Motorola_DSP56600_IntTask_0_DSP::Motorola_DSP56600_IntTask_0_DSP(unsigned int _idcnt, const char *(&name), OSAPI (&os))
    : _specc::behavior(_idcnt), name(name), os(os)
{   
}

Motorola_DSP56600_IntTask_0_DSP::~Motorola_DSP56600_IntTask_0_DSP(void)
{   
}

void Motorola_DSP56600_IntTask_0_DSP::body(void)
{   
}

void Motorola_DSP56600_IntTask_0_DSP::main(void)
{   
}

void Motorola_DSP56600_IntTask_0_DSP::start(void)
{   
    body();
}

Motorola_DSP56600_IntTask_0_DSP_intA::Motorola_DSP56600_IntTask_0_DSP_intA(unsigned int _idcnt, const char *(&name), OSAPI (&os), i_send (&ev_c_link_DSP__HW))
    : _specc::behavior(_idcnt), name(name), os(os), ev_c_link_DSP__HW(ev_c_link_DSP__HW)
{   
}

Motorola_DSP56600_IntTask_0_DSP_intA::~Motorola_DSP56600_IntTask_0_DSP_intA(void)
{   
}

void Motorola_DSP56600_IntTask_0_DSP_intA::body(void)
{   
    ev_c_link_DSP__HW.send();
}

void Motorola_DSP56600_IntTask_0_DSP_intA::main(void)
{   
}

void Motorola_DSP56600_IntTask_0_DSP_intA::start(void)
{   
    body();
}

Motorola_DSP56600_Int_0::Motorola_DSP56600_Int_0(unsigned int _idcnt, IDSP56600MasterProtocol_2_0 (&bus), _specc::signal<bit<_BITLEN(0,0),true> > (&INTR), _specc::signal<bit<_BITLEN(0,0),true> > (&INTR_MASKED), IMotorola_DSP56600_IntVectors_0 (&vectors))
    : _specc::behavior(_idcnt), bus(bus), INTR(INTR), INTR_MASKED(INTR_MASKED), vectors(vectors)
{   
}

Motorola_DSP56600_Int_0::~Motorola_DSP56600_Int_0(void)
{   
}

#line 113 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
void Motorola_DSP56600_Int_0::main(void)
{   



    bit<_BITLEN(23,0),true> vec;



    while(((INTR).test()) &&  !((INTR_MASKED).test()))
    {   

#line 132 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
	bus.masterWrite(256, 1);


	bus.masterRead(256,  &vec);



	switch(((vec).toInt())) {
	    case 0: vectors.intAhandler();
	    break;
	    case 1: vectors.intBhandler();
	    break;
	    case 2: vectors.intChandler();
	    break;
	    case 3: vectors.intDhandler();
	    break;
	}
    }
}

#line 10982 "vocoderPam.cc"
Motorola_DSP56600_OSNONE_0_DSP_NET::Motorola_DSP56600_OSNONE_0_DSP_NET(unsigned int _idcnt, i_receiver (&speech_samples), i_receiver (&dtx_mode), i_sender (&serial), i_sender (&txdtx_ctrl), IDSP56600LinkAccess_2_0 (&PortA_mac), IDSP56600MemAccess_2_0 (&PortA_shm))
    : _specc::behavior(_idcnt), speech_samples(speech_samples), dtx_mode(dtx_mode), serial(serial), txdtx_ctrl(txdtx_ctrl), PortA_mac(PortA_mac), PortA_shm(PortA_shm),
    _scc_const_port_0("intrTask__intA"),
    _scc_const_port_1(((unsigned short int)32768)),
    DSP(++_IDcnt, speech_samples, dtx_mode, serial, txdtx_ctrl, os, linkDSP2HW__Bus0, flag__DSP__HW),
    flag__DSP__HW(os),
    intrTask__intA(++_IDcnt, _scc_const_port_0, os, flag__DSP__HW),
    linkDSP2HW__Bus0(PortA_mac, _scc_const_port_1, os),
    os()
{   
}

Motorola_DSP56600_OSNONE_0_DSP_NET::~Motorola_DSP56600_OSNONE_0_DSP_NET(void)
{   
}

void Motorola_DSP56600_OSNONE_0_DSP_NET::intHandler(void)
{   
    os.ienter();
    body: ;
    os.ireturn();
}

void Motorola_DSP56600_OSNONE_0_DSP_NET::intHandler__intA(void)
{   
    os.ienter();
    body: intrTask__intA.start();
    os.ireturn();
}

void Motorola_DSP56600_OSNONE_0_DSP_NET::main(void)
{   
    { _specc::fork _scc_fork_0(&DSP), _scc_fork_1(&intrTask__intA); _specc::par(&_scc_fork_0, &_scc_fork_1, ((_specc::fork*)0));
    }
}

void Motorola_DSP56600_OSNONE_0_DSP_NET::reset(void)
{   
    DSP.reset();
}

Motorola_DSP56600_OS_FCFS_0::Motorola_DSP56600_OS_FCFS_0(unsigned int _idcnt)
    : _specc::behavior(_idcnt)
{   
}

Motorola_DSP56600_OS_FCFS_0::~Motorola_DSP56600_OS_FCFS_0(void)
{   
}

#line 83 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600os.sc"
void Motorola_DSP56600_OS_FCFS_0::intHandler(void)
{   
    body: ;
}

void Motorola_DSP56600_OS_FCFS_0::main(void)
{   
    { _specc::par(((_specc::fork*)0));
    }
}

#line 11045 "vocoderPam.cc"
Motorola_DSP56600_OS_PRIORITY_0::Motorola_DSP56600_OS_PRIORITY_0(unsigned int _idcnt)
    : _specc::behavior(_idcnt)
{   
}

Motorola_DSP56600_OS_PRIORITY_0::~Motorola_DSP56600_OS_PRIORITY_0(void)
{   
}

#line 107 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600os.sc"
void Motorola_DSP56600_OS_PRIORITY_0::intHandler(void)
{   
    body: ;
}

void Motorola_DSP56600_OS_PRIORITY_0::main(void)
{   
    { _specc::par(((_specc::fork*)0));
    }
}

#line 11067 "vocoderPam.cc"
Motorola_DSP56600_PIC_0::Motorola_DSP56600_PIC_0(unsigned int _idcnt, _specc::signal<bit<_BITLEN(15,0),true> > (&A), _specc::signal<bit<_BITLEN(23,0),true> > (&D), _specc::signal<bit<_BITLEN(0,0),true> > (&MCS), _specc::signal<bit<_BITLEN(0,0),true> > (&nRD), _specc::signal<bit<_BITLEN(0,0),true> > (&nWR), _specc::signal<bit<_BITLEN(0,0),true> > (&INTR), _specc::signal<bit<_BITLEN(0,0),true> > (&intA), _specc::signal<bit<_BITLEN(0,0),true> > (&intB), _specc::signal<bit<_BITLEN(0,0),true> > (&intC), _specc::signal<bit<_BITLEN(0,0),true> > (&intD))
    : _specc::behavior(_idcnt), A(A), D(D), MCS(MCS), nRD(nRD), nWR(nWR), INTR(INTR), intA(intA), intB(intB), intC(intC), intD(intD),
    IMR(bit<4,true>("0000")),
    ISR(bit<4,true>("0000")),
    _scc_bus_0(ISR.sigbus_slice(3,0, 0,0)),
    _scc_bus_1(ISR.sigbus_slice(3,0, 1,1)),
    _scc_bus_2(ISR.sigbus_slice(3,0, 2,2)),
    _scc_bus_3(ISR.sigbus_slice(3,0, 3,3)),
    bus(A, D, MCS, nRD, nWR),
    control(++_IDcnt, bus, INTR, ISR, IMR),
    detectA(intA),
    detectB(intB),
    detectC(intC),
    detectD(intD),
    intAdetect(++_IDcnt, detectA, _scc_bus_0),
    intBdetect(++_IDcnt, detectB, _scc_bus_1),
    intCdetect(++_IDcnt, detectC, _scc_bus_2),
    intDdetect(++_IDcnt, detectD, _scc_bus_3)
{   
}

Motorola_DSP56600_PIC_0::~Motorola_DSP56600_PIC_0(void)
{   
}

#line 395 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
void Motorola_DSP56600_PIC_0::main(void) {
    { _specc::fork _scc_fork_0(&control), _scc_fork_1(&intAdetect), _scc_fork_2(&intBdetect), _scc_fork_3(&intCdetect), _scc_fork_4(&intDdetect); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, 
	    &_scc_fork_2, 
	    &_scc_fork_3, 
	    &_scc_fork_4, ((_specc::fork*)0));
    }
}

#line 11104 "vocoderPam.cc"
Motorola_DSP56600_PIC_Control_0::Motorola_DSP56600_PIC_Control_0(unsigned int _idcnt, IDSP56600SlaveProtocol_2_0 (&bus), _specc::signal<bit<_BITLEN(0,0),true> > (&INTR), _specc::signal<bit<_BITLEN(3,0),true> > (&ISR), _specc::signal<bit<_BITLEN(3,0),true> > (&IMR))
    : _specc::behavior(_idcnt), bus(bus), INTR(INTR), ISR(ISR), IMR(IMR)
{   
}

Motorola_DSP56600_PIC_Control_0::~Motorola_DSP56600_PIC_Control_0(void)
{   
}

#line 279 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
void Motorola_DSP56600_PIC_Control_0::main(void)
{   



    bit<_BITLEN(23,0),true> ack;


    while(true)
    {   
	_specc::waitfor((5000));


	while( !(((((bit<_BITLEN(3,0),true>)ISR) &  ~((bit<_BITLEN(3,0),true>)IMR))).test()))
	    _specc::wait(event(&ISR), event(&IMR), ((void*)0));


	INTR = 1;

#line 303 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
	bus.slaveRead(256,  &ack);


	INTR = 0;


	if (((((bit<_BITLEN(0,0),true>)ISR.sig_slice(3,0,(0))) &  ~((bit<_BITLEN(0,0),true>)IMR.sig_slice(3,0,(0)))).test())) {
	    ISR.sig_slice(3,0,(0)) = 0;

#line 316 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
	    bus.slaveWrite(256, 0);
	}
	else 
	    if (((((bit<_BITLEN(0,0),true>)ISR.sig_slice(3,0,(1))) &  ~((bit<_BITLEN(0,0),true>)IMR.sig_slice(3,0,(1)))).test())) {
		ISR.sig_slice(3,0,(1)) = 0;

#line 326 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
		bus.slaveWrite(256, 1);
	    }
	    else 
		if (((((bit<_BITLEN(0,0),true>)ISR.sig_slice(3,0,(2))) &  ~((bit<_BITLEN(0,0),true>)IMR.sig_slice(3,0,(2)))).test())) {
		    ISR.sig_slice(3,0,(2)) = 0;

#line 336 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
		    bus.slaveWrite(256, 2);
		}
		else 
		    if (((((bit<_BITLEN(0,0),true>)ISR.sig_slice(3,0,(3))) &  ~((bit<_BITLEN(0,0),true>)IMR.sig_slice(3,0,(3)))).test())) {
			ISR.sig_slice(3,0,(3)) = 0;

#line 346 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
			bus.slaveWrite(256, 3);
		    }
    }
}

#line 11171 "vocoderPam.cc"
Motorola_DSP56600_PIC_Detect_0::Motorola_DSP56600_PIC_Detect_0(unsigned int _idcnt, i_receive (&detect), _specc::signal<bit<_BITLEN(0,0),true> > (&flag))
    : _specc::behavior(_idcnt), detect(detect), flag(flag)
{   
}

Motorola_DSP56600_PIC_Detect_0::~Motorola_DSP56600_PIC_Detect_0(void)
{   
}

#line 262 "/ECEnet/Apps1/sce/latest/share/sce/db/processors/dsp/dsp56600bf.sc"
void Motorola_DSP56600_PIC_Detect_0::main(void)
{   
    while(true) {
	detect.receive();

	flag = 1;
    }
}

#line 11191 "vocoderPam.cc"
Nop_0::Nop_0(unsigned int _idcnt)
    : _specc::behavior(_idcnt)
{   
}

Nop_0::~Nop_0(void)
{   
}

void Nop_0::main(void)
{   
    _specc::waitfor(0ull);
}

Open_Loop::Open_Loop(unsigned int _idcnt, short int *(&p_speech), short int (&A_t)[4][11], short int *(&wsp), short int (&T0_min_1), short int (&T0_max_1), short int (&T0_min_2), short int (&T0_max_2), bool (&ptch), short int (&txdtx_ctrl), bool (&dtx_mode), bool (&reset_flag))
    : _specc::behavior(_idcnt), p_speech(p_speech), A_t(A_t), wsp(wsp), T0_min_1(T0_min_1), T0_max_1(T0_max_1), T0_min_2(T0_min_2), T0_max_2(T0_max_2), ptch(ptch), txdtx_ctrl(txdtx_ctrl), dtx_mode(dtx_mode), reset_flag(reset_flag),
    _scc_const_port_0(true),
    for_body1(_IDcnt, A_t, p_speech, i, A_t_i, p_speech_i),
    for_body2(_IDcnt, A_t_i, ap1, ap2),
    for_end(_IDcnt, i, wsp_i, wsp),
    for_init(_IDcnt, i, reset_flag, mem_w),
    ol_lag_estimate(_IDcnt, wsp, T0_min_1, T0_max_1, T0_min_2, T0_max_2, ptch, txdtx_ctrl, dtx_mode, reset_flag),
    residual(_IDcnt, ap1, p_speech_i, wsp_i),
    syn_filter(_IDcnt, ap2, wsp_i, wsp_i, mem_w, _scc_const_port_0)
{   
}

Open_Loop::~Open_Loop(void)
{   
}

void Open_Loop::main(void)
{   
    { enum { _scc_state_0, _scc_state_for_init, _scc_state_for_body1, _scc_state_for_body2, _scc_state_residual, _scc_state_syn_filter, _scc_state_for_end, _scc_state_ol_lag_estimate } _scc_next_state = _scc_state_for_init; do switch(_scc_next_state) {
	    case _scc_state_for_init: { for_init.main(); if (i <= 3) { _scc_next_state = _scc_state_for_body1; break; }
		{ _scc_next_state = _scc_state_ol_lag_estimate; break; } }
	    case _scc_state_for_body1: { for_body1.main(); { _scc_next_state = _scc_state_for_body2; break; } }
	    case _scc_state_for_body2: { for_body2.main(); { _scc_next_state = _scc_state_residual; break; } }
	    case _scc_state_residual: { residual.main(); { _scc_next_state = _scc_state_syn_filter; break; } }
	    case _scc_state_syn_filter: { syn_filter.main(); { _scc_next_state = _scc_state_for_end; break; } }
	    case _scc_state_for_end: { for_end.main(); if (i <= 3) { _scc_next_state = _scc_state_for_body1; break; }
		{ _scc_next_state = _scc_state_ol_lag_estimate; break; } }
	    case _scc_state_ol_lag_estimate: { ol_lag_estimate.main(); { _scc_next_state = _scc_state_0; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

void Open_Loop::reset(void)
{   
    for_init.reset();
    ol_lag_estimate.reset();
}

Pitch_Ol_0::Pitch_Ol_0(unsigned int _idcnt, short int *(&sig), short int (&p_max1))
    : _specc::behavior(_idcnt), sig(sig), p_max1(p_max1)
{   
}

Pitch_Ol_0::~Pitch_Ol_0(void)
{   
}

short int Pitch_Ol_0::Lag_max(short int scal_sig[], short int scal_fac, 
    short int L_frame, short int lag_max, short int lag_min, short int *cor_max)
{   
    short int ener_h;
    short int ener_l;
    int i;
    int j;
    int max;
    short int max_h;
    short int max_l;
    short int *p;
    short int *p1;
    short int p_max;
    int t0;

    max = (int)2147483648ul;
    for(i = lag_max; i >= lag_min; i-- )
    {   
	p = scal_sig;
	p1 =  &scal_sig[ -i];
	t0 = 0;
	for(j = 0; j < L_frame; j++  , p++  , p1++ )
	{   
	    t0 = L_mac(t0,  *p,  *p1);
	}
	if (L_sub(t0, max) >= 0)
	{   
	    max = t0;
	    p_max = i;
	}
    }
    t0 = 0;
    p =  &scal_sig[ -p_max];
    for(i = 0; i < L_frame; i++  , p++ )
    {   
	t0 = L_mac(t0,  *p,  *p);
    }
    t0 = Inv_sqrt(t0);
    t0 = L_shl(t0, 1);
    L_Extract(max,  &max_h,  &max_l);
    L_Extract(t0,  &ener_h,  &ener_l);
    t0 = Mpy_32(max_h, max_l, ener_h, ener_l);
    t0 = L_shr(t0, scal_fac);
     *cor_max = extract_h(L_shl(t0, 15));
    return (p_max);
}

void Pitch_Ol_0::main(void)
{   
    int i;
    int j;
    short int max1;
    short int max2;
    short int max3;
    short int p_max2;
    short int p_max3;
    short int scal_fac;
    short int *scal_sig;
    short int scaled_signal[512];
    int t0;

    _specc::waitfor(552633333ull);
    scal_sig =  &scaled_signal[143];
    t0 = 0l;
    for(i =  -143; i < 80; i++ )
    {   
	t0 = L_mac(t0, sig[i], sig[i]);
    }
    if (L_sub(t0, (int)2147483647l) == 0l)
    {   
	for(i =  -143; i < 80; i++ )
	{   
	    scal_sig[i] = shr(sig[i], 3);
	}
	scal_fac = 3;
    }
    else 
	if (L_sub(t0, (int)1048576l) < (int)0)
	{   
	    for(i =  -143; i < 80; i++ )
	    {   
		scal_sig[i] = shl(sig[i], 3);
	    }
	    scal_fac =  -3;
	}
	else 
	{   
	    for(i =  -143; i < 80; i++ )
	    {   
		scal_sig[i] = sig[i];
	    }
	    scal_fac = 0;
	}
    j = shl(18, 2);
    p_max1 = Lag_max(scal_sig, scal_fac, 80, 143, j,  &max1);
    i = sub(j, 1);
    j = shl(18, 1);
    p_max2 = Lag_max(scal_sig, scal_fac, 80, i, j,  &max2);
    i = sub(j, 1);
    p_max3 = Lag_max(scal_sig, scal_fac, 80, i, 18,  &max3);
    if (sub(mult(max1, 27853), max2) < 0)
    {   
	max1 = max2;
	p_max1 = p_max2;
    }
    if (sub(mult(max1, 27853), max3) < 0)
    {   
	p_max1 = p_max3;
    }
}

Post_Process::Post_Process(unsigned int _idcnt, short int (&prm)[57], short int (&txdtx_ctrl), bool (&reset_flag), i_sender (&serial), i_sender (&txdtx_ctrl_out))
    : _specc::behavior(_idcnt), prm(prm), txdtx_ctrl(txdtx_ctrl), reset_flag(reset_flag), serial(serial), txdtx_ctrl_out(txdtx_ctrl_out),
    cn_encoder(_IDcnt, prm, params, txdtx_ctrl, reset_flag),
    prm2bits_12k2(_IDcnt, params, ser),
    seq1(_IDcnt, txdtx_ctrl, local_serial, txdtx_ctrl_out, serial),
    sid_codeword_encoder(_IDcnt, ser, txdtx_ctrl, local_serial)
{   
}

Post_Process::~Post_Process(void)
{   
}

void Post_Process::main(void)
{   
    cn_encoder.main();
    prm2bits_12k2.main();
    sid_codeword_encoder.main();
    seq1.main();
}

void Post_Process::reset(void)
{   
    cn_encoder.reset();
}

Pre_Process::Pre_Process(unsigned int _idcnt, i_receiver (&speech_frame), i_receiver (&dtx_mode), short int (&speech_frame_filtered)[160], bool (&reset_flag_1), bool (&reset_flag_2), bool (&local_dtx_mode))
    : _specc::behavior(_idcnt), speech_frame(speech_frame), dtx_mode(dtx_mode), speech_frame_filtered(speech_frame_filtered), reset_flag_1(reset_flag_1), reset_flag_2(reset_flag_2), local_dtx_mode(local_dtx_mode),
    reset_next(false),
    encoder_homingframe_test(_IDcnt, local_speech_frame, reset_next),
    filter_and_scale(_IDcnt, reset_flag, local_speech_frame, speech_frame_filtered),
    seq1(_IDcnt, reset_next, reset_flag, reset_flag_1, reset_flag_2, speech_frame, dtx_mode, local_speech_frame, local_dtx_mode)
{   
}

Pre_Process::~Pre_Process(void)
{   
}

void Pre_Process::main(void)
{   
    seq1.main();
    encoder_homingframe_test.main();
    filter_and_scale.main();
}

void Pre_Process::reset(void)
{   
    filter_and_scale.reset();
}

Residu_0::Residu_0(unsigned int _idcnt, short int (&a)[11], short int *(&x), short int (&y)[40])
    : _specc::behavior(_idcnt), a(a), x(x), y(y)
{   
}

Residu_0::~Residu_0(void)
{   
}

void Residu_0::main(void)
{   
    int i;
    int j;
    int s;

    _specc::waitfor(31366666ull);
    for(i = 0; i < 40; i++ )
    {   
	s = L_mult(x[i], a[0]);
	for(j = 1; j <= 10; j++ )
	{   
	    s = L_mac(s, a[j], x[i - j]);
	}
	s = L_shl(s, 3);
	y[i] = round(s);
    }
}

Residu_1::Residu_1(unsigned int _idcnt, short int (&a)[11], short int *(&x), short int (&y)[40])
    : _specc::behavior(_idcnt), a(a), x(x), y(y)
{   
}

Residu_1::~Residu_1(void)
{   
}

void Residu_1::main(void)
{   
    int i;
    int j;
    int s;

    _specc::waitfor(31366666ull);
    for(i = 0; i < 40; i++ )
    {   
	s = L_mult(x[i], a[0]);
	for(j = 1; j <= 10; j++ )
	{   
	    s = L_mac(s, a[j], x[i - j]);
	}
	s = L_shl(s, 3);
	y[i] = round(s);
    }
}

Shift_Signals::Shift_Signals(unsigned int _idcnt, short int (&old_speech)[320], short int (&old_wsp)[303], short int (&old_exc)[314], short int (&txdtx_ctrl_cur), short int (&txdtx_ctrl))
    : _specc::behavior(_idcnt), old_speech(old_speech), old_wsp(old_wsp), old_exc(old_exc), txdtx_ctrl_cur(txdtx_ctrl_cur), txdtx_ctrl(txdtx_ctrl)
{   
}

Shift_Signals::~Shift_Signals(void)
{   
}

void Shift_Signals::main(void)
{   
    _specc::waitfor(66666ull);
    Copy( &old_speech[160],  &old_speech[0], 320 - 160);
    Copy( &old_wsp[160],  &old_wsp[0], 143);
    Copy( &old_exc[160],  &old_exc[0], 143 + (10 + 1));
    txdtx_ctrl = txdtx_ctrl_cur;
}

Subframes::Subframes(unsigned int _idcnt, short int (&A_t)[4][11], short int (&Aq_t)[4][11], short int *(&p_speech), short int *(&p_exc), short int (&T0_min_1), short int (&T0_max_1), short int (&T0_min_2), short int (&T0_max_2), short int (&ana)[57], short int (&synth)[160], short int (&txdtx_ctrl), int (&L_pn_seed_tx), bool (&reset_flag), i_int_sender (&ar_cc__ar_tid_Subframes__DSP__HW), i_int_sender (&ar_cc__ar_tid_Codebook_CN__DSP__HW), short int (&T0), short int (&cb_ana)[10], short int (&code)[40], short int (&exc_i)[40], short int (&gain_code), short int (&gain_pit), short int (&h1)[40], short int (&res2)[40], short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__sender (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), i_short_int__10__short_int__40__short_int_short_int__40__receiver (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), A_t(A_t), Aq_t(Aq_t), p_speech(p_speech), p_exc(p_exc), T0_min_1(T0_min_1), T0_max_1(T0_max_1), T0_min_2(T0_min_2), T0_max_2(T0_max_2), ana(ana), synth(synth), txdtx_ctrl(txdtx_ctrl), L_pn_seed_tx(L_pn_seed_tx), reset_flag(reset_flag), ar_cc__ar_tid_Subframes__DSP__HW(ar_cc__ar_tid_Subframes__DSP__HW), ar_cc__ar_tid_Codebook_CN__DSP__HW(ar_cc__ar_tid_Codebook_CN__DSP__HW), T0(T0), cb_ana(cb_ana), code(code), exc_i(exc_i), gain_code(gain_code), gain_pit(gain_pit), h1(h1), res2(res2), xn(xn), y1(y1), y2(y2), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    _scc_const_port_0(-1),
    ar_cb__ar_stop__DSP__HW(_IDcnt, ar_cc__ar_tid_Subframes__DSP__HW, _scc_const_port_0),
    closed_loop(_IDcnt, i_subfr, A_t_i, Aq_t_i, h1, p_speech, res2, p_exc, xn, mem_err, mem_w0, T0_min, T0_max, T0_min_2, T0_max_2, T0, cl_ana, y1, gain_pit, txdtx_ctrl, CN_excitation_gain, reset_flag_1),
    for_body1(_IDcnt, i, A_t, Aq_t, A_t_i, Aq_t_i),
    for_body2(_IDcnt, i_subfr, p_exc, p_speech, exc_i, speech_i),
    for_end(_IDcnt, cl_ana, cb_ana, up_ana, exc_i, synth_i, p_ana, i, i_subfr, p_exc, synth, reset_flag_1),
    for_init(_IDcnt, T0_min_1, T0_max_1, ana, T0_min, T0_max, p_ana, i, i_subfr, mem_w0, mem_err, reset_flag, reset_flag_1),
    update(_IDcnt, i_subfr, Aq_t_i, gain_pit, gain_code, exc_i, speech_i, synth_i, up_ana, xn, y1, y2, code, mem_err, mem_w0, txdtx_ctrl, CN_excitation_gain, reset_flag_1),
    wr_codebook_cn(_IDcnt, code, txdtx_ctrl, L_pn_seed_tx, ar_cc__ar_tid_Subframes__DSP__HW, ar_cc__ar_tid_Codebook_CN__DSP__HW, T0, cb_ana, exc_i, gain_code, gain_pit, h1, res2, xn, y1, y2, ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW, ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP)
{   
}

Subframes::~Subframes(void)
{   
}

void Subframes::main(void)
{   
    { enum { _scc_state_0, _scc_state_for_init, _scc_state_for_body1, _scc_state_closed_loop, _scc_state_for_body2, _scc_state_wr_codebook_cn, _scc_state_update, _scc_state_for_end, _scc_state_ar_cb__ar_stop__DSP__HW } _scc_next_state = _scc_state_for_init; do switch(_scc_next_state) {
	    case _scc_state_for_init: { for_init.main(); if (i_subfr < 
		    160) { _scc_next_state = _scc_state_for_body1; break; }
		{ _scc_next_state = _scc_state_ar_cb__ar_stop__DSP__HW; break; } }
	    case _scc_state_for_body1: { for_body1.main(); { _scc_next_state = _scc_state_closed_loop; break; } }
	    case _scc_state_closed_loop: { closed_loop.main(); { _scc_next_state = _scc_state_for_body2; break; } }
	    case _scc_state_for_body2: { for_body2.main(); { _scc_next_state = _scc_state_wr_codebook_cn; break; } }
	    case _scc_state_wr_codebook_cn: { wr_codebook_cn.main(); { _scc_next_state = _scc_state_update; break; } }
	    case _scc_state_update: { update.main(); { _scc_next_state = _scc_state_for_end; break; } }
	    case _scc_state_for_end: { for_end.main(); if (i_subfr < 160) { _scc_next_state = _scc_state_for_body1; break; }
		{ _scc_next_state = _scc_state_ar_cb__ar_stop__DSP__HW; break; } }
	    case _scc_state_ar_cb__ar_stop__DSP__HW: { ar_cb__ar_stop__DSP__HW.main(); { _scc_next_state = _scc_state_0; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

void Subframes::reset(void)
{   
    for_init.reset();
    closed_loop.reset();
    update.reset();
}

Subframes_Body1::Subframes_Body1(unsigned int _idcnt, int (&i), short int (&A_t)[4][11], short int (&Aq_t)[4][11], short int (&A_t_i)[11], short int (&Aq_t_i)[11])
    : _specc::behavior(_idcnt), i(i), A_t(A_t), Aq_t(Aq_t), A_t_i(A_t_i), Aq_t_i(Aq_t_i)
{   
}

Subframes_Body1::~Subframes_Body1(void)
{   
}

void Subframes_Body1::main(void)
{   
    _specc::waitfor(0ull);
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<11;_scc_index_0++) (A_t_i)[_scc_index_0] = (A_t[i])[_scc_index_0]; }
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<11;_scc_index_0++) (Aq_t_i)[_scc_index_0] = (Aq_t[i])[_scc_index_0]; }
}

Subframes_Body2::Subframes_Body2(unsigned int _idcnt, int (&i_subfr), short int *(&p_exc), short int *(&p_speech), short int (&exc_i)[40], short int (&speech_i)[40])
    : _specc::behavior(_idcnt), i_subfr(i_subfr), p_exc(p_exc), p_speech(p_speech), exc_i(exc_i), speech_i(speech_i)
{   
}

Subframes_Body2::~Subframes_Body2(void)
{   
}

void Subframes_Body2::main(void)
{   
    _specc::waitfor(0ull);
    Copy(p_exc + i_subfr, (short int *)exc_i, 40);
    Copy(p_speech + i_subfr, (short int *)speech_i, 40);
}

Subframes_End::Subframes_End(unsigned int _idcnt, short int (&cl_ana)[2], short int (&cb_ana)[10], short int (&up_ana), short int (&exc_i)[40], short int (&synth_i)[40], short int *(&p_ana), int (&i), int (&i_subfr), short int *(&p_exc), short int (&synth)[160], bool (&reset_flag_1))
    : _specc::behavior(_idcnt), cl_ana(cl_ana), cb_ana(cb_ana), up_ana(up_ana), exc_i(exc_i), synth_i(synth_i), p_ana(p_ana), i(i), i_subfr(i_subfr), p_exc(p_exc), synth(synth), reset_flag_1(reset_flag_1)
{   
}

Subframes_End::~Subframes_End(void)
{   
}

void Subframes_End::main(void)
{   
    _specc::waitfor(100000ull);
     *p_ana++  = cl_ana[0];
     *p_ana++  = cl_ana[1];
    Copy(cb_ana, p_ana, 10);
    p_ana += 10;
     *p_ana++  = up_ana;
    Copy(exc_i, p_exc + i_subfr, 40);
    Copy(synth_i, (short int *)synth + i_subfr, 40);
    reset_flag_1 = false;
    i_subfr += 40;
    i++ ;
}

Subframes_HW::Subframes_HW(unsigned int _idcnt, i_int_receiver (&ar_cc__ar_tid_Subframes__DSP__HW), i_int_receiver (&ar_cc__ar_tid_Codebook_CN__DSP__HW), short int (&T0), short int (&cb_ana)[10], short int (&code)[40], short int (&exc_i)[40], short int (&gain_code), short int (&gain_pit), short int (&h1)[40], short int (&res2)[40], short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], i_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40__receiver (&ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), i_short_int__10__short_int__40__short_int_short_int__40__sender (&ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP))
    : _specc::behavior(_idcnt), ar_cc__ar_tid_Subframes__DSP__HW(ar_cc__ar_tid_Subframes__DSP__HW), ar_cc__ar_tid_Codebook_CN__DSP__HW(ar_cc__ar_tid_Codebook_CN__DSP__HW), T0(T0), cb_ana(cb_ana), code(code), exc_i(exc_i), gain_code(gain_code), gain_pit(gain_pit), h1(h1), res2(res2), xn(xn), y1(y1), y2(y2), ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW(ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW), ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP(ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP),
    ar_cb__ar_tid__DSP__HW(_IDcnt, ar_cc__ar_tid_Subframes__DSP__HW, ar_tid),
    codebook_cn(_IDcnt, xn, y1, gain_pit, exc_i, h1, T0, res2, code, y2, gain_code, cb_ana, ar_cc__ar_tid_Codebook_CN__DSP__HW, ar_cc_short_int_short_int__40__short_int__40__short_int_short_int__40__short_int__40__short_int__40__short_int__40___DSP__HW, ar_cc_short_int__10__short_int__40__short_int_short_int__40___HW__DSP)
{   
}

Subframes_HW::~Subframes_HW(void)
{   
}

void Subframes_HW::main(void)
{   
    { enum { _scc_state_0, _scc_state_ar_cb__ar_tid__DSP__HW, _scc_state_codebook_cn } _scc_next_state = _scc_state_ar_cb__ar_tid__DSP__HW; do switch(_scc_next_state) {
	    case _scc_state_ar_cb__ar_tid__DSP__HW: { ar_cb__ar_tid__DSP__HW.main(); if (ar_tid == 
		    79) { _scc_next_state = _scc_state_codebook_cn; break; }
		{ _scc_next_state = _scc_state_0; break; } }
	    case _scc_state_codebook_cn: { codebook_cn.main(); { _scc_next_state = _scc_state_ar_cb__ar_tid__DSP__HW; break; } } case _scc_state_0: { _scc_next_state = _scc_state_0; break; } } while(_scc_next_state != _scc_state_0);
    }
}

Subframes_Init::Subframes_Init(unsigned int _idcnt, short int (&T0_min_1), short int (&T0_max_1), short int (&ana)[57], short int (&T0_min), short int (&T0_max), short int *(&p_ana), int (&i), int (&i_subfr), short int (&mem_w0)[10], short int (&mem_err)[10], bool (&reset_flag), bool (&reset_flag_1))
    : _specc::behavior(_idcnt), T0_min_1(T0_min_1), T0_max_1(T0_max_1), ana(ana), T0_min(T0_min), T0_max(T0_max), p_ana(p_ana), i(i), i_subfr(i_subfr), mem_w0(mem_w0), mem_err(mem_err), reset_flag(reset_flag), reset_flag_1(reset_flag_1)
{   
}

Subframes_Init::~Subframes_Init(void)
{   
}

void Subframes_Init::init(void)
{   
    Set_zero((short int *)mem_w0, 10);
    Set_zero((short int *)mem_err, 10);
}

void Subframes_Init::main(void)
{   
    _specc::waitfor(800000ull);
    reset_flag_1 = reset_flag;
    if (reset_flag)
	init();
    p_ana =  &ana[5];
    T0_min = T0_min_1;
    T0_max = T0_max_1;
    i = 0;
    i_subfr = 0;
}

void Subframes_Init::reset(void)
{   
    init();
}

Syn_Filt_0::Syn_Filt_0(unsigned int _idcnt, short int (&a)[11], short int (&x)[40], short int (&y)[40], short int (&mem)[10], bool (&update))
    : _specc::behavior(_idcnt), a(a), x(x), y(y), mem(mem), update(update)
{   
}

Syn_Filt_0::~Syn_Filt_0(void)
{   
}

void Syn_Filt_0::main(void)
{   
    int i;
    int j;
    int s;
    short int tmp[80];
    short int *yy;

    _specc::waitfor(34833333ull);
    yy = tmp;
    for(i = 0; i < 10; i++ )
    {   
	 *yy++  = mem[i];
    }
    for(i = 0; i < 40; i++ )
    {   
	s = L_mult(x[i], a[0]);
	for(j = 1; j <= 10; j++ )
	{   
	    s = L_msu(s, a[j], yy[ -j]);
	}
	s = L_shl(s, 3);
	 *yy++  = round(s);
    }
    for(i = 0; i < 40; i++ )
    {   
	y[i] = tmp[i + 10];
    }
    if (update != 0)
    {   
	for(i = 0; i < 10; i++ )
	{   
	    mem[i] = tmp[40 + i];
	}
    }
}

Syn_Filt_1::Syn_Filt_1(unsigned int _idcnt, short int (&a)[11], short int (&x)[40], short int (&y)[40], short int (&mem)[10], bool (&update))
    : _specc::behavior(_idcnt), a(a), x(x), y(y), mem(mem), update(update)
{   
}

Syn_Filt_1::~Syn_Filt_1(void)
{   
}

void Syn_Filt_1::main(void)
{   
    int i;
    int j;
    int s;
    short int tmp[80];
    short int *yy;

    _specc::waitfor(34833333ull);
    yy = tmp;
    for(i = 0; i < 10; i++ )
    {   
	 *yy++  = mem[i];
    }
    for(i = 0; i < 40; i++ )
    {   
	s = L_mult(x[i], a[0]);
	for(j = 1; j <= 10; j++ )
	{   
	    s = L_msu(s, a[j], yy[ -j]);
	}
	s = L_shl(s, 3);
	 *yy++  = round(s);
    }
    for(i = 0; i < 40; i++ )
    {   
	y[i] = tmp[i + 10];
    }
    if (update != 0)
    {   
	for(i = 0; i < 10; i++ )
	{   
	    mem[i] = tmp[40 + i];
	}
    }
}

Syn_Filt_2::Syn_Filt_2(unsigned int _idcnt, short int (&a)[11], short int (&x)[40], short int (&y)[40], short int (&mem)[10], bool (&update))
    : _specc::behavior(_idcnt), a(a), x(x), y(y), mem(mem), update(update)
{   
}

Syn_Filt_2::~Syn_Filt_2(void)
{   
}

void Syn_Filt_2::main(void)
{   
    int i;
    int j;
    int s;
    short int tmp[80];
    short int *yy;

    _specc::waitfor(34833333ull);
    yy = tmp;
    for(i = 0; i < 10; i++ )
    {   
	 *yy++  = mem[i];
    }
    for(i = 0; i < 40; i++ )
    {   
	s = L_mult(x[i], a[0]);
	for(j = 1; j <= 10; j++ )
	{   
	    s = L_msu(s, a[j], yy[ -j]);
	}
	s = L_shl(s, 3);
	 *yy++  = round(s);
    }
    for(i = 0; i < 40; i++ )
    {   
	y[i] = tmp[i + 10];
    }
    if (update != 0)
    {   
	for(i = 0; i < 10; i++ )
	{   
	    mem[i] = tmp[40 + i];
	}
    }
}

Syn_Filt_3::Syn_Filt_3(unsigned int _idcnt, short int (&a)[11], short int (&x)[40], short int (&y)[40], short int (&mem)[10], bool (&update))
    : _specc::behavior(_idcnt), a(a), x(x), y(y), mem(mem), update(update)
{   
}

Syn_Filt_3::~Syn_Filt_3(void)
{   
}

void Syn_Filt_3::main(void)
{   
    int i;
    int j;
    int s;
    short int tmp[80];
    short int *yy;

    _specc::waitfor(34833333ull);
    yy = tmp;
    for(i = 0; i < 10; i++ )
    {   
	 *yy++  = mem[i];
    }
    for(i = 0; i < 40; i++ )
    {   
	s = L_mult(x[i], a[0]);
	for(j = 1; j <= 10; j++ )
	{   
	    s = L_msu(s, a[j], yy[ -j]);
	}
	s = L_shl(s, 3);
	 *yy++  = round(s);
    }
    for(i = 0; i < 40; i++ )
    {   
	y[i] = tmp[i + 10];
    }
    if (update != 0)
    {   
	for(i = 0; i < 10; i++ )
	{   
	    mem[i] = tmp[40 + i];
	}
    }
}

Syn_Filt_4::Syn_Filt_4(unsigned int _idcnt, short int (&a)[11], short int (&x)[40], short int (&y)[40], short int (&mem)[10], bool (&update))
    : _specc::behavior(_idcnt), a(a), x(x), y(y), mem(mem), update(update)
{   
}

Syn_Filt_4::~Syn_Filt_4(void)
{   
}

void Syn_Filt_4::main(void)
{   
    int i;
    int j;
    int s;
    short int tmp[80];
    short int *yy;

    _specc::waitfor(34833333ull);
    yy = tmp;
    for(i = 0; i < 10; i++ )
    {   
	 *yy++  = mem[i];
    }
    for(i = 0; i < 40; i++ )
    {   
	s = L_mult(x[i], a[0]);
	for(j = 1; j <= 10; j++ )
	{   
	    s = L_msu(s, a[j], yy[ -j]);
	}
	s = L_shl(s, 3);
	 *yy++  = round(s);
    }
    for(i = 0; i < 40; i++ )
    {   
	y[i] = tmp[i + 10];
    }
    if (update != 0)
    {   
	for(i = 0; i < 10; i++ )
	{   
	    mem[i] = tmp[40 + i];
	}
    }
}

Update::Update(unsigned int _idcnt, int (&i_subfr), short int (&Aq)[11], short int (&gain_pit), short int (&gain_code), short int (&exc_i)[40], short int (&speech_i)[40], short int (&synth_i)[40], short int (&ana), short int (&xn)[40], short int (&y1)[40], short int (&y2)[40], short int (&code)[40], short int (&mem_err)[10], short int (&mem_w0)[10], short int (&txdtx_ctrl), short int (&CN_excitation_gain), bool (&reset_flag))
    : _specc::behavior(_idcnt), i_subfr(i_subfr), Aq(Aq), gain_pit(gain_pit), gain_code(gain_code), exc_i(exc_i), speech_i(speech_i), synth_i(synth_i), ana(ana), xn(xn), y1(y1), y2(y2), code(code), mem_err(mem_err), mem_w0(mem_w0), txdtx_ctrl(txdtx_ctrl), CN_excitation_gain(CN_excitation_gain), reset_flag(reset_flag),
    ex_syn_upd_sh(_IDcnt, gain_pit, qgain_code, exc_i, speech_i, synth_i, xn, y1, y2, code, Aq, mem_err, mem_w0, txdtx_ctrl, reset_flag),
    q_gain_code(_IDcnt, i_subfr, code, gain_code, qgain_code, txdtx_ctrl, CN_excitation_gain, ana, reset_flag)
{   
}

Update::~Update(void)
{   
}

void Update::main(void)
{   
    q_gain_code.main();
    ex_syn_upd_sh.main();
}

void Update::reset(void)
{   
    q_gain_code.reset();
    ex_syn_upd_sh.reset();
}

Weight_Ai_0::Weight_Ai_0(unsigned int _idcnt, short int (&a)[11], short int (&fac)[10], short int (&a_exp)[11])
    : _specc::behavior(_idcnt), a(a), fac(fac), a_exp(a_exp)
{   
}

Weight_Ai_0::~Weight_Ai_0(void)
{   
}

void Weight_Ai_0::main(void)
{   
    int i;

    _specc::waitfor(716666ull);
    a_exp[0] = a[0];
    for(i = 1; i <= 10; i++ )
    {   
	a_exp[i] = round(L_mult(a[i], fac[i - 1]));
    }
}

Weight_Ai_1::Weight_Ai_1(unsigned int _idcnt, short int (&a)[11], short int (&fac)[10], short int (&a_exp)[11])
    : _specc::behavior(_idcnt), a(a), fac(fac), a_exp(a_exp)
{   
}

Weight_Ai_1::~Weight_Ai_1(void)
{   
}

void Weight_Ai_1::main(void)
{   
    int i;

    _specc::waitfor(716666ull);
    a_exp[0] = a[0];
    for(i = 1; i <= 10; i++ )
    {   
	a_exp[i] = round(L_mult(a[i], fac[i - 1]));
    }
}

Weight_Ai_2::Weight_Ai_2(unsigned int _idcnt, short int (&a)[11], short int (&fac)[10], short int (&a_exp)[11])
    : _specc::behavior(_idcnt), a(a), fac(fac), a_exp(a_exp)
{   
}

Weight_Ai_2::~Weight_Ai_2(void)
{   
}

void Weight_Ai_2::main(void)
{   
    int i;

    _specc::waitfor(716666ull);
    a_exp[0] = a[0];
    for(i = 1; i <= 10; i++ )
    {   
	a_exp[i] = round(L_mult(a[i], fac[i - 1]));
    }
}

// function definitions //////////////////////////////////////////////

#line 71 "src/arg_handler.sc"
bool arg_handler(int argc, char **argv, 
    char **speechfile_name, char **serialfile_name)
{   
    bool dtx_mode = false;


    printf("\n/*******************************************************\n\n");
    printf("     European digital cellular telecommunications system\n");
    printf("                12200 bits/s speech codec for\n");
    printf("          enhanced full rate speech traffic channels\n\n");
    printf("     Bit-Exact SpecC Simulation Code - encoder\n");
    printf("     Version 1.0\n");
    printf("     March 13, 1999\n\n");
    printf("*********************************************************/\n\n");



    if ((argc < 3) || (argc > 4))
    {   
	printf("   Usage:\n\n");
	printf("      coder  speech_file  bitstream_file  <dtx|nodtx>\n");
	printf("\n");
	exit(1);
    }

    if (argc == 4)
    {   
	if (strcmp(argv[3], "nodtx") == 0)
	{   
	    dtx_mode = 0;
	}
	else  if (strcmp(argv[3], "dtx") == 0)
	    {   
		dtx_mode = 1;
	    }
	    else 
	    {   
		printf("\nWrong DTX switch:  %s !!\n", argv[3]);
		exit(1);
	    }
    }
    if (dtx_mode == 1)
    {   
	printf(" DTX:  enabled\n");
    }
    else 
    {   
	printf(" DTX:  disabled\n");
    }

     *speechfile_name = argv[1];
     *serialfile_name = argv[2];

    return dtx_mode;
}

#line 13 "src/common/array_op.sc"
void Set_zero(
    short int x[], 
    short int L)

{   
    int i;

    for(i = 0; i < L; i++ )
    {   
	x[i] = 0;
    }

    return ;
}

#line 40 "src/common/array_op.sc"
void Copy(
    short int x[], 
    short int y[], 
    short int L)

{   
    int i;

    for(i = 0; i < L; i++ )
    {   
	y[i] = x[i];
    }

    return ;
}

#line 29 "src/common/basic_func.sc"
void Convolut(
    short int x[], 
    short int h[], 
    short int y[], 
    short int L)

{   
    int i; int n;
    int s;

    for(n = 0; n < L; n++ )
    {   
	s = 0;
	for(i = 0; i <= n; i++ )
	{   
	    s = L_mac(s, x[i], h[n - i]);
	}
	s = L_shl(s, 3);
	y[n] = extract_h(s);
    }

    return ;
}

#line 83 "src/common/basic_func.sc"
void Log2(
    int L_x, 
    short int *exponent, 
    short int *fraction)

{   
    int i = 0;
    short int a; short int exp; short int tmp;
    int L_y;


    if (L_x <= (int)0)
    {   
	 *exponent = 0;
	 *fraction = 0;
	return ;
    }

    exp = norm_l(L_x);
    L_x = L_shl(L_x, exp);

     *exponent = sub(30, exp);


    L_x = L_shr(L_x, 9);
    i = extract_h(L_x);

#line 114 "src/common/basic_func.sc"
    L_x = L_shr(L_x, 1);
    a = extract_l(L_x);
    a = a & (short int)32767;

#line 122 "src/common/basic_func.sc"
    i = sub(i, 32);

    L_y = L_deposit_h(log_table[i]);
    tmp = sub(log_table[i], log_table[i + 1]);
    L_y = L_msu(L_y, tmp, a);

     *fraction = extract_h(L_y);

    return ;
}

#line 159 "src/common/basic_func.sc"
int Pow2(
    short int exponent, 
    short int fraction)

{   
    int i = 0;
    short int a; short int exp; short int tmp;
    int L_x;


    L_x = L_mult(fraction, 32);
    i = extract_h(L_x);

#line 177 "src/common/basic_func.sc"
    L_x = L_shr(L_x, 1);
    a = extract_l(L_x);
    a = a & (short int)32767;

#line 185 "src/common/basic_func.sc"
    L_x = L_deposit_h(pow_table[i]);
    tmp = sub(pow_table[i], pow_table[i + 1]);
    L_x = L_msu(L_x, tmp, a);

    exp = sub(30, exponent);
    L_x = L_shr_r(L_x, exp);

    return (L_x);
}

#line 229 "src/common/basic_func.sc"
int Inv_sqrt(
    int L_x)

{   
    int i = 0;
    short int a; short int exp; short int tmp;
    int L_y;


    if (L_x <= (int)0)
	return ((int)1073741823l);

    exp = norm_l(L_x);
    L_x = L_shl(L_x, exp);

    exp = sub(30, exp);

    if ((exp & 1) == 0)
    {   
	L_x = L_shr(L_x, 1);
    }
    exp = shr(exp, 1);
    exp = add(exp, 1);


    L_x = L_shr(L_x, 9);
    i = extract_h(L_x);

#line 261 "src/common/basic_func.sc"
    L_x = L_shr(L_x, 1);
    a = extract_l(L_x);
    a = a & (short int)32767;

#line 269 "src/common/basic_func.sc"
    i = sub(i, 16);

    L_y = L_deposit_h(sqrt_table[i]);
    tmp = sub(sqrt_table[i], sqrt_table[i + 1]);
    L_y = L_msu(L_y, tmp, a);

    L_y = L_shr(L_y, exp);

    return (L_y);
}

#line 291 "src/common/basic_func.sc"
short int gmed5(
    short int ind[])

{   
    short int i; short int ix = ((short int)0); short int j; short int tmp[5];
    short int max; short int tmp2[5];

    for(i = 0; i < 5; i++ )
    {   
	tmp2[i] = ind[i];
    }

    for(i = 0; i < 5; i++ )
    {   
	max =  -8192;
	for(j = 0; j < 5; j++ )
	{   
	    if (sub(tmp2[j], max) >= 0)
	    {   
		max = tmp2[j];
		ix = j;
	    }
	}
	tmp2[ix] =  -16384;
	tmp[i] = ix;
    }

    return (ind[tmp[2]]);
}

#line 341 "src/common/basic_func.sc"
short int interpolate_CN_param(
    short int old_param, 
    short int new_param, 
    short int rx_dtx_state)

{   
    static const short int interp_factor[24] = { 

      ((short int)1365),((short int)2730),((short int)4096),((short int)5461),((short int)6826),((short int)8192),
      ((short int)9557),((short int)10922),((short int)12288),((short int)13653),((short int)15018),((short int)16384),
      ((short int)17749),((short int)19114),((short int)20480),((short int)21845),((short int)23210),((short int)24576),
      ((short int)25941),((short int)27306),((short int)28672),((short int)30037),((short int)31402),((short int)32767) };
    short int temp;
    int L_temp;

    L_temp = L_mult(interp_factor[rx_dtx_state], new_param);
    temp = sub(32767, interp_factor[rx_dtx_state]);
    temp = add(temp, 1);
    L_temp = L_mac(L_temp, temp, old_param);
    temp = round(L_temp);

    return temp;
}

#line 60 "src/common/basic_op.sc"
void clear_overflow(void)
{   
    Overflow = 0;
}

#line 70 "src/common/basic_op.sc"
void clear_carry(void)
{   
    Carry = 0;
}

#line 80 "src/common/basic_op.sc"
bool overflow(void)
{   
    return (Overflow);
}

#line 116 "src/common/basic_op.sc"
short int saturate(int L_var1)
{   
    short int var_out;

    if (L_var1 > 32767l)
    {   
	Overflow = 1;
	var_out = (short int)32767;
    }
    else  if (L_var1 < (int)4294934528ul)
	{   
	    Overflow = 1;
	    var_out = (short int)32768;
	}
	else 
	{   
	    Overflow = 0;
	    var_out = extract_l(L_var1);
	}

    return (var_out);
}

#line 173 "src/common/basic_op.sc"
short int add(short int var1, short int var2)
{   
    short int var_out;
    int L_sum;

    L_sum = (int)var1 + var2;
    var_out = saturate(L_sum);

    return (var_out);
}

#line 218 "src/common/basic_op.sc"
short int sub(short int var1, short int var2)
{   
    short int var_out;
    int L_diff;

    L_diff = (int)var1 - var2;
    var_out = saturate(L_diff);

    return (var_out);
}

#line 257 "src/common/basic_op.sc"
short int abs_s(short int var1)
{   
    short int var_out;

    if (var1 == (short int)32768)
    {   
	var_out = (short int)32767;
    }
    else 
    {   
	if (var1 < 0)
	{   
	    var_out =  -var1;
	}
	else 
	{   
	    var_out = var1;
	}
    }

    return (var_out);
}

#line 315 "src/common/basic_op.sc"
short int shl(short int var1, short int var2)
{   
    short int var_out;
    int result;

    if (var2 < 0)
    {   
	var_out = shr(var1,  -var2);
    }
    else 
    {   
	result = (int)var1 * ((int)1 << var2);

	if ((var2 > 15 && var1 != 0) || (result != (int)((short int)result)))
	{   
	    Overflow = 1;
	    var_out = ((var1 > 0) ? (short int)32767 : (short int)32768);
	}
	else 
	{   
	    var_out = extract_l(result);
	}
    }

    return (var_out);
}

#line 377 "src/common/basic_op.sc"
short int shr(short int var1, short int var2)
{   
    short int var_out;

    if (var2 < 0)
    {   
	var_out = shl(var1,  -var2);
    }
    else 
    {   
	if (var2 >= 15)
	{   
	    var_out = ((var1 < 0) ?  -1 : 0);
	}
	else 
	{   
	    if (var1 < 0)
	    {   
		var_out =  ~(( ~var1) >> var2);
	    }
	    else 
	    {   
		var_out = var1 >> var2;
	    }
	}
    }

    return (var_out);
}

#line 442 "src/common/basic_op.sc"
short int mult(short int var1, short int var2)
{   
    short int var_out;
    int L_product;

    L_product = (int)var1 * (int)var2;

    L_product = (L_product & (int)4294934528ul) >> 15;

    if (L_product & (int)65536l)
	L_product = L_product | (int)4294901760ul;

    var_out = saturate(L_product);

    return (var_out);
}

#line 494 "src/common/basic_op.sc"
int L_mult(short int var1, short int var2)
{   
    int L_var_out;

    L_var_out = (int)var1 * (int)var2;

    if (L_var_out != (int)1073741824l)
    {   
	L_var_out *= 2;
    }
    else 
    {   
	Overflow = 1;
	L_var_out = (int)2147483647l;
    }

    return (L_var_out);
}

#line 542 "src/common/basic_op.sc"
short int negate(short int var1)
{   
    short int var_out;

    var_out = ((var1 == (short int)32768) ? (short int)32767 :  -var1);

    return (var_out);
}

#line 579 "src/common/basic_op.sc"
short int extract_h(int L_var1)
{   
    short int var_out;

    var_out = (short int)(L_var1 >> 16);

    return (var_out);
}

#line 616 "src/common/basic_op.sc"
short int extract_l(int L_var1)
{   
    short int var_out;

    var_out = (short int)L_var1;

    return (var_out);
}

#line 656 "src/common/basic_op.sc"
short int round(int L_var1)
{   
    short int var_out;
    int L_rounded;

    L_rounded = L_add(L_var1, (int)32768l);
    var_out = extract_h(L_rounded);

    return (var_out);
}

#line 704 "src/common/basic_op.sc"
int L_mac(int L_var3, short int var1, short int var2)
{   
    int L_var_out;
    int L_product;

    L_product = L_mult(var1, var2);
    L_var_out = L_add(L_var3, L_product);

    return (L_var_out);
}

#line 752 "src/common/basic_op.sc"
int L_msu(int L_var3, short int var1, short int var2)
{   
    int L_var_out;
    int L_product;

    L_product = L_mult(var1, var2);
    L_var_out = L_sub(L_var3, L_product);

    return (L_var_out);
}

#line 806 "src/common/basic_op.sc"
int L_macNs(int L_var3, short int var1, short int var2)
{   
    int L_var_out;

    L_var_out = L_mult(var1, var2);
    L_var_out = L_add_c(L_var3, L_var_out);

    return (L_var_out);
}

#line 903 "src/common/basic_op.sc"
int L_add(int L_var1, int L_var2)
{   
    int L_var_out;

    L_var_out = L_var1 + L_var2;

    if (((L_var1 ^ L_var2) & (int)2147483648ul) == 0)
    {   
	if ((L_var_out ^ L_var1) & (int)2147483648ul)
	{   
	    L_var_out = ((L_var1 < 0) ? (int)2147483648ul : (int)2147483647l);
	    Overflow = 1;
	}
    }

    return (L_var_out);
}

#line 953 "src/common/basic_op.sc"
int L_sub(int L_var1, int L_var2)
{   
    int L_var_out;

    L_var_out = L_var1 - L_var2;

    if (((L_var1 ^ L_var2) & (int)2147483648ul) != 0)
    {   
	if ((L_var_out ^ L_var1) & (int)2147483648ul)
	{   
	    L_var_out = ((L_var1 < 0l) ? (int)2147483648ul : (int)2147483647l);
	    Overflow = 1;
	}
    }

    return (L_var_out);
}

#line 1008 "src/common/basic_op.sc"
int L_add_c(int L_var1, int L_var2)
{   
    int L_var_out;
    int L_test;
    bool carry_int = false;

    L_var_out = L_var1 + L_var2 + Carry;

    L_test = L_var1 + L_var2;

    if ((L_var1 > 0) && (L_var2 > 0) && (L_test < 0))
    {   
	Overflow = 1;
	carry_int = 0;
    }
    else 
    {   
	if ((L_var1 < 0) && (L_var2 < 0))
	{   
	    if (L_test >= 0)
	    {   
		Overflow = 1;
		carry_int = 1;
	    }
	    else 
	    {   
		Overflow = 0;
		carry_int = 1;
	    }
	}
	else 
	{   
	    if (((L_var1 ^ L_var2) < 0) && (L_test >= 0))
	    {   
		Overflow = 0;
		carry_int = 1;
	    }
	    else 
	    {   
		Overflow = 0;
		carry_int = 0;
	    }
	}
    }

    if (Carry)
    {   
	if (L_test == (int)2147483647l)
	{   
	    Overflow = 1;
	    Carry = carry_int;
	}
	else 
	{   
	    if (L_test == (int)4294967295ul)
	    {   
		Carry = 1;
	    }
	    else 
	    {   
		Carry = carry_int;
	    }
	}
    }
    else 
    {   
	Carry = carry_int;
    }

    return (L_var_out);
}

#line 1206 "src/common/basic_op.sc"
int L_negate(int L_var1)
{   
    int L_var_out;

    L_var_out = ((L_var1 == (int)2147483648ul) ? (int)2147483647l :  -L_var1);

    return (L_var_out);
}

#line 1249 "src/common/basic_op.sc"
short int mult_r(short int var1, short int var2)
{   
    short int var_out;
    int L_product_arr;

    L_product_arr = (int)var1 * (int)var2;
    L_product_arr += (int)16384ul;
    L_product_arr &= (int)4294934528ul;
    L_product_arr >>= 15;

    if (L_product_arr & (int)65536ul)
    {   
	L_product_arr |= (int)4294901760ul;
    }
    var_out = saturate(L_product_arr);

    return (var_out);
}

#line 1302 "src/common/basic_op.sc"
int L_shl(int L_var1, short int var2)
{   
    int L_var_out;

    if (var2 <= 0)
    {   
	L_var_out = L_shr(L_var1,  -var2);
    }
    else 

    {   
	for(; var2 > 0; var2-- )
	{   
	    if (L_var1 > (int)1073741823l)
	    {   
		Overflow = 1;
		L_var_out = (int)2147483647l;
		break;
	    }
	    else 
	    {   
		if (L_var1 < (int)3221225472ul)
		{   
		    Overflow = 1;
		    L_var_out = (int)2147483648ul;
		    break;
		}
	    }
	    L_var1 *= 2;
	    L_var_out = L_var1;
	}
    }

    return (L_var_out);
}

#line 1372 "src/common/basic_op.sc"
int L_shr(int L_var1, short int var2)
{   
    int L_var_out;

    if (var2 < 0)
    {   
	L_var_out = L_shl(L_var1,  -var2);
    }
    else 
    {   
	if (var2 >= 31)
	{   
	    L_var_out = ((L_var1 < 0l) ?  -1 : 0);
	}
	else 
	{   
	    if (L_var1 < 0)
	    {   
		L_var_out =  ~(( ~L_var1) >> var2);
	    }
	    else 
	    {   
		L_var_out = L_var1 >> var2;
	    }
	}
    }

    return (L_var_out);
}

#line 1444 "src/common/basic_op.sc"
short int shr_r(short int var1, short int var2)
{   
    short int var_out;

    if (var2 > 15)
    {   
	var_out = 0;
    }
    else 
    {   
	var_out = shr(var1, var2);

	if (var2 > 0)
	{   
	    if ((var1 & ((short int)1 << (var2 - 1))) != 0)
	    {   
		var_out++ ;
	    }
	}
    }

    return (var_out);
}

#line 1507 "src/common/basic_op.sc"
short int mac_r(int L_var3, short int var1, short int var2)
{   
    short int var_out;

    L_var3 = L_mac(L_var3, var1, var2);
    L_var3 = L_add(L_var3, (int)32768l);
    var_out = extract_h(L_var3);

    return (var_out);
}

#line 1557 "src/common/basic_op.sc"
short int msu_r(int L_var3, short int var1, short int var2)
{   
    short int var_out;

    L_var3 = L_msu(L_var3, var1, var2);
    L_var3 = L_add(L_var3, (int)32768l);
    var_out = extract_h(L_var3);

    return (var_out);
}

#line 1597 "src/common/basic_op.sc"
int L_deposit_h(short int var1)
{   
    int L_var_out;

    L_var_out = (int)var1 << 16;

    return (L_var_out);
}

#line 1635 "src/common/basic_op.sc"
int L_deposit_l(short int var1)
{   
    int L_var_out;

    L_var_out = (int)var1;

    return (L_var_out);
}

#line 1686 "src/common/basic_op.sc"
int L_shr_r(int L_var1, short int var2)
{   
    int L_var_out;

    if (var2 > 31)
    {   
	L_var_out = 0;
    }
    else 
    {   
	L_var_out = L_shr(L_var1, var2);

	if (var2 > 0)
	{   
	    if ((L_var1 & ((int)1 << (var2 - 1))) != 0)
	    {   
		L_var_out++ ;
	    }
	}
    }

    return (L_var_out);
}

#line 1739 "src/common/basic_op.sc"
int L_abs(int L_var1)
{   
    int L_var_out;

    if (L_var1 == (int)2147483648ul)
    {   
	L_var_out = (int)2147483647l;
    }
    else 
    {   
	if (L_var1 < 0)
	{   
	    L_var_out =  -L_var1;
	}
	else 
	{   
	    L_var_out = L_var1;
	}
    }


    return (L_var_out);
}

#line 1854 "src/common/basic_op.sc"
short int norm_s(short int var1)
{   
    short int var_out;

    if (var1 == 0)
    {   
	var_out = 0;
    }
    else 
    {   
	if (var1 == (short int)65535)
	{   
	    var_out = 15;
	}
	else 
	{   
	    if (var1 < 0)
	    {   
		var1 =  ~var1;
	    }
	    for(var_out = 0; var1 < 16384; var_out++ )
	    {   
		var1 <<= 1;
	    }
	}
    }


    return (var_out);
}

#line 1922 "src/common/basic_op.sc"
short int div_s(short int var1, short int var2)
{   
    short int var_out = ((short int)0);
    int iteration;
    int L_num;
    int L_denom;

#line 1944 "src/common/basic_op.sc"
    if (var1 == 0)
    {   
	var_out = 0;
    }
    else 
    {   
	if (var1 == var2)
	{   
	    var_out = (short int)32767;
	}
	else 
	{   
	    L_num = L_deposit_l(var1);
	    L_denom = L_deposit_l(var2);

	    for(iteration = 0; iteration < 15; iteration++ )
	    {   
		var_out <<= 1;
		L_num <<= 1;

		if (L_num >= L_denom)
		{   
		    L_num = L_sub(L_num, L_denom);
		    var_out = add(var_out, 1);
		}
	    }
	}
    }


    return (var_out);
}

#line 2010 "src/common/basic_op.sc"
short int norm_l(int L_var1)
{   
    short int var_out;

    if (L_var1 == 0)
    {   
	var_out = 0;
    }
    else 
    {   
	if (L_var1 == (int)4294967295ul)
	{   
	    var_out = 31;
	}
	else 
	{   
	    if (L_var1 < 0)
	    {   
		L_var1 =  ~L_var1;
	    }
	    for(var_out = 0; L_var1 < (int)1073741824l; var_out++ )
	    {   
		L_var1 <<= 1;
	    }
	}
    }

    return (var_out);
}

#line 2085 "src/common/basic_op.sc"
void L_Extract(int L_32, short int *hi, short int *lo)
{   
     *hi = extract_h(L_32);
     *lo = extract_l(L_msu(L_shr(L_32, 1),  *hi, 16384));
    return ;
}

#line 2113 "src/common/basic_op.sc"
int L_Comp(short int hi, short int lo)
{   
    int L_32;

    L_32 = L_deposit_h(hi);
    return (L_mac(L_32, lo, 1));
}

#line 2141 "src/common/basic_op.sc"
int Mpy_32(short int hi1, short int lo1, short int hi2, short int lo2)
{   
    int L_32;

    L_32 = L_mult(hi1, hi2);
    L_32 = L_mac(L_32, mult(hi1, lo2), 1);
    L_32 = L_mac(L_32, mult(lo1, hi2), 1);

    return (L_32);
}

#line 2170 "src/common/basic_op.sc"
int Mpy_32_16(short int hi, short int lo, short int n)
{   
    int L_32;

    L_32 = L_mult(hi, n);
    L_32 = L_mac(L_32, mult(lo, n), 1);

    return (L_32);
}

#line 2222 "src/common/basic_op.sc"
int Div_32(int L_num, short int denom_hi, short int denom_lo)
{   
    short int approx; short int hi; short int lo; short int n_hi; short int n_lo;
    int L_32;



    approx = div_s((short int)16383, denom_hi);



    L_32 = Mpy_32_16(denom_hi, denom_lo, approx);

    L_32 = L_sub((int)2147483647l, L_32);

    L_Extract(L_32,  &hi,  &lo);

    L_32 = Mpy_32_16(hi, lo, approx);



    L_Extract(L_32,  &hi,  &lo);
    L_Extract(L_num,  &n_hi,  &n_lo);
    L_32 = Mpy_32(n_hi, n_lo, hi, lo);
    L_32 = L_shl(L_32, 2);

    return (L_32);
}

#line 25 "src/common/lsp_az.sc"
void Lsp_Az(
    short int lsp[], 
    short int a[])

{   
    int i; int j;

    int f1[6]; int f2[6];
    int t0;

    Get_lsp_pol( &lsp[0], f1);
    Get_lsp_pol( &lsp[1], f2);

    for(i = 5; i > 0; i-- )
    {   
	f1[i] = L_add(f1[i], f1[i - 1]);
	f2[i] = L_sub(f2[i], f2[i - 1]);
    }

    a[0] = 4096;
    for(i = 1 , j = 10; i <= 5; i++  , j-- )
    {   
	t0 = L_add(f1[i], f2[i]);
	a[i] = extract_l(L_shr_r(t0, 13));
	t0 = L_sub(f1[i], f2[i]);
	a[j] = extract_l(L_shr_r(t0, 13));
    }

    return ;
}

#line 88 "src/common/lsp_az.sc"
static void Get_lsp_pol(short int *lsp, int *f)
{   
    int i; int j;
    short int hi; short int lo;
    int t0;


     *f = L_mult(4096, 2048);
    f++ ;
     *f = L_msu((int)0,  *lsp, 512);
    f++ ;
    lsp += 2;

    for(i = 2; i <= 5; i++ )
    {   
	 *f = f[ -2];

	for(j = 1; j < i; j++  , f-- )
	{   
	    L_Extract(f[ -1],  &hi,  &lo);
	    t0 = Mpy_32_16(hi, lo,  *lsp);
	    t0 = L_shl(t0, 1);
	     *f = L_add( *f, f[ -2]);
	     *f = L_sub( *f, t0);
	}
	 *f = L_msu( *f,  *lsp, 512);
	f += i;
	lsp += 2;
    }

    return ;
}

#line 13084 "vocoderPam.cc"
void _scc_bit4_err_handle(
    const _bit4& bit4vec)
{   
    char temp_bits[1024], *p;
    p=bit2str(2,&temp_bits[1023], bit4vec);
    _specc::abort(
	"ERROR:\t Casting a bit4 vector failed \n"
	"Bit4 vector contains X/Z values %s\n"
	"Simulation aborted.\n", p);
	
}

//////////////////////////////////////////////////////////////////////
// End of file vocoderPam.cc
//////////////////////////////////////////////////////////////////////
